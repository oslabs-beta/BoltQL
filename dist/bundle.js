/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t,e,n={76:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function i(){"use strict";i=function(){return t};var t={},e=Object.prototype,n=e.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function h(t,e,n,r){var i=e&&e.prototype instanceof p?e:p,a=Object.create(i.prototype),s=new E(r||[]);return o(a,"_invoke",{value:C(t,n,s)}),a}function d(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=h;var f={};function p(){}function m(){}function g(){}var y={};u(y,s,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(M([])));b&&b!==e&&n.call(b,s)&&(y=b);var x=g.prototype=p.prototype=Object.create(y);function A(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function i(o,a,s,l){var c=d(t[o],t,a);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==r(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,s,l)}),(function(t){i("throw",t,s,l)})):e.resolve(h).then((function(t){u.value=t,s(u)}),(function(t){return i("throw",t,s,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(t,n){function r(){return new e((function(e,r){i(t,n,e,r)}))}return a=a?a.then(r,r):r()}})}function C(t,e,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return{value:void 0,done:!0}}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=_(a,n);if(s){if(s===f)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=d(t,e,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}function _(t,e){var n=e.method,r=t.iterator[n];if(void 0===r)return e.delegate=null,"throw"===n&&t.iterator.return&&(e.method="return",e.arg=void 0,_(t,e),"throw"===e.method)||"return"!==n&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var i=d(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,f;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function M(t){if(t){var e=t[s];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:P}}function P(){return{value:void 0,done:!0}}return m.prototype=g,o(x,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:m,configurable:!0}),m.displayName=u(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,u(t,c,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},A(w.prototype),u(w.prototype,l,(function(){return this})),t.AsyncIterator=w,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new w(h(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},A(x),u(x,c,"Generator"),u(x,s,(function(){return this})),u(x,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},t.values=M,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var s=n.call(o,"catchLoc"),l=n.call(o,"finallyLoc");if(s&&l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;S(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:M(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},t}function o(t,e,n,r,i,o,a){try{var s=t[o](a),l=s.value}catch(t){return void n(t)}s.done?e(l):Promise.resolve(l).then(r,i)}function a(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var a=t.apply(e,n);function s(t){o(a,r,i,s,l,"next",t)}function l(t){o(a,r,i,s,l,"throw",t)}s(void 0)}))}}var s=n(483);function l(t,e){this.capacity=Math.floor(t),this.map=new Map,this.dll=new u,this.graphqlEndpoint=e}l.prototype.equalSize=function(){return this.map.size===this.dll.currCapacity},l.prototype.getIDBCache=a(i().mark((function t(){var e=this;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,s.getItem("LightQL",(function(t,n){if(t)return!1;if(n){e.capacity=n.capacity,e.graphqlEndpoint=n.graphqlEndpoint,e.map=new Map,n.map.forEach((function(t,n){e.map.set(n,t)})),e.dll=new u;for(var r=n.dll.head;r;)e.dll.add(r),r=r.next;return!0}return!1}));case 2:case"end":return t.stop()}}),t)}))),l.prototype.saveIDBCache=a(i().mark((function t(){var e;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e={capacity:this.capacity,map:this.map,dll:this.dll,graphqlEndpoint:this.graphqlEndpoint},t.next=3,s.setItem("LightQL",e,(function(t,e){return!t}));case 3:case"end":return t.stop()}}),t,this)}))),l.prototype.get=function(){var t=a(i().mark((function t(e,n){var r,o=this;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.saveIDBCache();case 2:return t.next=4,this.getIDBCache();case 4:if(!1!==this.equalSize()){t.next=6;break}throw new Error({log:"Hashmap and linked list are out of sync and no longer have the same number of nodes"});case 6:if(this.graphqlEndpoint){t.next=8;break}throw new Error({log:"Graphql Endpoint Argument is invalid or missing"});case 8:if(!(this.capacity<=0)&&this.capacity&&"number"==typeof this.capacity){t.next=10;break}throw new Error({log:"Capacity is invalid"});case 10:if(!this.map.has(e)){t.next=18;break}return r=this.map.get(e),this.dll.remove(r),this.dll.add(r),this.saveIDBCache(),t.abrupt("return",r.value);case 18:return t.abrupt("return",new Promise((function(t,r){fetch(o.graphqlEndpoint,{method:"POST",headers:{"Content-type":"application/json",Accept:"application/json"},body:JSON.stringify({query:e,variables:{variables:n}})}).then((function(t){return t.json()})).then((function(n){var r=n.data;o.put(e,r),o.saveIDBCache(),t(r)})).catch((function(t){return console.log("Error in data fetch: "+t)}))})));case 19:case"end":return t.stop()}}),t,this)})));return function(e,n){return t.apply(this,arguments)}}(),l.prototype.put=function(t,e){if(!1===this.equalSize())return console.log("Check hashmap and linked list");if(this.map.has(t)){var n=this.map.get(t);return this.dll.remove(n),this.map.delete(t),n.value=e,this.dll.add(n),void this.map.set(t,n)}if(this.map.size===this.capacity){var r=this.dll.tail,i=r.query;this.dll.remove(r),this.map.delete(i)}var o=new c(t,e);return this.dll.add(o),void this.map.set(t,o)};var c=function(t,e){this.query=t,this.value=e,this.next=null,this.prev=null},u=function(){this.head=null,this.tail=null,this.currCapacity=0};u.prototype.add=function(t){this.head||this.tail?(t.next=this.head,this.head.prev=t,this.head=t):(this.head=t,this.tail=t),this.currCapacity+=1},u.prototype.remove=function(t){for(var e=this.head;e;){if(e.value===t.value)return this.head.value===e.value?this.tail.value===this.head.value?(this.head=this.tail=null,void this.currCapacity--):(this.head=e.next,this.head.prev=null,void this.currCapacity--):this.tail.value===e.value?(this.tail=e.prev,this.tail.next=null,void this.currCapacity--):(e.prev.next=e.next,e.next.prev=e.prev,void this.currCapacity--);e=e.next}},t.exports={LRUCache:l,DoublyLinkedList:u,DLLNode:c}},764:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,'#about-us-page-layout{display:flex;flex-direction:column;align-items:center}#about-us-title{text-align:center;font-family:"B612",sans-serif;color:#323949;font-size:3rem}#about-us-layout{margin:0;display:inline-grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr;grid-auto-flow:row dense;place-items:center;height:74vh;margin:0 40px 0 40px}@media(max-width: 1350px){#about-us-layout{display:grid;grid-template-columns:1fr 1fr 1fr;height:auto}}@media(max-width: 900px){#about-us-layout{display:grid;grid-template-columns:1fr 1fr;height:auto}}@media(max-width: 600px){#about-us-layout{display:grid;grid-template-columns:1fr;height:auto}}#singleTile{background-color:rgba(50,57,73,.05);height:400px;min-height:389px;width:235px;min-width:235px;margin:20px;border-radius:20px;display:flex;flex-direction:column;box-shadow:0 1px 1px rgba(0,0,0,.075),0 2px 2px rgba(0,0,0,.075),0 4px 4px rgba(0,0,0,.075),0 8px 8px rgba(0,0,0,.075),0 16px 16px rgba(0,0,0,.075)}#singleTile:hover{box-shadow:0 3px 3px rgba(0,0,0,.1),0 6px 6px rgba(0,0,0,.1),0 12px 12px rgba(0,0,0,.1),0 24px 24px rgba(0,0,0,.1),0 48px 48px rgba(0,0,0,.1)}#headshots{width:100%;min-height:260px;border-radius:20px 20px 0 0}#bottom-of-tile{margin:12px;height:100%;display:flex;flex-direction:column;align-items:center;justify-content:space-between}#name{color:#323949;font-family:"B612",sans-serif;margin:0}#contact-links{display:flex;flex-direction:column}.email-button{display:flex;justify-content:center;border:.5px solid #323949;border-radius:8px;width:45%;background-color:#fff;padding:3%;margin:2% 0 2% 0;font-family:"Noto Serif",serif;font-size:.9rem;text-decoration:none;color:#323949}#contact-icons{display:flex;gap:10px}',"",{version:3,sources:["webpack://./src/client/webpage/styling/aboutUs.scss"],names:[],mappings:"AAQA,sBACI,YAAA,CACA,qBAAA,CACA,kBAAA,CAGJ,gBACI,iBAAA,CACA,6BAZS,CAaT,aAdI,CAeJ,cAAA,CAGJ,iBACI,QAAA,CACA,mBAAA,CACA,yCAAA,CACA,wBAAA,CACA,kBAAA,CACA,WAAA,CACA,oBAAA,CAGJ,0BACI,iBACE,YAAA,CACA,iCAAA,CACA,WAAA,CAAA,CAKN,yBACI,iBACE,YAAA,CACA,6BAAA,CACA,WAAA,CAAA,CAIN,yBACI,iBACE,YAAA,CACA,yBAAA,CACA,WAAA,CAAA,CAIN,YACI,mCAAA,CACA,YAAA,CACA,gBAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,kBAAA,CACA,YAAA,CACA,qBAAA,CACA,mJACE,CAQN,kBACI,6IACE,CAQN,WACI,UAAA,CACA,gBAAA,CACA,2BAAA,CAGJ,gBACI,WAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,6BAAA,CAGJ,MACI,aAlGI,CAmGJ,6BAlGS,CAmGT,QAAA,CAGJ,eACI,YAAA,CACA,qBAAA,CAGJ,cACI,YAAA,CACA,sBAAA,CACA,yBAAA,CACA,iBAAA,CACA,SAAA,CACA,qBArHI,CAsHJ,UAAA,CACA,gBAAA,CACA,8BAnHQ,CAoHR,eAAA,CACA,oBAAA,CACA,aAxHI,CA2HR,eACI,YAAA,CACA,QAAA",sourcesContent:["$white: #ffffff;\n$blue: #11b5e4;\n$mauve: #957d95;\n$black: #323949;\n$title-font: 'B612', sans-serif;\n$body-font: 'Noto Serif', serif;\n$code-font: 'B612 Mono', monospace;\n\n#about-us-page-layout {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#about-us-title {\n    text-align: center;\n    font-family: $title-font;\n    color: $black;\n    font-size: 3rem;\n}\n\n#about-us-layout {\n    margin: 0;\n    display: inline-grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n    grid-auto-flow: row dense;\n    place-items: center;\n    height: 74vh;\n    margin: 0 40px 0 40px;\n}\n\n@media (max-width: 1350px) {\n    #about-us-layout {\n      display: grid;  \n      grid-template-columns: 1fr 1fr 1fr;\n      height: auto;\n    }\n    \n}\n\n@media (max-width: 900px) {\n    #about-us-layout {\n      display: grid;  \n      grid-template-columns: 1fr 1fr;\n      height: auto;\n    }\n}\n\n@media (max-width: 600px) {\n    #about-us-layout {\n      display: grid;  \n      grid-template-columns: 1fr;\n      height: auto;\n    }\n}\n\n#singleTile {\n    background-color: rgba($black, 0.05);\n    height: 400px;\n    min-height: 389px; \n    width: 235px;\n    min-width: 235px;\n    margin: 20px;\n    border-radius: 20px;\n    display: flex;\n    flex-direction: column;\n    box-shadow:\n      0 1px 1px hsl(0deg 0% 0% / 0.075),\n      0 2px 2px hsl(0deg 0% 0% / 0.075),\n      0 4px 4px hsl(0deg 0% 0% / 0.075),\n      0 8px 8px hsl(0deg 0% 0% / 0.075),\n      0 16px 16px hsl(0deg 0% 0% / 0.075)\n    ;\n}\n\n#singleTile:hover {\n    box-shadow:\n      0 3px 3px hsl(0deg 0% 0% / 0.1),\n      0 6px 6px hsl(0deg 0% 0% / 0.1),\n      0 12px 12px hsl(0deg 0% 0% / 0.1),\n      0 24px 24px hsl(0deg 0% 0% / 0.1),\n      0 48px 48px hsl(0deg 0% 0% / 0.1)\n    ;\n}\n\n#headshots {\n    width: 100%;\n    min-height: 260px;\n    border-radius: 20px 20px 0 0;\n}\n\n#bottom-of-tile {\n    margin: 12px;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n}\n\n#name {\n    color: $black;\n    font-family: $title-font;\n    margin: 0;\n}\n\n#contact-links {\n    display: flex;\n    flex-direction: column;\n}\n\n.email-button {\n    display: flex;\n    justify-content: center;\n    border: 0.5px solid $black;\n    border-radius: 8px;\n    width: 45%;\n    background-color: $white;\n    padding: 3%;\n    margin: 2% 0 2% 0;\n    font-family: $body-font;\n    font-size: 0.9rem;\n    text-decoration: none;\n    color: $black;\n}\n\n#contact-icons {\n    display: flex;\n    gap: 10px;\n}"],sourceRoot:""}]);const s=a},716:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,'#three-box-layout{height:45vh;display:flex;justify-content:space-evenly;margin:0 10vw 0 10vw}#one-box-layout{height:80%;width:25%;display:flex;flex-direction:column;align-items:center;row-gap:5%;text-align:center;padding-top:30px}#box-title{font-family:"B612",sans-serif}#box-paragraph{font-family:"Noto Serif",serif;margin:0}.text-color{color:#323949}@media screen and (max-width: 420px){#three-box-layout{height:auto;display:flex;flex-direction:column;justify-content:space-between;margin-top:70px;margin-bottom:70px;width:80%}#one-box-layout{display:flex;flex-direction:column;align-items:center;text-align:center;margin:20px 0 0 0;width:100%;background-color:rgba(50,57,73,.05);border-radius:20px}#box-paragraph{width:80%}}',"",{version:3,sources:["webpack://./src/client/webpage/styling/boxes.scss"],names:[],mappings:"AAQA,kBACI,WAAA,CACA,YAAA,CACA,4BAAA,CACA,oBAAA,CAGJ,gBACI,UAAA,CACA,SAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,UAAA,CACA,iBAAA,CACA,gBAAA,CAGJ,WACI,6BAvBS,CA0Bb,eACI,8BA1BQ,CA2BR,QAAA,CAGJ,YACI,aAjCI,CAoCR,qCACI,kBACI,WAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CACA,eAAA,CACA,kBAAA,CACA,SAAA,CAEJ,gBACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,iBAAA,CACA,iBAAA,CACA,UAAA,CACA,mCAAA,CACA,kBAAA,CAEJ,eACI,SAAA,CAAA",sourcesContent:["$white: #ffffff;\n$blue: #11b5e4;\n$mauve: #957d95;\n$black: #323949;\n$title-font: 'B612', sans-serif;\n$body-font: 'Noto Serif', serif;\n$code-font: 'B612 Mono', monospace;\n\n#three-box-layout {\n    height: 45vh;\n    display: flex;\n    justify-content: space-evenly;\n    margin: 0 10vw 0 10vw;\n}\n\n#one-box-layout {\n    height: 80%;\n    width: 25%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    row-gap: 5%;\n    text-align: center;\n    padding-top: 30px;\n}\n\n#box-title {\n    font-family: $title-font;\n}\n\n#box-paragraph {\n    font-family: $body-font;\n    margin: 0;\n}\n\n.text-color {\n    color: $black;\n}\n\n@media screen and (max-width: 420px) {\n    #three-box-layout {\n        height: auto;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n        margin-top: 70px;\n        margin-bottom: 70px;\n        width: 80%;\n    }\n    #one-box-layout {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n        margin: 20px 0 0 0;\n        width: 100%;\n        background-color: rgba($black, 0.05);\n        border-radius: 20px;\n    }\n    #box-paragraph {\n        width: 80%;\n    }\n}"],sourceRoot:""}]);const s=a},170:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,'h1{margin:0}#demo-body{display:grid;grid-template-rows:7% 7% auto;place-items:center;height:fit-content;padding:5% 0 5% 0;width:100%;margin-top:auto;margin-bottom:auto}.title-font{font-family:"B612",sans-serif;font-weight:700;color:#323949}.body-metric-font{font-family:"Noto Serif",serif;color:#323949;font-size:.95rem;display:flex;margin-bottom:0;margin-top:25px;font-weight:400}#demo-btn{display:flex;justify-content:center;align-items:center;border:.5px solid #323949;border-radius:20px;padding:4px 8px 4px 8px;background-color:#fff;font-family:"Noto Serif",serif;font-size:.9rem;box-shadow:2px 0px 5px rgba(50,57,73,.5);text-decoration:none;color:#323949}#demo-btn:hover{box-shadow:5px 3px 5px rgba(50,57,73,.5)}.query-string{font-family:"B612 Mono",monospace;line-height:1.5rem;tab-size:20px}#result-boxes{display:flex;flex-direction:row;justify-content:center;align-items:flex-start;align-self:flex-start;height:80%;width:100%;line-height:2rem}.result-box-titles{position:sticky;top:0;background-color:#323949;width:100%;margin:0;padding:20px 0 20px 0}.data-box{background-color:#323949;color:#fff;height:40vh;width:50%;margin:20px;margin-top:20px;border-radius:8px;padding:20px;padding-top:0;font-family:"B612 Mono",monospace;font-size:.85rem}#query-result::-webkit-scrollbar{height:90%;background-color:rgba(0,0,0,0);width:10px}#query-result::-webkit-scrollbar-track{border-radius:20px}#query-result::-webkit-scrollbar-thumb{background-color:#929db5;border-radius:20px;width:10px}#query-result{overflow-y:overlay;scroll-margin:20px}#metrics-container{display:flex;width:100vw;justify-content:center;align-items:center}.metrics{height:200px;margin:0 20px 10px 20px}#chart-container{color:#11b5e4;border-width:20px}#time-box{width:300px;height:90%;background-color:#edeff3;padding:30px;border-radius:8px}.time-stamp{margin:0;margin-left:10px;font-weight:700}@media screen and (min-width: 900px){#demo-body{display:grid;grid-template-rows:7% 7% auto;place-items:center;height:auto;width:100%;margin-top:auto;margin-bottom:auto}.data-box{width:400px}}@media screen and (min-height: 700px){.data-box{height:250px}}@media screen and (max-width: 420px){#demo-body{height:auto;display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;margin-top:auto;margin-bottom:auto}#result-boxes{display:flex;flex-direction:column;justify-content:center;align-items:flex-start;align-self:center;width:90%;line-height:2rem}.data-box{height:40vh;width:90%;margin:20px;margin-top:20px}#metrics-container{display:flex;flex-direction:column;width:100vw;justify-content:center;align-items:center}}',"",{version:3,sources:["webpack://./src/client/webpage/styling/demo.scss"],names:[],mappings:"AAQA,GACI,QAAA,CAGJ,WACI,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,kBAAA,CACA,iBAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CAGJ,YACI,6BApBS,CAqBT,eAAA,CACA,aAvBI,CA0BR,kBACI,8BAzBQ,CA0BR,aA5BI,CA6BJ,gBAAA,CACA,YAAA,CACA,eAAA,CACA,eAAA,CACA,eAAA,CAGJ,UACI,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,yBAAA,CACA,kBAAA,CACA,uBAAA,CACA,qBA9CI,CA+CJ,8BA1CQ,CA2CR,eAAA,CACA,wCAAA,CACA,oBAAA,CACA,aAhDI,CAmDR,gBACI,wCAAA,CAGJ,cACI,iCArDQ,CAsDR,kBAAA,CACA,aAAA,CAGJ,cACI,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,sBAAA,CACA,qBAAA,CACA,UAAA,CACA,UAAA,CACA,gBAAA,CAGJ,mBACI,eAAA,CACA,KAAA,CACA,wBA3EI,CA4EJ,UAAA,CACA,QAAA,CACA,qBAAA,CAGJ,UACI,wBAlFI,CAmFJ,UAtFI,CAuFJ,WAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CACA,iBAAA,CACA,YAAA,CACA,aAAA,CACA,iCAxFQ,CAyFR,gBAAA,CAGJ,iCACI,UAAA,CACA,8BAAA,CACA,UAAA,CAGJ,uCACI,kBAAA,CAGJ,uCACI,wBAAA,CACA,kBAAA,CACA,UAAA,CAGJ,cACI,kBAAA,CACA,kBAAA,CAGJ,mBACI,YAAA,CACA,WAAA,CACA,sBAAA,CACA,kBAAA,CAGJ,SACG,YAAA,CACA,uBAAA,CAGH,iBACI,aAAA,CACH,iBAAA,CAGD,UACI,WAAA,CACA,UAAA,CACA,wBAAA,CACA,YAAA,CACA,iBAAA,CAGJ,YACI,QAAA,CACA,gBAAA,CACA,eAAA,CAGJ,qCACI,WACI,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CAEJ,UACI,WAAA,CAAA,CAIR,sCACI,UACI,YAAA,CAAA,CAIR,qCACI,WACI,WAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CAEJ,cACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,sBAAA,CACA,iBAAA,CACA,SAAA,CACA,gBAAA,CAEJ,UACI,WAAA,CACA,SAAA,CACA,WAAA,CACA,eAAA,CAEJ,mBACI,YAAA,CACA,qBAAA,CACA,WAAA,CACA,sBAAA,CACA,kBAAA,CAAA",sourcesContent:["$white: #ffffff;\n$blue: #11b5e4;\n$mauve: #957d95;\n$black: #323949;\n$title-font: 'B612', sans-serif;\n$body-font: 'Noto Serif', serif;\n$code-font: 'B612 Mono', monospace;\n\nh1 {\n    margin: 0\n}\n\n#demo-body {\n    display: grid;\n    grid-template-rows: 7% 7% auto;\n    place-items: center;\n    height: fit-content;\n    padding: 5% 0 5% 0;\n    width: 100%;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n\n.title-font {\n    font-family: $title-font;\n    font-weight: 700;\n    color: $black;\n}\n\n.body-metric-font {\n    font-family: $body-font;\n    color: $black;\n    font-size: 0.95rem;\n    display: flex;\n    margin-bottom: 0;\n    margin-top: 25px;\n    font-weight: 400;\n}\n\n#demo-btn {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: 0.5px solid $black;\n    border-radius: 20px;\n    padding: 4px 8px 4px 8px;\n    background-color: $white;\n    font-family: $body-font;\n    font-size: 0.9rem;\n    box-shadow: 2px 0px 5px rgba($black, 0.5);\n    text-decoration: none;\n    color: $black;\n}\n\n#demo-btn:hover {\n    box-shadow: 5px 3px 5px rgba($black, 0.5);\n}\n\n.query-string {\n    font-family: $code-font;\n    line-height: 1.5rem;\n    tab-size: 20px;\n}\n\n#result-boxes {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n    align-self: flex-start;\n    height: 80%;\n    width: 100%;\n    line-height: 2rem;\n}\n\n.result-box-titles {\n    position: sticky;\n    top: 0;\n    background-color: $black;\n    width: 100%;\n    margin: 0;\n    padding: 20px 0 20px 0;\n}\n\n.data-box {\n    background-color: $black;\n    color: $white;\n    height: 40vh;\n    width: 50%;\n    margin: 20px;\n    margin-top: 20px;\n    border-radius: 8px;\n    padding: 20px;\n    padding-top: 0;\n    font-family: $code-font;\n    font-size: 0.85rem;\n}\n\n#query-result::-webkit-scrollbar {\n    height: 90%;\n    background-color: transparent;\n    width: 10px;\n}\n\n#query-result::-webkit-scrollbar-track {\n    border-radius: 20px;\n}\n\n#query-result::-webkit-scrollbar-thumb {\n    background-color: lighten($black, 40);\n    border-radius: 20px;\n    width: 10px;\n  }\n\n#query-result {\n    overflow-y: overlay;\n    scroll-margin: 20px;\n}\n\n#metrics-container {\n    display: flex;\n    width: 100vw;\n    justify-content: center;\n    align-items: center;\n}\n\n.metrics {\n   height: 200px; \n   margin: 0 20px 10px 20px;\n}\n\n#chart-container {\n    color: #11b5e4;\n\tborder-width: 20px,\n}\n\n#time-box {\n    width: 300px;\n    height: 90%;\n    background-color: lighten($black, 70);\n    padding: 30px;\n    border-radius: 8px;\n}\n\n.time-stamp {\n    margin: 0;\n    margin-left: 10px;\n    font-weight: 700;;\n}\n\n@media screen and (min-width: 900px) {\n    #demo-body {\n        display: grid;\n        grid-template-rows: 7% 7% auto;\n        place-items: center;\n        height: auto;\n        width: 100%;\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n    .data-box {\n        width: 400px;\n    }\n}\n\n@media screen and (min-height: 700px) {\n    .data-box {\n        height: 250px;\n    }\n}\n\n@media screen and (max-width: 420px) {\n    #demo-body {\n        height: auto;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n    #result-boxes {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: flex-start;\n        align-self: center;\n        width: 90%;\n        line-height: 2rem;\n    }\n    .data-box {\n        height: 40vh;\n        width: 90%;\n        margin: 20px;\n        margin-top: 20px;\n    }\n    #metrics-container {\n        display: flex;\n        flex-direction: column;\n        width: 100vw;\n        justify-content: center;\n        align-items: center;\n    }\n}"],sourceRoot:""}]);const s=a},391:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,'#descriptions{height:95vh;display:flex;align-items:center;justify-content:center}#info{width:49%;height:75%;display:grid;grid-template-rows:50% 50%;align-items:center}.desc-titles{font-family:"B612",sans-serif;color:#323949;font-size:1.8rem;text-align:center}.paragraph-text{font-family:"Noto Serif",serif;color:#323949;margin:25px 25% 25px 25%;line-height:1.3rem;font-size:.93rem;letter-spacing:.02em;text-align:center}#separating-line{height:90%;width:4px;background-color:rgba(50,57,73,.4);border-radius:100px}#tech-stack{width:49%;height:75%;display:flex;flex-direction:column;align-items:center;justify-content:flex-start}#tech-stack-desc{margin:25px 15% 25px 15%;text-align:center}#icon-section{display:grid;width:70%;height:90%;margin-top:5%;grid-template-columns:50% 50%;grid-template-rows:50% 50%;grid-row-gap:10%;justify-items:center}.logo-section{display:flex;flex-direction:column;align-items:center}.tech-stack-logos{width:auto;height:90px}.icon-text{font-family:"B612",sans-serif;color:#323949}@media screen and (max-width: 420px){#descriptions{height:auto;margin:50px 0 50px 0;display:flex;flex-direction:column}#info{width:80%;display:grid;grid-template-rows:50% 50%;align-items:center}.paragraph-text{margin:15px 0 40px 0}#tech-stack{width:90%;height:100%;padding:30px 0 30px 0;display:flex;flex-direction:column;background-color:rgba(50,57,73,.05);border-radius:20px}#tech-stack-desc{margin:15px 0 40px 0;width:79%}#icon-section{display:grid;width:100%;margin-top:0;grid-template-columns:50% 50%;grid-template-rows:50% 50%;grid-row-gap:5%}}',"",{version:3,sources:["webpack://./src/client/webpage/styling/descriptions.scss"],names:[],mappings:"AAQA,cACI,WAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAGJ,MACI,SAAA,CACA,UAAA,CACA,YAAA,CACA,0BAAA,CACA,kBAAA,CAGJ,aACI,6BApBS,CAqBT,aAtBI,CAuBJ,gBAAA,CACA,iBAAA,CAGJ,gBACI,8BA1BQ,CA2BR,aA7BI,CA8BJ,wBAAA,CACA,kBAAA,CACA,gBAAA,CACA,oBAAA,CACA,iBAAA,CAGJ,iBACI,UAAA,CACA,SAAA,CACA,kCAAA,CACA,mBAAA,CAGJ,YACI,SAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,0BAAA,CAGJ,iBACI,wBAAA,CACA,iBAAA,CAGJ,cACI,YAAA,CACA,SAAA,CACA,UAAA,CACA,aAAA,CACA,6BAAA,CACA,0BAAA,CACA,gBAAA,CACA,oBAAA,CAGJ,cACI,YAAA,CACA,qBAAA,CACA,kBAAA,CAGJ,kBACI,UAAA,CACA,WAAA,CAGJ,WACI,6BAhFS,CAiFT,aAlFI,CAqFR,qCACI,cACI,WAAA,CACA,oBAAA,CACA,YAAA,CACA,qBAAA,CAEJ,MACI,SAAA,CACA,YAAA,CACA,0BAAA,CACA,kBAAA,CAEJ,gBACI,oBAAA,CAEJ,YACI,SAAA,CACA,WAAA,CACA,qBAAA,CACA,YAAA,CACA,qBAAA,CACA,mCAAA,CACA,kBAAA,CAEJ,iBACI,oBAAA,CACA,SAAA,CAEJ,cACI,YAAA,CACA,UAAA,CACA,YAAA,CACA,6BAAA,CACA,0BAAA,CACA,eAAA,CAAA",sourcesContent:["$white: #ffffff;\n$blue: #11b5e4;\n$mauve: #957d95;\n$black: #323949;\n$title-font: 'B612', sans-serif;\n$body-font: 'Noto Serif', serif;\n$code-font: 'B612 Mono', monospace;\n\n#descriptions {\n    height: 95vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#info {\n    width: 49%;\n    height: 75%;\n    display: grid;\n    grid-template-rows: 50% 50%;\n    align-items: center;\n}\n\n.desc-titles {\n    font-family: $title-font;\n    color: $black;\n    font-size: 1.8rem;\n    text-align: center;\n}\n\n.paragraph-text {\n    font-family: $body-font;\n    color: $black;\n    margin: 25px 25% 25px 25%;\n    line-height: 1.3rem;\n    font-size: 0.93rem;\n    letter-spacing: 0.02em;\n    text-align: center;\n}\n\n#separating-line {\n    height: 90%;\n    width: 4px;\n    background-color: rgba($black, 0.4);\n    border-radius: 100px;\n}\n\n#tech-stack {\n    width: 49%;\n    height: 75%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n}\n\n#tech-stack-desc {\n    margin: 25px 15% 25px 15%;\n    text-align: center;\n}\n\n#icon-section {\n    display: grid;\n    width: 70%;\n    height: 90%;\n    margin-top: 5%;\n    grid-template-columns: 50% 50%;\n    grid-template-rows: 50% 50%;\n    grid-row-gap: 10%;\n    justify-items: center;\n}\n\n.logo-section {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.tech-stack-logos {\n    width: auto;\n    height: 90px;\n}\n\n.icon-text {\n    font-family: $title-font;\n    color: $black;\n}\n\n@media screen and (max-width: 420px) {\n    #descriptions {\n        height: auto;\n        margin: 50px 0 50px 0;\n        display: flex;\n        flex-direction: column;\n    }\n    #info {\n        width: 80%;\n        display: grid;\n        grid-template-rows: 50% 50%;\n        align-items: center;\n    }\n    .paragraph-text {\n        margin: 15px 0 40px 0;\n    }\n    #tech-stack {\n        width: 90%;\n        height: 100%;\n        padding: 30px 0 30px 0;\n        display: flex;\n        flex-direction: column;\n        background-color: rgba($black, 0.05);\n        border-radius: 20px;\n    }\n    #tech-stack-desc {\n        margin: 15px 0 40px 0;\n        width: 79%;\n    }\n    #icon-section {\n        display: grid;\n        width: 100%;\n        margin-top: 0;\n        grid-template-columns: 50% 50%;\n        grid-template-rows: 50% 50%;\n        grid-row-gap: 5%;\n    }\n}"],sourceRoot:""}]);const s=a},968:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,'#main{margin-left:8vw;margin-right:18vw;margin-top:3vh;margin-bottom:5vh;display:flex;justify-content:center;font-size:1.1rem;line-height:1.5;letter-spacing:.01em}.image{height:80vh;width:auto}.section-titles{font-family:"B612",sans-serif;color:#323949}.section-paragraphs{font-family:"Noto Serif",serif;color:#323949}.code-box{background-color:#323949;font-family:"B612 Mono",monospace;margin:25px 0 45px 0;font-size:20px;border-radius:15px;display:grid;grid-template-columns:90% 10%;align-items:center}.blue-code-text{color:#67d4f4;font-size:18px;font-family:"B612 Mono",monospace;grid-column:1/2;margin-right:25px;margin-left:25px}.darker-blue-code-text{color:#0fa2cc;font-size:18px;font-family:"B612 Mono",monospace;grid-column:1/2;margin-right:25px;margin-left:25px}.copy-button{grid-column:2/3;display:flex;align-items:center;justify-content:center;border-radius:8px;font-size:15px;height:31px;width:70%;justify-self:center;background-color:#fff;color:#0fa2cc;border:1px solid #11b5e4;cursor:pointer;font-family:"B612 Mono",monospace}.copy-button:hover{background-color:#11b5e4;color:#fff}.divider{border-top:3px solid;color:#d3d3d3;margin-left:0px;margin-right:0px;margin-top:50px;margin-bottom:50px}#big-codestring{line-height:1rem;margin-top:0;margin-bottom:40px}',"",{version:3,sources:["webpack://./src/client/webpage/styling/docs.scss"],names:[],mappings:"AAQA,MACE,eAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,gBAAA,CACA,eAAA,CACA,oBAAA,CAGF,OACI,WAAA,CACA,UAAA,CAGJ,gBACI,6BAtBS,CAuBT,aAxBI,CA2BR,oBACI,8BA1BQ,CA2BR,aA7BI,CAgCR,UACI,wBAjCI,CAkCJ,iCA/BQ,CAgCR,oBAAA,CACA,cAAA,CACA,kBAAA,CACA,YAAA,CACA,6BAAA,CACA,kBAAA,CAGJ,gBACI,aAAA,CACA,cAAA,CACA,iCA3CQ,CA4CR,eAAA,CACA,iBAAA,CACA,gBAAA,CAGJ,uBACI,aAAA,CACA,cAAA,CACA,iCApDQ,CAqDR,eAAA,CACA,iBAAA,CACA,gBAAA,CAGJ,aACI,eAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CACA,cAAA,CACA,WAAA,CACA,SAAA,CACA,mBAAA,CACA,qBA1EI,CA2EJ,aAAA,CACA,wBAAA,CACA,cAAA,CACA,iCAxEQ,CA2EZ,mBACI,wBAjFG,CAkFH,UAAA,CAIJ,SACI,oBAAA,CACA,aAAA,CACA,eAAA,CACA,gBAAA,CACA,eAAA,CACA,kBAAA,CAGJ,gBACI,gBAAA,CACA,YAAA,CACA,kBAAA",sourcesContent:["$white: #ffffff;\n$blue: #11b5e4;\n$mauve: #957d95;\n$black: #323949;\n$title-font: 'B612', sans-serif;\n$body-font: 'Noto Serif', serif;\n$code-font: 'B612 Mono', monospace;\n\n#main {\n  margin-left: 8vw;\n  margin-right: 18vw;\n  margin-top: 3vh;\n  margin-bottom: 5vh;\n  display: flex;\n  justify-content: center;\n  font-size: 1.1rem;\n  line-height: 1.5;\n  letter-spacing: 0.01em;\n}\n\n.image {\n    height: 80vh;\n    width: auto;\n}\n\n.section-titles {\n    font-family: $title-font;\n    color: $black;\n}\n\n.section-paragraphs {\n    font-family: $body-font;\n    color: $black;\n}\n\n.code-box {\n    background-color: $black; \n    font-family: $code-font; \n    margin: 25px 0 45px 0;\n    font-size: 20px; \n    border-radius: 15px;\n    display: grid;\n    grid-template-columns: 90% 10%;\n    align-items: center;\n}\n\n.blue-code-text {\n    color: lighten($blue, 20%);\n    font-size: 18px;\n    font-family: $code-font;\n    grid-column: 1 / 2;\n    margin-right: 25px;\n    margin-left: 25px;\n}\n\n.darker-blue-code-text {\n    color: darken($blue, 5%);\n    font-size: 18px;\n    font-family: $code-font;\n    grid-column: 1 / 2;\n    margin-right: 25px;\n    margin-left: 25px;\n}\n\n.copy-button {\n    grid-column: 2 / 3;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 8px;\n    font-size: 15px;\n    height: 31px;\n    width: 70%;\n    justify-self: center;\n    background-color: $white;\n    color: darken($blue, 5%);\n    border: 1px solid $blue;\n    cursor: pointer;\n    font-family: $code-font;\n}\n\n.copy-button:hover {\n    background-color: $blue;\n    color: #fff;\n}\n\n\n.divider {\n    border-top: 3px solid; \n    color: lightgrey;\n    margin-left: 0px;\n    margin-right: 0px;\n    margin-top: 50px;\n    margin-bottom: 50px;\n}\n\n#big-codestring {\n    line-height: 1rem;\n    margin-top: 0;\n    margin-bottom: 40px;\n}\n"],sourceRoot:""}]);const s=a},740:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,'.text{color:#323949}#hero{height:90vh;display:grid;grid-template-columns:18vw 64vw 18vw}#hero-left{grid-column:1/2;height:90vh;display:flex;align-items:flex-end}#hero-right{height:90vh;display:flex;justify-content:flex-end}#main-info-section{grid-column:2/3;display:flex;flex-direction:column;align-items:center;padding-top:8vh}#logo{height:250px}#welcome-text{font-family:"B612",sans-serif;color:#323949;font-size:5rem;text-align:center;margin:0}#description-text{font-family:"Noto Serif",serif;font-size:1.6rem;width:370px;text-align:center}#clipboard-docs{display:flex;width:100%;justify-content:center;height:6vh;gap:2%}#copy-npm{background-color:rgba(50,57,73,.1);border-radius:15px;padding:10px;display:flex;align-items:center;justify-content:space-around;gap:5%;width:42%;max-width:360px}#link-group{width:100%;display:flex;gap:2%}#dollar-sign{color:rgba(50,57,73,.7)}#npm-link{color:#323949}.npm-text{font-family:"B612 Mono",monospace}#clipboard-icon{cursor:pointer}.button-text{font-family:"B612",sans-serif;margin:0}#blue-docs-link{height:100%;width:20%}#blue-docs-button{background-color:#323949;border:none;border-radius:15px;color:#fff;font-size:1.2rem;width:100%;height:100%;cursor:pointer}#demo-link{font-family:"Noto Serif",serif;color:#323949;font-style:italic;text-decoration:none}#demo-link:visited{color:#323949;text-decoration:none}#demo-link:focus{color:#323949;text-decoration:none}.hero-imgs{height:80%}',"",{version:3,sources:["webpack://./src/client/webpage/styling/hero.scss"],names:[],mappings:"AAQA,MACI,aANI,CASR,MACI,WAAA,CACA,YAAA,CACA,oCAAA,CAGJ,WACI,eAAA,CACA,WAAA,CACA,YAAA,CACA,oBAAA,CAIJ,YACI,WAAA,CACA,YAAA,CACA,wBAAA,CAGJ,mBACI,eAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,eAAA,CAGJ,MACI,YAAA,CAGJ,cACI,6BAzCS,CA0CT,aA3CI,CA4CJ,cAAA,CACA,iBAAA,CACA,QAAA,CAGJ,kBACI,8BAhDQ,CAiDR,gBAAA,CACA,WAAA,CACA,iBAAA,CAGJ,gBACI,YAAA,CACA,UAAA,CACA,sBAAA,CACA,UAAA,CACA,MAAA,CAGJ,UACI,kCAAA,CACA,kBAAA,CACA,YAAA,CACA,YAAA,CACA,kBAAA,CACA,4BAAA,CACA,MAAA,CACA,SAAA,CACA,eAAA,CAGJ,YACI,UAAA,CACA,YAAA,CACA,MAAA,CAGJ,aACI,uBAAA,CAGJ,UACI,aAvFI,CA2FR,UACI,iCAzFQ,CA4FZ,gBACI,cAAA,CAGJ,aACI,6BAnGS,CAoGT,QAAA,CAGJ,gBACI,WAAA,CACA,SAAA,CAGJ,kBACI,wBA9GI,CA+GJ,WAAA,CACA,kBAAA,CACA,UApHI,CAqHJ,gBAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CAGJ,WACI,8BAvHQ,CAwHR,aA1HI,CA2HJ,iBAAA,CACA,oBAAA,CAGJ,mBACI,aAhII,CAiIJ,oBAAA,CAGJ,iBACI,aArII,CAsIJ,oBAAA,CAGJ,WACI,UAAA",sourcesContent:["$white: #ffffff;\n$blue: #11b5e4;\n$mauve: #957d95;\n$black: #323949;\n$title-font: 'B612', sans-serif;\n$body-font: 'Noto Serif', serif;\n$code-font: 'B612 Mono', monospace;\n\n.text {\n    color: $black\n}\n\n#hero {\n    height: 90vh;\n    display: grid;\n    grid-template-columns: 18vw 64vw 18vw;\n}\n\n#hero-left {\n    grid-column: 1 / 2;\n    height: 90vh;\n    display: flex;\n    align-items: flex-end;\n    \n}\n\n#hero-right {\n    height: 90vh;\n    display: flex;\n    justify-content: flex-end;\n}\n\n#main-info-section {\n    grid-column: 2 / 3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-top: 8vh\n}\n\n#logo {\n    height: 250px;\n}\n\n#welcome-text {\n    font-family: $title-font;\n    color: $black;\n    font-size: 5rem;\n    text-align: center;\n    margin: 0;\n}\n\n#description-text {\n    font-family: $body-font;\n    font-size: 1.6rem;\n    width: 370px;\n    text-align: center;\n}\n\n#clipboard-docs {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    height: 6vh;\n    gap: 2%;\n}\n\n#copy-npm {\n    background-color: rgba($black, .1);\n    border-radius: 15px;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    gap: 5%;\n    width: 42%;\n    max-width: 360px;\n}\n\n#link-group {\n    width: 100%;\n    display: flex;\n    gap: 2%;\n}\n\n#dollar-sign {\n    color: rgba($black, .7);\n}\n\n#npm-link {\n    color: $black;\n\n}\n\n.npm-text {\n    font-family: $code-font;\n}\n\n#clipboard-icon {\n    cursor: pointer;\n}\n\n.button-text {\n    font-family: $title-font;\n    margin: 0;\n}\n\n#blue-docs-link {\n    height: 100%;\n    width: 20%;\n}\n\n#blue-docs-button {\n    background-color: $black;\n    border: none;\n    border-radius: 15px;\n    color: $white;\n    font-size: 1.2rem;\n    width: 100%;\n    height: 100%;\n    cursor: pointer;\n}\n\n#demo-link {\n    font-family: $body-font;\n    color: $black;\n    font-style: italic;\n    text-decoration: none;\n}\n\n#demo-link:visited {\n    color: $black;\n    text-decoration: none;\n}\n\n#demo-link:focus {\n    color: $black;\n    text-decoration: none;\n}\n\n.hero-imgs {\n    height: 80%;\n}\n\n#upper-right {\n    \n}"],sourceRoot:""}]);const s=a},43:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,'html{height:100vh;width:100vw;overflow-x:hidden;overflow-y:overlay}body{height:100vh;width:100vw;margin:0;display:flex;flex-direction:column;overflow-x:hidden;overflow-y:overlay}::-webkit-scrollbar{background-color:rgba(0,0,0,0);width:10px;margin:20px}::-webkit-scrollbar-track{border-radius:20px}::-webkit-scrollbar-thumb{background-color:rgba(50,57,73,.35);border-radius:20px;width:10px}#navbar{height:10vh;display:grid;grid-template-columns:30% auto 15%;background-color:rgba(255,255,255,.9);position:sticky;top:0px;z-index:1}#left-nav{grid-column:1/2;padding-left:40px;display:flex;justify-content:space-around;align-items:center}#placeholder{width:40px;height:20px;background-color:#11b5e4}.nav-btns{font-family:"B612",sans-serif;color:#323949;background-color:rgba(0,0,0,0);font-size:1.05rem;border:none;cursor:pointer}#navbar-logo{height:7vh}#right-nav{grid-column:3/4;display:flex;justify-content:flex-end;align-items:center;gap:10px}.top-right-icons{margin:0 2vw 0 0}#npm-logo{width:21px;height:21px}#footer{height:10vh;display:flex;align-items:center;background-color:rgba(50,57,73,.1);padding-left:3vw}#black-logo{height:65%;padding-right:1vw}#footer-text{font-family:"Noto Serif",serif;color:#323949}',"",{version:3,sources:["webpack://./src/client/webpage/styling/sitewide.scss"],names:[],mappings:"AAQA,KACI,YAAA,CACA,WAAA,CACA,iBAAA,CACA,kBAAA,CAGJ,KACI,YAAA,CACA,WAAA,CACA,QAAA,CACA,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,kBAAA,CAGJ,oBACI,8BAAA,CACA,UAAA,CACA,WAAA,CAGJ,0BACI,kBAAA,CAGJ,0BACI,mCAAA,CACA,kBAAA,CACA,UAAA,CAGJ,QACI,WAAA,CACA,YAAA,CACA,kCAAA,CACA,qCAAA,CACA,eAAA,CACA,OAAA,CACA,SAAA,CAGJ,UACI,eAAA,CACA,iBAAA,CACA,YAAA,CACA,4BAAA,CACA,kBAAA,CAGJ,aACI,UAAA,CACA,WAAA,CACA,wBAAA,CAGJ,UACI,6BA9DS,CA+DT,aAhEI,CAiEJ,8BAAA,CACA,iBAAA,CACA,WAAA,CACA,cAAA,CAGJ,aACI,UAAA,CAGJ,WACI,eAAA,CACA,YAAA,CACA,wBAAA,CACA,kBAAA,CACA,QAAA,CAGJ,iBACI,gBAAA,CAGJ,UACI,UAAA,CACA,WAAA,CAGJ,QACI,WAAA,CACA,YAAA,CACA,kBAAA,CACA,kCAAA,CACA,gBAAA,CAGJ,YACI,UAAA,CACA,iBAAA,CAGJ,aACI,8BAxGQ,CAyGR,aA3GI",sourcesContent:["$white: #ffffff;\n$blue: #11b5e4;\n$mauve: #957d95;\n$black: #323949;\n$title-font: 'B612', sans-serif;\n$body-font: 'Noto Serif', serif;\n$code-font: 'B612 Mono', monospace;\n\nhtml {\n    height: 100vh;\n    width: 100vw;\n    overflow-x: hidden;\n    overflow-y: overlay;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    overflow-x: hidden;\n    overflow-y: overlay;\n}\n\n::-webkit-scrollbar {\n    background-color: transparent;\n    width: 10px;\n    margin: 20px;\n}\n\n::-webkit-scrollbar-track {\n    border-radius: 20px;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: rgba($black, .35);\n    border-radius: 20px;\n    width: 10px;\n  }\n\n#navbar {\n    height: 10vh;\n    display: grid;\n    grid-template-columns: 30% auto 15%;\n    background-color: rgba(255, 255, 255, 0.9);\n    position: sticky;\n    top: 0px;\n    z-index: 1;\n}\n\n#left-nav {\n    grid-column: 1 / 2;\n    padding-left: 40px;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n#placeholder {\n    width: 40px;\n    height: 20px;\n    background-color: #11b5e4;\n}\n\n.nav-btns {\n    font-family: $title-font;\n    color: $black;\n    background-color: transparent;\n    font-size: 1.05rem;\n    border: none;\n    cursor: pointer;\n}\n\n#navbar-logo {\n    height: 7vh;\n}\n\n#right-nav {\n    grid-column: 3 / 4;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 10px;\n}\n\n.top-right-icons {\n    margin: 0 2vw 0 0;\n}\n\n#npm-logo {\n    width: 21px;\n    height: 21px;\n}\n\n#footer {\n    height: 10vh;\n    display: flex;\n    align-items: center;\n    background-color: rgba($black, .1);\n    padding-left: 3vw;\n}\n\n#black-logo {\n    height: 65%;\n    padding-right: 1vw;\n}\n\n#footer-text {\n    font-family: $body-font;\n    color: $black;\n}"],sourceRoot:""}]);const s=a},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},231:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"2b2ccd24da1e291a4d7b966cd5aaae43.png"},40:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"196fe2c644b80ada4fd0a665f0206307.png"},946:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"1f2da45411728b5788423767bcf13981.png"},277:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"2ab3fc407e5d2d5c1486b43b1a1aa2df.png"},893:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"fc6b9451733c620ceb86a49ca3953d65.png"},890:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"a39f6a67fbcf0e2868f9603dfbfe500e.png"},579:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"69ccd4eabb21b1ad8eac50dab5903a05.png"},34:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"ade232f25687acaeb8b1530bf46bd3b2.png"},507:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"6feb0ea439b5cb6ee74291fa3e2e45d2.png"},660:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"619ac5ec97620f0e274878d51e4e47c6.png"},7:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"d15af6ac3714df84fd5293a896b05972.png"},859:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"f503499b382dcc2e9c767d0d1965cea7.png"},686:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"af108db04a54d784da9bf75244a6daf5.png"},534:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r=n.p+"09b15ca8b7c8c9c0e312689c43705fc9.png"},483:(t,e,n)=>{t.exports=function t(e,n,r){function i(a,s){if(!n[a]){if(!e[a]){if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};e[a][0].call(c.exports,(function(t){return i(e[a][1][t]||t)}),c,c.exports,t,e,n,r)}return n[a].exports}for(var o=void 0,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(t,e,r){(function(t){"use strict";var n,r,i=t.MutationObserver||t.WebKitMutationObserver;if(i){var o=0,a=new i(u),s=t.document.createTextNode("");a.observe(s,{characterData:!0}),n=function(){s.data=o=++o%2}}else if(t.setImmediate||void 0===t.MessageChannel)n="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(u,0)};else{var l=new t.MessageChannel;l.port1.onmessage=u,n=function(){l.port2.postMessage(0)}}var c=[];function u(){var t,e;r=!0;for(var n=c.length;n;){for(e=c,c=[],t=-1;++t<n;)e[t]();n=c.length}r=!1}e.exports=function(t){1!==c.push(t)||r||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(t,e,n){"use strict";var r=t(1);function i(){}var o={},a=["REJECTED"],s=["FULFILLED"],l=["PENDING"];function c(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,t!==i&&f(this,t)}function u(t,e,n){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function h(t,e,n){r((function(){var r;try{r=e(n)}catch(e){return o.reject(t,e)}r===t?o.reject(t,new TypeError("Cannot resolve promise with itself")):o.resolve(t,r)}))}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function f(t,e){var n=!1;function r(e){n||(n=!0,o.reject(t,e))}function i(e){n||(n=!0,o.resolve(t,e))}var a=p((function(){e(i,r)}));"error"===a.status&&r(a.value)}function p(t,e){var n={};try{n.value=t(e),n.status="success"}catch(t){n.status="error",n.value=t}return n}e.exports=c,c.prototype.catch=function(t){return this.then(null,t)},c.prototype.then=function(t,e){if("function"!=typeof t&&this.state===s||"function"!=typeof e&&this.state===a)return this;var n=new this.constructor(i);return this.state!==l?h(n,this.state===s?t:e,this.outcome):this.queue.push(new u(n,t,e)),n},u.prototype.callFulfilled=function(t){o.resolve(this.promise,t)},u.prototype.otherCallFulfilled=function(t){h(this.promise,this.onFulfilled,t)},u.prototype.callRejected=function(t){o.reject(this.promise,t)},u.prototype.otherCallRejected=function(t){h(this.promise,this.onRejected,t)},o.resolve=function(t,e){var n=p(d,e);if("error"===n.status)return o.reject(t,n.value);var r=n.value;if(r)f(t,r);else{t.state=s,t.outcome=e;for(var i=-1,a=t.queue.length;++i<a;)t.queue[i].callFulfilled(e)}return t},o.reject=function(t,e){t.state=a,t.outcome=e;for(var n=-1,r=t.queue.length;++n<r;)t.queue[n].callRejected(e);return t},c.resolve=function(t){return t instanceof this?t:o.resolve(new this(i),t)},c.reject=function(t){var e=new this(i);return o.reject(e,t)},c.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n=t.length,r=!1;if(!n)return this.resolve([]);for(var a=new Array(n),s=0,l=-1,c=new this(i);++l<n;)u(t[l],l);return c;function u(t,i){e.resolve(t).then((function(t){a[i]=t,++s!==n||r||(r=!0,o.resolve(c,a))}),(function(t){r||(r=!0,o.reject(c,t))}))}},c.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n,r=t.length,a=!1;if(!r)return this.resolve([]);for(var s=-1,l=new this(i);++s<r;)n=t[s],e.resolve(n).then((function(t){a||(a=!0,o.resolve(l,t))}),(function(t){a||(a=!0,o.reject(l,t))}));return l}},{1:1}],3:[function(t,e,r){(function(e){"use strict";"function"!=typeof e.Promise&&(e.Promise=t(2))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(t,e,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var i=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(t){return}}();function o(t,e){t=t||[],e=e||{};try{return new Blob(t,e)}catch(i){if("TypeError"!==i.name)throw i;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<t.length;r+=1)n.append(t[r]);return n.getBlob(e.type)}}"undefined"==typeof Promise&&t(3);var a=Promise;function s(t,e){e&&t.then((function(t){e(null,t)}),(function(t){e(t)}))}function l(t,e,n){"function"==typeof e&&t.then(e),"function"==typeof n&&t.catch(n)}function c(t){return"string"!=typeof t&&(console.warn(t+" used as a key, but it is not a string."),t=String(t)),t}function u(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var h="local-forage-detect-blob-support",d=void 0,f={},p=Object.prototype.toString,m="readonly",g="readwrite";function y(t){for(var e=t.length,n=new ArrayBuffer(e),r=new Uint8Array(n),i=0;i<e;i++)r[i]=t.charCodeAt(i);return n}function v(t){return"boolean"==typeof d?a.resolve(d):function(t){return new a((function(e){var n=t.transaction(h,g),r=o([""]);n.objectStore(h).put(r,"key"),n.onabort=function(t){t.preventDefault(),t.stopPropagation(),e(!1)},n.oncomplete=function(){var t=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);e(n||!t||parseInt(t[1],10)>=43)}})).catch((function(){return!1}))}(t).then((function(t){return d=t}))}function b(t){var e=f[t.name],n={};n.promise=new a((function(t,e){n.resolve=t,n.reject=e})),e.deferredOperations.push(n),e.dbReady?e.dbReady=e.dbReady.then((function(){return n.promise})):e.dbReady=n.promise}function x(t){var e=f[t.name].deferredOperations.pop();if(e)return e.resolve(),e.promise}function A(t,e){var n=f[t.name].deferredOperations.pop();if(n)return n.reject(e),n.promise}function w(t,e){return new a((function(n,r){if(f[t.name]=f[t.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},t.db){if(!e)return n(t.db);b(t),t.db.close()}var o=[t.name];e&&o.push(t.version);var a=i.open.apply(i,o);e&&(a.onupgradeneeded=function(e){var n=a.result;try{n.createObjectStore(t.storeName),e.oldVersion<=1&&n.createObjectStore(h)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+t.name+'" has been upgraded from version '+e.oldVersion+" to version "+e.newVersion+', but the storage "'+t.storeName+'" already exists.')}}),a.onerror=function(t){t.preventDefault(),r(a.error)},a.onsuccess=function(){var e=a.result;e.onversionchange=function(t){t.target.close()},n(e),x(t)}}))}function C(t){return w(t,!1)}function _(t){return w(t,!0)}function k(t,e){if(!t.db)return!0;var n=!t.db.objectStoreNames.contains(t.storeName),r=t.version<t.db.version,i=t.version>t.db.version;if(r&&(t.version!==e&&console.warn('The database "'+t.name+"\" can't be downgraded from version "+t.db.version+" to version "+t.version+"."),t.version=t.db.version),i||n){if(n){var o=t.db.version+1;o>t.version&&(t.version=o)}return!0}return!1}function S(t){return o([y(atob(t.data))],{type:t.type})}function E(t){return t&&t.__local_forage_encoded_blob}function M(t){var e=this,n=e._initReady().then((function(){var t=f[e._dbInfo.name];if(t&&t.dbReady)return t.dbReady}));return l(n,t,t),n}function P(t,e,n,r){void 0===r&&(r=1);try{var i=t.db.transaction(t.storeName,e);n(null,i)}catch(i){if(r>0&&(!t.db||"InvalidStateError"===i.name||"NotFoundError"===i.name))return a.resolve().then((function(){if(!t.db||"NotFoundError"===i.name&&!t.db.objectStoreNames.contains(t.storeName)&&t.version<=t.db.version)return t.db&&(t.version=t.db.version+1),_(t)})).then((function(){return function(t){b(t);for(var e=f[t.name],n=e.forages,r=0;r<n.length;r++){var i=n[r];i._dbInfo.db&&(i._dbInfo.db.close(),i._dbInfo.db=null)}return t.db=null,C(t).then((function(e){return t.db=e,k(t)?_(t):e})).then((function(r){t.db=e.db=r;for(var i=0;i<n.length;i++)n[i]._dbInfo.db=r})).catch((function(e){throw A(t,e),e}))}(t).then((function(){P(t,e,n,r-1)}))})).catch(n);n(i)}}var T={_driver:"asyncStorage",_initStorage:function(t){var e=this,n={db:null};if(t)for(var r in t)n[r]=t[r];var i=f[n.name];i||(i={forages:[],db:null,dbReady:null,deferredOperations:[]},f[n.name]=i),i.forages.push(e),e._initReady||(e._initReady=e.ready,e.ready=M);var o=[];function s(){return a.resolve()}for(var l=0;l<i.forages.length;l++){var c=i.forages[l];c!==e&&o.push(c._initReady().catch(s))}var u=i.forages.slice(0);return a.all(o).then((function(){return n.db=i.db,C(n)})).then((function(t){return n.db=t,k(n,e._defaultConfig.version)?_(n):t})).then((function(t){n.db=i.db=t,e._dbInfo=n;for(var r=0;r<u.length;r++){var o=u[r];o!==e&&(o._dbInfo.db=n.db,o._dbInfo.version=n.version)}}))},_support:function(){try{if(!i||!i.open)return!1;var t="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),e="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!t||e)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(t){return!1}}(),iterate:function(t,e){var n=this,r=new a((function(e,r){n.ready().then((function(){P(n._dbInfo,m,(function(i,o){if(i)return r(i);try{var a=o.objectStore(n._dbInfo.storeName).openCursor(),s=1;a.onsuccess=function(){var n=a.result;if(n){var r=n.value;E(r)&&(r=S(r));var i=t(r,n.key,s++);void 0!==i?e(i):n.continue()}else e()},a.onerror=function(){r(a.error)}}catch(t){r(t)}}))})).catch(r)}));return s(r,e),r},getItem:function(t,e){var n=this;t=c(t);var r=new a((function(e,r){n.ready().then((function(){P(n._dbInfo,m,(function(i,o){if(i)return r(i);try{var a=o.objectStore(n._dbInfo.storeName).get(t);a.onsuccess=function(){var t=a.result;void 0===t&&(t=null),E(t)&&(t=S(t)),e(t)},a.onerror=function(){r(a.error)}}catch(t){r(t)}}))})).catch(r)}));return s(r,e),r},setItem:function(t,e,n){var r=this;t=c(t);var i=new a((function(n,i){var o;r.ready().then((function(){return o=r._dbInfo,"[object Blob]"===p.call(e)?v(o.db).then((function(t){return t?e:(n=e,new a((function(t,e){var r=new FileReader;r.onerror=e,r.onloadend=function(e){var r=btoa(e.target.result||"");t({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)})));var n})):e})).then((function(e){P(r._dbInfo,g,(function(o,a){if(o)return i(o);try{var s=a.objectStore(r._dbInfo.storeName);null===e&&(e=void 0);var l=s.put(e,t);a.oncomplete=function(){void 0===e&&(e=null),n(e)},a.onabort=a.onerror=function(){var t=l.error?l.error:l.transaction.error;i(t)}}catch(t){i(t)}}))})).catch(i)}));return s(i,n),i},removeItem:function(t,e){var n=this;t=c(t);var r=new a((function(e,r){n.ready().then((function(){P(n._dbInfo,g,(function(i,o){if(i)return r(i);try{var a=o.objectStore(n._dbInfo.storeName).delete(t);o.oncomplete=function(){e()},o.onerror=function(){r(a.error)},o.onabort=function(){var t=a.error?a.error:a.transaction.error;r(t)}}catch(t){r(t)}}))})).catch(r)}));return s(r,e),r},clear:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){P(e._dbInfo,g,(function(r,i){if(r)return n(r);try{var o=i.objectStore(e._dbInfo.storeName).clear();i.oncomplete=function(){t()},i.onabort=i.onerror=function(){var t=o.error?o.error:o.transaction.error;n(t)}}catch(t){n(t)}}))})).catch(n)}));return s(n,t),n},length:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){P(e._dbInfo,m,(function(r,i){if(r)return n(r);try{var o=i.objectStore(e._dbInfo.storeName).count();o.onsuccess=function(){t(o.result)},o.onerror=function(){n(o.error)}}catch(t){n(t)}}))})).catch(n)}));return s(n,t),n},key:function(t,e){var n=this,r=new a((function(e,r){t<0?e(null):n.ready().then((function(){P(n._dbInfo,m,(function(i,o){if(i)return r(i);try{var a=o.objectStore(n._dbInfo.storeName),s=!1,l=a.openKeyCursor();l.onsuccess=function(){var n=l.result;n?0===t||s?e(n.key):(s=!0,n.advance(t)):e(null)},l.onerror=function(){r(l.error)}}catch(t){r(t)}}))})).catch(r)}));return s(r,e),r},keys:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){P(e._dbInfo,m,(function(r,i){if(r)return n(r);try{var o=i.objectStore(e._dbInfo.storeName).openKeyCursor(),a=[];o.onsuccess=function(){var e=o.result;e?(a.push(e.key),e.continue()):t(a)},o.onerror=function(){n(o.error)}}catch(t){n(t)}}))})).catch(n)}));return s(n,t),n},dropInstance:function(t,e){e=u.apply(this,arguments);var n=this.config();(t="function"!=typeof t&&t||{}).name||(t.name=t.name||n.name,t.storeName=t.storeName||n.storeName);var r,o=this;if(t.name){var l=t.name===n.name&&o._dbInfo.db?a.resolve(o._dbInfo.db):C(t).then((function(e){var n=f[t.name],r=n.forages;n.db=e;for(var i=0;i<r.length;i++)r[i]._dbInfo.db=e;return e}));r=t.storeName?l.then((function(e){if(e.objectStoreNames.contains(t.storeName)){var n=e.version+1;b(t);var r=f[t.name],o=r.forages;e.close();for(var s=0;s<o.length;s++){var l=o[s];l._dbInfo.db=null,l._dbInfo.version=n}var c=new a((function(e,r){var o=i.open(t.name,n);o.onerror=function(t){o.result.close(),r(t)},o.onupgradeneeded=function(){o.result.deleteObjectStore(t.storeName)},o.onsuccess=function(){var t=o.result;t.close(),e(t)}}));return c.then((function(t){r.db=t;for(var e=0;e<o.length;e++){var n=o[e];n._dbInfo.db=t,x(n._dbInfo)}})).catch((function(e){throw(A(t,e)||a.resolve()).catch((function(){})),e}))}})):l.then((function(e){b(t);var n=f[t.name],r=n.forages;e.close();for(var o=0;o<r.length;o++)r[o]._dbInfo.db=null;var s=new a((function(e,n){var r=i.deleteDatabase(t.name);r.onerror=function(){var t=r.result;t&&t.close(),n(r.error)},r.onblocked=function(){console.warn('dropInstance blocked for database "'+t.name+'" until all open connections are closed')},r.onsuccess=function(){var t=r.result;t&&t.close(),e(t)}}));return s.then((function(t){n.db=t;for(var e=0;e<r.length;e++)x(r[e]._dbInfo)})).catch((function(e){throw(A(t,e)||a.resolve()).catch((function(){})),e}))}))}else r=a.reject("Invalid arguments");return s(r,e),r}};var L="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",I=/^~~local_forage_type~([^~]+)~/,D="__lfsc__:",R=D.length,O="arbf",B="blob",N="si08",z="ui08",F="uic8",j="si16",V="si32",U="ur16",W="ui32",$="fl32",H="fl64",Y=R+O.length,q=Object.prototype.toString;function G(t){var e,n,r,i,o,a=.75*t.length,s=t.length,l=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var c=new ArrayBuffer(a),u=new Uint8Array(c);for(e=0;e<s;e+=4)n=L.indexOf(t[e]),r=L.indexOf(t[e+1]),i=L.indexOf(t[e+2]),o=L.indexOf(t[e+3]),u[l++]=n<<2|r>>4,u[l++]=(15&r)<<4|i>>2,u[l++]=(3&i)<<6|63&o;return c}function Q(t){var e,n=new Uint8Array(t),r="";for(e=0;e<n.length;e+=3)r+=L[n[e]>>2],r+=L[(3&n[e])<<4|n[e+1]>>4],r+=L[(15&n[e+1])<<2|n[e+2]>>6],r+=L[63&n[e+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var J={serialize:function(t,e){var n="";if(t&&(n=q.call(t)),t&&("[object ArrayBuffer]"===n||t.buffer&&"[object ArrayBuffer]"===q.call(t.buffer))){var r,i=D;t instanceof ArrayBuffer?(r=t,i+=O):(r=t.buffer,"[object Int8Array]"===n?i+=N:"[object Uint8Array]"===n?i+=z:"[object Uint8ClampedArray]"===n?i+=F:"[object Int16Array]"===n?i+=j:"[object Uint16Array]"===n?i+=U:"[object Int32Array]"===n?i+=V:"[object Uint32Array]"===n?i+=W:"[object Float32Array]"===n?i+=$:"[object Float64Array]"===n?i+=H:e(new Error("Failed to get type for BinaryArray"))),e(i+Q(r))}else if("[object Blob]"===n){var o=new FileReader;o.onload=function(){var n="~~local_forage_type~"+t.type+"~"+Q(this.result);e("__lfsc__:blob"+n)},o.readAsArrayBuffer(t)}else try{e(JSON.stringify(t))}catch(n){console.error("Couldn't convert value into a JSON string: ",t),e(null,n)}},deserialize:function(t){if(t.substring(0,R)!==D)return JSON.parse(t);var e,n=t.substring(Y),r=t.substring(R,Y);if(r===B&&I.test(n)){var i=n.match(I);e=i[1],n=n.substring(i[0].length)}var a=G(n);switch(r){case O:return a;case B:return o([a],{type:e});case N:return new Int8Array(a);case z:return new Uint8Array(a);case F:return new Uint8ClampedArray(a);case j:return new Int16Array(a);case U:return new Uint16Array(a);case V:return new Int32Array(a);case W:return new Uint32Array(a);case $:return new Float32Array(a);case H:return new Float64Array(a);default:throw new Error("Unkown type: "+r)}},stringToBuffer:G,bufferToString:Q};function X(t,e,n,r){t.executeSql("CREATE TABLE IF NOT EXISTS "+e.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function K(t,e,n,r,i,o){t.executeSql(n,r,i,(function(t,a){a.code===a.SYNTAX_ERR?t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[e.storeName],(function(t,s){s.rows.length?o(t,a):X(t,e,(function(){t.executeSql(n,r,i,o)}),o)}),o):o(t,a)}),o)}function Z(t,e,n,r){var i=this;t=c(t);var o=new a((function(o,a){i.ready().then((function(){void 0===e&&(e=null);var s=e,l=i._dbInfo;l.serializer.serialize(e,(function(e,c){c?a(c):l.db.transaction((function(n){K(n,l,"INSERT OR REPLACE INTO "+l.storeName+" (key, value) VALUES (?, ?)",[t,e],(function(){o(s)}),(function(t,e){a(e)}))}),(function(e){if(e.code===e.QUOTA_ERR){if(r>0)return void o(Z.apply(i,[t,s,n,r-1]));a(e)}}))}))})).catch(a)}));return s(o,n),o}function tt(t){return new a((function(e,n){t.transaction((function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,r){for(var i=[],o=0;o<r.rows.length;o++)i.push(r.rows.item(o).name);e({db:t,storeNames:i})}),(function(t,e){n(e)}))}),(function(t){n(t)}))}))}var et={_driver:"webSQLStorage",_initStorage:function(t){var e=this,n={db:null};if(t)for(var r in t)n[r]="string"!=typeof t[r]?t[r].toString():t[r];var i=new a((function(t,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(t){return r(t)}n.db.transaction((function(i){X(i,n,(function(){e._dbInfo=n,t()}),(function(t,e){r(e)}))}),r)}));return n.serializer=J,i},_support:"function"==typeof openDatabase,iterate:function(t,e){var n=this,r=new a((function(e,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){K(n,i,"SELECT * FROM "+i.storeName,[],(function(n,r){for(var o=r.rows,a=o.length,s=0;s<a;s++){var l=o.item(s),c=l.value;if(c&&(c=i.serializer.deserialize(c)),void 0!==(c=t(c,l.key,s+1)))return void e(c)}e()}),(function(t,e){r(e)}))}))})).catch(r)}));return s(r,e),r},getItem:function(t,e){var n=this;t=c(t);var r=new a((function(e,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){K(n,i,"SELECT * FROM "+i.storeName+" WHERE key = ? LIMIT 1",[t],(function(t,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=i.serializer.deserialize(r)),e(r)}),(function(t,e){r(e)}))}))})).catch(r)}));return s(r,e),r},setItem:function(t,e,n){return Z.apply(this,[t,e,n,1])},removeItem:function(t,e){var n=this;t=c(t);var r=new a((function(e,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){K(n,i,"DELETE FROM "+i.storeName+" WHERE key = ?",[t],(function(){e()}),(function(t,e){r(e)}))}))})).catch(r)}));return s(r,e),r},clear:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var r=e._dbInfo;r.db.transaction((function(e){K(e,r,"DELETE FROM "+r.storeName,[],(function(){t()}),(function(t,e){n(e)}))}))})).catch(n)}));return s(n,t),n},length:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var r=e._dbInfo;r.db.transaction((function(e){K(e,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],(function(e,n){var r=n.rows.item(0).c;t(r)}),(function(t,e){n(e)}))}))})).catch(n)}));return s(n,t),n},key:function(t,e){var n=this,r=new a((function(e,r){n.ready().then((function(){var i=n._dbInfo;i.db.transaction((function(n){K(n,i,"SELECT key FROM "+i.storeName+" WHERE id = ? LIMIT 1",[t+1],(function(t,n){var r=n.rows.length?n.rows.item(0).key:null;e(r)}),(function(t,e){r(e)}))}))})).catch(r)}));return s(r,e),r},keys:function(t){var e=this,n=new a((function(t,n){e.ready().then((function(){var r=e._dbInfo;r.db.transaction((function(e){K(e,r,"SELECT key FROM "+r.storeName,[],(function(e,n){for(var r=[],i=0;i<n.rows.length;i++)r.push(n.rows.item(i).key);t(r)}),(function(t,e){n(e)}))}))})).catch(n)}));return s(n,t),n},dropInstance:function(t,e){e=u.apply(this,arguments);var n=this.config();(t="function"!=typeof t&&t||{}).name||(t.name=t.name||n.name,t.storeName=t.storeName||n.storeName);var r,i=this;return s(r=t.name?new a((function(e){var r;r=t.name===n.name?i._dbInfo.db:openDatabase(t.name,"","",0),t.storeName?e({db:r,storeNames:[t.storeName]}):e(tt(r))})).then((function(t){return new a((function(e,n){t.db.transaction((function(r){function i(t){return new a((function(e,n){r.executeSql("DROP TABLE IF EXISTS "+t,[],(function(){e()}),(function(t,e){n(e)}))}))}for(var o=[],s=0,l=t.storeNames.length;s<l;s++)o.push(i(t.storeNames[s]));a.all(o).then((function(){e()})).catch((function(t){n(t)}))}),(function(t){n(t)}))}))})):a.reject("Invalid arguments"),e),r}};function nt(t,e){var n=t.name+"/";return t.storeName!==e.storeName&&(n+=t.storeName+"/"),n}function rt(){return!function(){var t="_localforage_support_test";try{return localStorage.setItem(t,!0),localStorage.removeItem(t),!1}catch(t){return!0}}()||localStorage.length>0}var it={_driver:"localStorageWrapper",_initStorage:function(t){var e={};if(t)for(var n in t)e[n]=t[n];return e.keyPrefix=nt(t,this._defaultConfig),rt()?(this._dbInfo=e,e.serializer=J,a.resolve()):a.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(t){return!1}}(),iterate:function(t,e){var n=this,r=n.ready().then((function(){for(var e=n._dbInfo,r=e.keyPrefix,i=r.length,o=localStorage.length,a=1,s=0;s<o;s++){var l=localStorage.key(s);if(0===l.indexOf(r)){var c=localStorage.getItem(l);if(c&&(c=e.serializer.deserialize(c)),void 0!==(c=t(c,l.substring(i),a++)))return c}}}));return s(r,e),r},getItem:function(t,e){var n=this;t=c(t);var r=n.ready().then((function(){var e=n._dbInfo,r=localStorage.getItem(e.keyPrefix+t);return r&&(r=e.serializer.deserialize(r)),r}));return s(r,e),r},setItem:function(t,e,n){var r=this;t=c(t);var i=r.ready().then((function(){void 0===e&&(e=null);var n=e;return new a((function(i,o){var a=r._dbInfo;a.serializer.serialize(e,(function(e,r){if(r)o(r);else try{localStorage.setItem(a.keyPrefix+t,e),i(n)}catch(t){"QuotaExceededError"!==t.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==t.name||o(t),o(t)}}))}))}));return s(i,n),i},removeItem:function(t,e){var n=this;t=c(t);var r=n.ready().then((function(){var e=n._dbInfo;localStorage.removeItem(e.keyPrefix+t)}));return s(r,e),r},clear:function(t){var e=this,n=e.ready().then((function(){for(var t=e._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(t)&&localStorage.removeItem(r)}}));return s(n,t),n},length:function(t){var e=this.keys().then((function(t){return t.length}));return s(e,t),e},key:function(t,e){var n=this,r=n.ready().then((function(){var e,r=n._dbInfo;try{e=localStorage.key(t)}catch(t){e=null}return e&&(e=e.substring(r.keyPrefix.length)),e}));return s(r,e),r},keys:function(t){var e=this,n=e.ready().then((function(){for(var t=e._dbInfo,n=localStorage.length,r=[],i=0;i<n;i++){var o=localStorage.key(i);0===o.indexOf(t.keyPrefix)&&r.push(o.substring(t.keyPrefix.length))}return r}));return s(n,t),n},dropInstance:function(t,e){if(e=u.apply(this,arguments),!(t="function"!=typeof t&&t||{}).name){var n=this.config();t.name=t.name||n.name,t.storeName=t.storeName||n.storeName}var r,i=this;return r=t.name?new a((function(e){t.storeName?e(nt(t,i._defaultConfig)):e(t.name+"/")})).then((function(t){for(var e=localStorage.length-1;e>=0;e--){var n=localStorage.key(e);0===n.indexOf(t)&&localStorage.removeItem(n)}})):a.reject("Invalid arguments"),s(r,e),r}},ot=function(t,e){for(var n=t.length,r=0;r<n;){if((i=t[r])===(o=e)||"number"==typeof i&&"number"==typeof o&&isNaN(i)&&isNaN(o))return!0;r++}var i,o;return!1},at=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},st={},lt={},ct={INDEXEDDB:T,WEBSQL:et,LOCALSTORAGE:it},ut=[ct.INDEXEDDB._driver,ct.WEBSQL._driver,ct.LOCALSTORAGE._driver],ht=["dropInstance"],dt=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(ht),ft={description:"",driver:ut.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function pt(t,e){t[e]=function(){var n=arguments;return t.ready().then((function(){return t[e].apply(t,n)}))}}function mt(){for(var t=1;t<arguments.length;t++){var e=arguments[t];if(e)for(var n in e)e.hasOwnProperty(n)&&(at(e[n])?arguments[0][n]=e[n].slice():arguments[0][n]=e[n])}return arguments[0]}var gt=function(){function t(e){for(var n in function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),ct)if(ct.hasOwnProperty(n)){var r=ct[n],i=r._driver;this[n]=i,st[i]||this.defineDriver(r)}this._defaultConfig=mt({},ft),this._config=mt({},this._defaultConfig,e),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return t.prototype.config=function(t){if("object"===(void 0===t?"undefined":r(t))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var e in t){if("storeName"===e&&(t[e]=t[e].replace(/\W/g,"_")),"version"===e&&"number"!=typeof t[e])return new Error("Database version must be a number.");this._config[e]=t[e]}return!("driver"in t)||!t.driver||this.setDriver(this._config.driver)}return"string"==typeof t?this._config[t]:this._config},t.prototype.defineDriver=function(t,e,n){var r=new a((function(e,n){try{var r=t._driver,i=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!t._driver)return void n(i);for(var o=dt.concat("_initStorage"),l=0,c=o.length;l<c;l++){var u=o[l];if((!ot(ht,u)||t[u])&&"function"!=typeof t[u])return void n(i)}!function(){for(var e=function(t){return function(){var e=new Error("Method "+t+" is not implemented by the current driver"),n=a.reject(e);return s(n,arguments[arguments.length-1]),n}},n=0,r=ht.length;n<r;n++){var i=ht[n];t[i]||(t[i]=e(i))}}();var h=function(n){st[r]&&console.info("Redefining LocalForage driver: "+r),st[r]=t,lt[r]=n,e()};"_support"in t?t._support&&"function"==typeof t._support?t._support().then(h,n):h(!!t._support):h(!0)}catch(t){n(t)}}));return l(r,e,n),r},t.prototype.driver=function(){return this._driver||null},t.prototype.getDriver=function(t,e,n){var r=st[t]?a.resolve(st[t]):a.reject(new Error("Driver not found."));return l(r,e,n),r},t.prototype.getSerializer=function(t){var e=a.resolve(J);return l(e,t),e},t.prototype.ready=function(t){var e=this,n=e._driverSet.then((function(){return null===e._ready&&(e._ready=e._initDriver()),e._ready}));return l(n,t,t),n},t.prototype.setDriver=function(t,e,n){var r=this;at(t)||(t=[t]);var i=this._getSupportedDrivers(t);function o(){r._config.driver=r.driver()}function s(t){return r._extend(t),o(),r._ready=r._initStorage(r._config),r._ready}var c=null!==this._driverSet?this._driverSet.catch((function(){return a.resolve()})):a.resolve();return this._driverSet=c.then((function(){var t=i[0];return r._dbInfo=null,r._ready=null,r.getDriver(t).then((function(t){r._driver=t._driver,o(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(t){return function(){var e=0;return function n(){for(;e<t.length;){var i=t[e];return e++,r._dbInfo=null,r._ready=null,r.getDriver(i).then(s).catch(n)}o();var l=new Error("No available storage method found.");return r._driverSet=a.reject(l),r._driverSet}()}}(i)}))})).catch((function(){o();var t=new Error("No available storage method found.");return r._driverSet=a.reject(t),r._driverSet})),l(this._driverSet,e,n),this._driverSet},t.prototype.supports=function(t){return!!lt[t]},t.prototype._extend=function(t){mt(this,t)},t.prototype._getSupportedDrivers=function(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];this.supports(i)&&e.push(i)}return e},t.prototype._wrapLibraryMethodsWithReady=function(){for(var t=0,e=dt.length;t<e;t++)pt(this,dt[t])},t.prototype.createInstance=function(e){return new t(e)},t}(),yt=new gt;e.exports=yt},{3:3}]},{},[4])(4)},703:(t,e,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,t.exports=function(){function t(t,e,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function e(){return t}t.isRequired=t;var n={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},697:(t,e,n)=>{t.exports=n(703)()},414:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(t,e,n)=>{"use strict";var r=n(294),i=n(840);function o(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,s={};function l(t,e){c(t,e),c(t+"Capture",e)}function c(t,e){for(s[t]=e,t=0;t<e.length;t++)a.add(e[t])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),h=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f={},p={};function m(t,e,n,r,i,o,a){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){g[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];g[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){g[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){g[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){g[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){g[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){g[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){g[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){g[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(t){return t[1].toUpperCase()}function b(t,e,n,r){var i=g.hasOwnProperty(e)?g[e]:null;(null!==i?0!==i.type:r||!(2<e.length)||"o"!==e[0]&&"O"!==e[0]||"n"!==e[1]&&"N"!==e[1])&&(function(t,e,n,r){if(null==e||function(t,e,n,r){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,i,r)&&(n=null),r||null===i?function(t){return!!h.call(p,t)||!h.call(f,t)&&(d.test(t)?p[t]=!0:(f[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):i.mustUseProperty?t[i.propertyName]=null===n?3!==i.type&&"":n:(e=i.attributeName,r=i.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(y,v);g[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(y,v);g[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(y,v);g[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){g[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){g[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),w=Symbol.for("react.portal"),C=Symbol.for("react.fragment"),_=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),E=Symbol.for("react.context"),M=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),L=Symbol.for("react.memo"),I=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function O(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=R&&t[R]||t["@@iterator"])?t:null}var B,N=Object.assign;function z(t){if(void 0===B)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);B=e&&e[1]||""}return"\n"+B+t}var F=!1;function j(t,e){if(!t||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var r=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){r=t}t.call(e.prototype)}else{try{throw Error()}catch(t){r=t}t()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s]){var l="\n"+i[a].replace(" at new "," at ");return t.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",t.displayName)),l}}while(1<=a&&0<=s);break}}}finally{F=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?z(t):""}function V(t){switch(t.tag){case 5:return z(t.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return j(t.type,!1);case 11:return j(t.type.render,!1);case 1:return j(t.type,!0);default:return""}}function U(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case C:return"Fragment";case w:return"Portal";case k:return"Profiler";case _:return"StrictMode";case P:return"Suspense";case T:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case E:return(t.displayName||"Context")+".Consumer";case S:return(t._context.displayName||"Context")+".Provider";case M:var e=t.render;return(t=t.displayName)||(t=""!==(t=e.displayName||e.name||"")?"ForwardRef("+t+")":"ForwardRef"),t;case L:return null!==(e=t.displayName||null)?e:U(t.type)||"Memo";case I:e=t._payload,t=t._init;try{return U(t(e))}catch(t){}}return null}function W(t){var e=t.type;switch(t.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return t=(t=e.render).displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(e);case 8:return e===_?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e}return null}function $(t){switch(typeof t){case"boolean":case"number":case"string":case"undefined":case"object":return t;default:return""}}function H(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function Y(t){t._valueTracker||(t._valueTracker=function(t){var e=H(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return i.call(this)},set:function(t){r=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(t){r=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function q(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=H(t)?t.checked?"true":"false":t.value),(t=r)!==n&&(e.setValue(t),!0)}function G(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function Q(t,e){var n=e.checked;return N({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function J(t,e){var n=null==e.defaultValue?"":e.defaultValue,r=null!=e.checked?e.checked:e.defaultChecked;n=$(null!=e.value?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function X(t,e){null!=(e=e.checked)&&b(t,"checked",e,!1)}function K(t,e){X(t,e);var n=$(e.value),r=e.type;if(null!=n)"number"===r?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===r||"reset"===r)return void t.removeAttribute("value");e.hasOwnProperty("value")?tt(t,e.type,n):e.hasOwnProperty("defaultValue")&&tt(t,e.type,$(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function Z(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!("submit"!==r&&"reset"!==r||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function tt(t,e,n){"number"===e&&G(t.ownerDocument)===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}var et=Array.isArray;function nt(t,e,n,r){if(t=t.options,e){e={};for(var i=0;i<n.length;i++)e["$"+n[i]]=!0;for(n=0;n<t.length;n++)i=e.hasOwnProperty("$"+t[n].value),t[n].selected!==i&&(t[n].selected=i),i&&r&&(t[n].defaultSelected=!0)}else{for(n=""+$(n),e=null,i=0;i<t.length;i++){if(t[i].value===n)return t[i].selected=!0,void(r&&(t[i].defaultSelected=!0));null!==e||t[i].disabled||(e=t[i])}null!==e&&(e.selected=!0)}}function rt(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(o(91));return N({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function it(t,e){var n=e.value;if(null==n){if(n=e.children,e=e.defaultValue,null!=n){if(null!=e)throw Error(o(92));if(et(n)){if(1<n.length)throw Error(o(93));n=n[0]}e=n}null==e&&(e=""),n=e}t._wrapperState={initialValue:$(n)}}function ot(t,e){var n=$(e.value),r=$(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=r&&(t.defaultValue=""+r)}function at(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}function st(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function lt(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?st(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var ct,ut,ht=(ut=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((ct=ct||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=ct.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,r){MSApp.execUnsafeLocalFunction((function(){return ut(t,e)}))}:ut);function dt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var ft={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pt=["Webkit","ms","Moz","O"];function mt(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||ft.hasOwnProperty(t)&&ft[t]?(""+e).trim():e+"px"}function gt(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=mt(n,e[n],r);"float"===n&&(n="cssFloat"),r?t.setProperty(n,i):t[n]=i}}Object.keys(ft).forEach((function(t){pt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),ft[e]=ft[t]}))}));var yt=N({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function vt(t,e){if(e){if(yt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(o(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(o(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(o(62))}}function bt(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xt=null;function At(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var wt=null,Ct=null,_t=null;function kt(t){if(t=bi(t)){if("function"!=typeof wt)throw Error(o(280));var e=t.stateNode;e&&(e=Ai(e),wt(t.stateNode,t.type,e))}}function St(t){Ct?_t?_t.push(t):_t=[t]:Ct=t}function Et(){if(Ct){var t=Ct,e=_t;if(_t=Ct=null,kt(t),e)for(t=0;t<e.length;t++)kt(e[t])}}function Mt(t,e){return t(e)}function Pt(){}var Tt=!1;function Lt(t,e,n){if(Tt)return t(e,n);Tt=!0;try{return Mt(t,e,n)}finally{Tt=!1,(null!==Ct||null!==_t)&&(Pt(),Et())}}function It(t,e){var n=t.stateNode;if(null===n)return null;var r=Ai(n);if(null===r)return null;n=r[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!r;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw Error(o(231,e,typeof n));return n}var Dt=!1;if(u)try{var Rt={};Object.defineProperty(Rt,"passive",{get:function(){Dt=!0}}),window.addEventListener("test",Rt,Rt),window.removeEventListener("test",Rt,Rt)}catch(ut){Dt=!1}function Ot(t,e,n,r,i,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}var Bt=!1,Nt=null,zt=!1,Ft=null,jt={onError:function(t){Bt=!0,Nt=t}};function Vt(t,e,n,r,i,o,a,s,l){Bt=!1,Nt=null,Ot.apply(jt,arguments)}function Ut(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(4098&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function Wt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function $t(t){if(Ut(t)!==t)throw Error(o(188))}function Ht(t){return null!==(t=function(t){var e=t.alternate;if(!e){if(null===(e=Ut(t)))throw Error(o(188));return e!==t?null:t}for(var n=t,r=e;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return $t(i),t;if(a===r)return $t(i),e;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?t:e}(t))?Yt(t):null}function Yt(t){if(5===t.tag||6===t.tag)return t;for(t=t.child;null!==t;){var e=Yt(t);if(null!==e)return e;t=t.sibling}return null}var qt=i.unstable_scheduleCallback,Gt=i.unstable_cancelCallback,Qt=i.unstable_shouldYield,Jt=i.unstable_requestPaint,Xt=i.unstable_now,Kt=i.unstable_getCurrentPriorityLevel,Zt=i.unstable_ImmediatePriority,te=i.unstable_UserBlockingPriority,ee=i.unstable_NormalPriority,ne=i.unstable_LowPriority,re=i.unstable_IdlePriority,ie=null,oe=null,ae=Math.clz32?Math.clz32:function(t){return 0==(t>>>=0)?32:31-(se(t)/le|0)|0},se=Math.log,le=Math.LN2,ce=64,ue=4194304;function he(t){switch(t&-t){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&t;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&t;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return t}}function de(t,e){var n=t.pendingLanes;if(0===n)return 0;var r=0,i=t.suspendedLanes,o=t.pingedLanes,a=268435455&n;if(0!==a){var s=a&~i;0!==s?r=he(s):0!=(o&=a)&&(r=he(o))}else 0!=(a=n&~i)?r=he(a):0!==o&&(r=he(o));if(0===r)return 0;if(0!==e&&e!==r&&0==(e&i)&&((i=r&-r)>=(o=e&-e)||16===i&&0!=(4194240&o)))return e;if(0!=(4&r)&&(r|=16&n),0!==(e=t.entangledLanes))for(t=t.entanglements,e&=r;0<e;)i=1<<(n=31-ae(e)),r|=t[n],e&=~i;return r}function fe(t,e){switch(t){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;default:return-1}}function pe(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function me(){var t=ce;return 0==(4194240&(ce<<=1))&&(ce=64),t}function ge(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function ye(t,e,n){t.pendingLanes|=e,536870912!==e&&(t.suspendedLanes=0,t.pingedLanes=0),(t=t.eventTimes)[e=31-ae(e)]=n}function ve(t,e){var n=t.entangledLanes|=e;for(t=t.entanglements;n;){var r=31-ae(n),i=1<<r;i&e|t[r]&e&&(t[r]|=e),n&=~i}}var be=0;function xe(t){return 1<(t&=-t)?4<t?0!=(268435455&t)?16:536870912:4:1}var Ae,we,Ce,_e,ke,Se=!1,Ee=[],Me=null,Pe=null,Te=null,Le=new Map,Ie=new Map,De=[],Re="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Oe(t,e){switch(t){case"focusin":case"focusout":Me=null;break;case"dragenter":case"dragleave":Pe=null;break;case"mouseover":case"mouseout":Te=null;break;case"pointerover":case"pointerout":Le.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ie.delete(e.pointerId)}}function Be(t,e,n,r,i,o){return null===t||t.nativeEvent!==o?(t={blockedOn:e,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},null!==e&&null!==(e=bi(e))&&we(e),t):(t.eventSystemFlags|=r,e=t.targetContainers,null!==i&&-1===e.indexOf(i)&&e.push(i),t)}function Ne(t){var e=vi(t.target);if(null!==e){var n=Ut(e);if(null!==n)if(13===(e=n.tag)){if(null!==(e=Wt(n)))return t.blockedOn=e,void ke(t.priority,(function(){Ce(n)}))}else if(3===e&&n.stateNode.current.memoizedState.isDehydrated)return void(t.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}t.blockedOn=null}function ze(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var n=Qe(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n)return null!==(e=bi(n))&&we(e),t.blockedOn=n,!1;var r=new(n=t.nativeEvent).constructor(n.type,n);xt=r,n.target.dispatchEvent(r),xt=null,e.shift()}return!0}function Fe(t,e,n){ze(t)&&n.delete(e)}function je(){Se=!1,null!==Me&&ze(Me)&&(Me=null),null!==Pe&&ze(Pe)&&(Pe=null),null!==Te&&ze(Te)&&(Te=null),Le.forEach(Fe),Ie.forEach(Fe)}function Ve(t,e){t.blockedOn===e&&(t.blockedOn=null,Se||(Se=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,je)))}function Ue(t){function e(e){return Ve(e,t)}if(0<Ee.length){Ve(Ee[0],t);for(var n=1;n<Ee.length;n++){var r=Ee[n];r.blockedOn===t&&(r.blockedOn=null)}}for(null!==Me&&Ve(Me,t),null!==Pe&&Ve(Pe,t),null!==Te&&Ve(Te,t),Le.forEach(e),Ie.forEach(e),n=0;n<De.length;n++)(r=De[n]).blockedOn===t&&(r.blockedOn=null);for(;0<De.length&&null===(n=De[0]).blockedOn;)Ne(n),null===n.blockedOn&&De.shift()}var We=x.ReactCurrentBatchConfig,$e=!0;function He(t,e,n,r){var i=be,o=We.transition;We.transition=null;try{be=1,qe(t,e,n,r)}finally{be=i,We.transition=o}}function Ye(t,e,n,r){var i=be,o=We.transition;We.transition=null;try{be=4,qe(t,e,n,r)}finally{be=i,We.transition=o}}function qe(t,e,n,r){if($e){var i=Qe(t,e,n,r);if(null===i)$r(t,e,r,Ge,n),Oe(t,r);else if(function(t,e,n,r,i){switch(e){case"focusin":return Me=Be(Me,t,e,n,r,i),!0;case"dragenter":return Pe=Be(Pe,t,e,n,r,i),!0;case"mouseover":return Te=Be(Te,t,e,n,r,i),!0;case"pointerover":var o=i.pointerId;return Le.set(o,Be(Le.get(o)||null,t,e,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,Ie.set(o,Be(Ie.get(o)||null,t,e,n,r,i)),!0}return!1}(i,t,e,n,r))r.stopPropagation();else if(Oe(t,r),4&e&&-1<Re.indexOf(t)){for(;null!==i;){var o=bi(i);if(null!==o&&Ae(o),null===(o=Qe(t,e,n,r))&&$r(t,e,r,Ge,n),o===i)break;i=o}null!==i&&r.stopPropagation()}else $r(t,e,r,null,n)}}var Ge=null;function Qe(t,e,n,r){if(Ge=null,null!==(t=vi(t=At(r))))if(null===(e=Ut(t)))t=null;else if(13===(n=e.tag)){if(null!==(t=Wt(e)))return t;t=null}else if(3===n){if(e.stateNode.current.memoizedState.isDehydrated)return 3===e.tag?e.stateNode.containerInfo:null;t=null}else e!==t&&(t=null);return Ge=t,null}function Je(t){switch(t){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Kt()){case Zt:return 1;case te:return 4;case ee:case ne:return 16;case re:return 536870912;default:return 16}default:return 16}}var Xe=null,Ke=null,Ze=null;function tn(){if(Ze)return Ze;var t,e,n=Ke,r=n.length,i="value"in Xe?Xe.value:Xe.textContent,o=i.length;for(t=0;t<r&&n[t]===i[t];t++);var a=r-t;for(e=1;e<=a&&n[r-e]===i[o-e];e++);return Ze=i.slice(t,1<e?1-e:void 0)}function en(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function nn(){return!0}function rn(){return!1}function on(t){function e(e,n,r,i,o){for(var a in this._reactName=e,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,t)t.hasOwnProperty(a)&&(e=t[a],this[a]=e?e(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return N(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),e}var an,sn,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=on(cn),hn=N({},cn,{view:0,detail:0}),dn=on(hn),fn=N({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==ln&&(ln&&"mousemove"===t.type?(an=t.screenX-ln.screenX,sn=t.screenY-ln.screenY):sn=an=0,ln=t),an)},movementY:function(t){return"movementY"in t?t.movementY:sn}}),pn=on(fn),mn=on(N({},fn,{dataTransfer:0})),gn=on(N({},hn,{relatedTarget:0})),yn=on(N({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=N({},cn,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),bn=on(vn),xn=on(N({},cn,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _n(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Cn[t])&&!!e[t]}function kn(){return _n}var Sn=N({},hn,{key:function(t){if(t.key){var e=An[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=en(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?wn[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(t){return"keypress"===t.type?en(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?en(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),En=on(Sn),Mn=on(N({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=on(N({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),Tn=on(N({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=N({},fn,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),In=on(Ln),Dn=[9,13,27,32],Rn=u&&"CompositionEvent"in window,On=null;u&&"documentMode"in document&&(On=document.documentMode);var Bn=u&&"TextEvent"in window&&!On,Nn=u&&(!Rn||On&&8<On&&11>=On),zn=String.fromCharCode(32),Fn=!1;function jn(t,e){switch(t){case"keyup":return-1!==Dn.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Un=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!Wn[t.type]:"textarea"===e}function Hn(t,e,n,r){St(r),0<(e=Yr(e,"onChange")).length&&(n=new un("onChange","change",null,n,r),t.push({event:n,listeners:e}))}var Yn=null,qn=null;function Gn(t){zr(t,0)}function Qn(t){if(q(xi(t)))return t}function Jn(t,e){if("change"===t)return e}var Xn=!1;if(u){var Kn;if(u){var Zn="oninput"in document;if(!Zn){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),Zn="function"==typeof tr.oninput}Kn=Zn}else Kn=!1;Xn=Kn&&(!document.documentMode||9<document.documentMode)}function er(){Yn&&(Yn.detachEvent("onpropertychange",nr),qn=Yn=null)}function nr(t){if("value"===t.propertyName&&Qn(qn)){var e=[];Hn(e,qn,t,At(t)),Lt(Gn,e)}}function rr(t,e,n){"focusin"===t?(er(),qn=n,(Yn=e).attachEvent("onpropertychange",nr)):"focusout"===t&&er()}function ir(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Qn(qn)}function or(t,e){if("click"===t)return Qn(e)}function ar(t,e){if("input"===t||"change"===t)return Qn(e)}var sr="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e};function lr(t,e){if(sr(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!h.call(e,i)||!sr(t[i],e[i]))return!1}return!0}function cr(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function ur(t,e){var n,r=cr(t);for(t=0;r;){if(3===r.nodeType){if(n=t+r.textContent.length,t<=e&&n>=e)return{node:r,offset:e-t};t=n}t:{for(;r;){if(r.nextSibling){r=r.nextSibling;break t}r=r.parentNode}r=void 0}r=cr(r)}}function hr(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?hr(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function dr(){for(var t=window,e=G();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=G((t=e.contentWindow).document)}return e}function fr(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}function pr(t){var e=dr(),n=t.focusedElem,r=t.selectionRange;if(e!==n&&n&&n.ownerDocument&&hr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(e=r.start,void 0===(t=r.end)&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if((t=(e=n.ownerDocument||document)&&e.defaultView||window).getSelection){t=t.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!t.extend&&o>r&&(i=r,r=o,o=i),i=ur(n,o);var a=ur(n,r);i&&a&&(1!==t.rangeCount||t.anchorNode!==i.node||t.anchorOffset!==i.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)&&((e=e.createRange()).setStart(i.node,i.offset),t.removeAllRanges(),o>r?(t.addRange(e),t.extend(a.node,a.offset)):(e.setEnd(a.node,a.offset),t.addRange(e)))}for(e=[],t=n;t=t.parentNode;)1===t.nodeType&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<e.length;n++)(t=e[n]).element.scrollLeft=t.left,t.element.scrollTop=t.top}}var mr=u&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function xr(t,e,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==G(r)||(r="selectionStart"in(r=gr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Yr(yr,"onSelect")).length&&(e=new un("onSelect","select",null,e,n),t.push({event:e,listeners:r}),e.target=gr)))}function Ar(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var wr={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},Cr={},_r={};function kr(t){if(Cr[t])return Cr[t];if(!wr[t])return t;var e,n=wr[t];for(e in n)if(n.hasOwnProperty(e)&&e in _r)return Cr[t]=n[e];return t}u&&(_r=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var Sr=kr("animationend"),Er=kr("animationiteration"),Mr=kr("animationstart"),Pr=kr("transitionend"),Tr=new Map,Lr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ir(t,e){Tr.set(t,e),l(e,[t])}for(var Dr=0;Dr<Lr.length;Dr++){var Rr=Lr[Dr];Ir(Rr.toLowerCase(),"on"+(Rr[0].toUpperCase()+Rr.slice(1)))}Ir(Sr,"onAnimationEnd"),Ir(Er,"onAnimationIteration"),Ir(Mr,"onAnimationStart"),Ir("dblclick","onDoubleClick"),Ir("focusin","onFocus"),Ir("focusout","onBlur"),Ir(Pr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Or="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Br=new Set("cancel close invalid load scroll toggle".split(" ").concat(Or));function Nr(t,e,n){var r=t.type||"unknown-event";t.currentTarget=n,function(t,e,n,r,i,a,s,l,c){if(Vt.apply(this,arguments),Bt){if(!Bt)throw Error(o(198));var u=Nt;Bt=!1,Nt=null,zt||(zt=!0,Ft=u)}}(r,e,void 0,t),t.currentTarget=null}function zr(t,e){e=0!=(4&e);for(var n=0;n<t.length;n++){var r=t[n],i=r.event;r=r.listeners;t:{var o=void 0;if(e)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break t;Nr(i,s,c),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break t;Nr(i,s,c),o=l}}}if(zt)throw t=Ft,zt=!1,Ft=null,t}function Fr(t,e){var n=e[mi];void 0===n&&(n=e[mi]=new Set);var r=t+"__bubble";n.has(r)||(Wr(e,t,2,!1),n.add(r))}function jr(t,e,n){var r=0;e&&(r|=4),Wr(n,t,r,e)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function Ur(t){if(!t[Vr]){t[Vr]=!0,a.forEach((function(e){"selectionchange"!==e&&(Br.has(e)||jr(e,!1,t),jr(e,!0,t))}));var e=9===t.nodeType?t:t.ownerDocument;null===e||e[Vr]||(e[Vr]=!0,jr("selectionchange",!1,e))}}function Wr(t,e,n,r){switch(Je(e)){case 1:var i=He;break;case 4:i=Ye;break;default:i=qe}n=i.bind(null,e,n,t),i=void 0,!Dt||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(i=!0),r?void 0!==i?t.addEventListener(e,n,{capture:!0,passive:i}):t.addEventListener(e,n,!0):void 0!==i?t.addEventListener(e,n,{passive:i}):t.addEventListener(e,n,!1)}function $r(t,e,n,r,i){var o=r;if(0==(1&e)&&0==(2&e)&&null!==r)t:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=vi(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue t}s=s.parentNode}}r=r.return}Lt((function(){var r=o,i=At(n),a=[];t:{var s=Tr.get(t);if(void 0!==s){var l=un,c=t;switch(t){case"keypress":if(0===en(n))break t;case"keydown":case"keyup":l=En;break;case"focusin":c="focus",l=gn;break;case"focusout":c="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Pn;break;case Sr:case Er:case Mr:l=yn;break;case Pr:l=Tn;break;case"scroll":l=dn;break;case"wheel":l=In;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Mn}var u=0!=(4&e),h=!u&&"scroll"===t,d=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=r;null!==p;){var m=(f=p).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==d&&null!=(m=It(p,d))&&u.push(Hr(p,m,f))),h)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,i),a.push({event:s,listeners:u}))}}if(0==(7&e)){if(l="mouseout"===t||"pointerout"===t,(!(s="mouseover"===t||"pointerover"===t)||n===xt||!(c=n.relatedTarget||n.fromElement)||!vi(c)&&!c[pi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?vi(c):null)&&(c!==(h=Ut(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=pn,m="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==t&&"pointerover"!==t||(u=Mn,m="onPointerLeave",d="onPointerEnter",p="pointer"),h=null==l?s:xi(l),f=null==c?s:xi(c),(s=new u(m,p+"leave",l,n,i)).target=h,s.relatedTarget=f,m=null,vi(i)===r&&((u=new u(d,p+"enter",c,n,i)).target=f,u.relatedTarget=h,m=u),h=m,l&&c)t:{for(d=c,p=0,f=u=l;f;f=qr(f))p++;for(f=0,m=d;m;m=qr(m))f++;for(;0<p-f;)u=qr(u),p--;for(;0<f-p;)d=qr(d),f--;for(;p--;){if(u===d||null!==d&&u===d.alternate)break t;u=qr(u),d=qr(d)}u=null}else u=null;null!==l&&Gr(a,s,l,u,!1),null!==c&&null!==h&&Gr(a,h,c,u,!0)}if("select"===(l=(s=r?xi(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Jn;else if($n(s))if(Xn)g=ar;else{g=ir;var y=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=or);switch(g&&(g=g(t,r))?Hn(a,g,n,i):(y&&y(t,s,r),"focusout"===t&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&tt(s,"number",s.value)),y=r?xi(r):window,t){case"focusin":($n(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,xr(a,n,i);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":xr(a,n,i)}var v;if(Rn)t:{switch(t){case"compositionstart":var b="onCompositionStart";break t;case"compositionend":b="onCompositionEnd";break t;case"compositionupdate":b="onCompositionUpdate";break t}b=void 0}else Un?jn(t,n)&&(b="onCompositionEnd"):"keydown"===t&&229===n.keyCode&&(b="onCompositionStart");b&&(Nn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(v=tn()):(Ke="value"in(Xe=i)?Xe.value:Xe.textContent,Un=!0)),0<(y=Yr(r,b)).length&&(b=new xn(b,t,null,n,i),a.push({event:b,listeners:y}),(v||null!==(v=Vn(n)))&&(b.data=v))),(v=Bn?function(t,e){switch(t){case"compositionend":return Vn(e);case"keypress":return 32!==e.which?null:(Fn=!0,zn);case"textInput":return(t=e.data)===zn&&Fn?null:t;default:return null}}(t,n):function(t,e){if(Un)return"compositionend"===t||!Rn&&jn(t,e)?(t=tn(),Ze=Ke=Xe=null,Un=!1,t):null;switch(t){case"paste":default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Nn&&"ko"!==e.locale?null:e.data}}(t,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(i=new xn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=v)}zr(a,e)}))}function Hr(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Yr(t,e){for(var n=e+"Capture",r=[];null!==t;){var i=t,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=It(t,n))&&r.unshift(Hr(t,o,i)),null!=(o=It(t,e))&&r.push(Hr(t,o,i))),t=t.return}return r}function qr(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function Gr(t,e,n,r,i){for(var o=e._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(l=It(n,o))&&a.unshift(Hr(n,l,s)):i||null!=(l=It(n,o))&&a.push(Hr(n,l,s))),n=n.return}0!==a.length&&t.push({event:e,listeners:a})}var Qr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Xr(t){return("string"==typeof t?t:""+t).replace(Qr,"\n").replace(Jr,"")}function Kr(t,e,n){if(e=Xr(e),Xr(t)!==e&&n)throw Error(o(425))}function Zr(){}var ti=null,ei=null;function ni(t,e){return"textarea"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,oi="function"==typeof Promise?Promise:void 0,ai="function"==typeof queueMicrotask?queueMicrotask:void 0!==oi?function(t){return oi.resolve(null).then(t).catch(si)}:ri;function si(t){setTimeout((function(){throw t}))}function li(t,e){var n=e,r=0;do{var i=n.nextSibling;if(t.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return t.removeChild(i),void Ue(e);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);Ue(e)}function ci(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break;if(8===e){if("$"===(e=t.data)||"$!"===e||"$?"===e)break;if("/$"===e)return null}}return t}function ui(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===e)return t;e--}else"/$"===n&&e++}t=t.previousSibling}return null}var hi=Math.random().toString(36).slice(2),di="__reactFiber$"+hi,fi="__reactProps$"+hi,pi="__reactContainer$"+hi,mi="__reactEvents$"+hi,gi="__reactListeners$"+hi,yi="__reactHandles$"+hi;function vi(t){var e=t[di];if(e)return e;for(var n=t.parentNode;n;){if(e=n[pi]||n[di]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=ui(t);null!==t;){if(n=t[di])return n;t=ui(t)}return e}n=(t=n).parentNode}return null}function bi(t){return!(t=t[di]||t[pi])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function xi(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(o(33))}function Ai(t){return t[fi]||null}var wi=[],Ci=-1;function _i(t){return{current:t}}function ki(t){0>Ci||(t.current=wi[Ci],wi[Ci]=null,Ci--)}function Si(t,e){Ci++,wi[Ci]=t.current,t.current=e}var Ei={},Mi=_i(Ei),Pi=_i(!1),Ti=Ei;function Li(t,e){var n=t.type.contextTypes;if(!n)return Ei;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=e[i];return r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function Ii(t){return null!=t.childContextTypes}function Di(){ki(Pi),ki(Mi)}function Ri(t,e,n){if(Mi.current!==Ei)throw Error(o(168));Si(Mi,e),Si(Pi,n)}function Oi(t,e,n){var r=t.stateNode;if(e=e.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(o(108,W(t)||"Unknown",i));return N({},n,r)}function Bi(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||Ei,Ti=Mi.current,Si(Mi,t),Si(Pi,Pi.current),!0}function Ni(t,e,n){var r=t.stateNode;if(!r)throw Error(o(169));n?(t=Oi(t,e,Ti),r.__reactInternalMemoizedMergedChildContext=t,ki(Pi),ki(Mi),Si(Mi,t)):ki(Pi),Si(Pi,n)}var zi=null,Fi=!1,ji=!1;function Vi(t){null===zi?zi=[t]:zi.push(t)}function Ui(){if(!ji&&null!==zi){ji=!0;var t=0,e=be;try{var n=zi;for(be=1;t<n.length;t++){var r=n[t];do{r=r(!0)}while(null!==r)}zi=null,Fi=!1}catch(e){throw null!==zi&&(zi=zi.slice(t+1)),qt(Zt,Ui),e}finally{be=e,ji=!1}}return null}var Wi=[],$i=0,Hi=null,Yi=0,qi=[],Gi=0,Qi=null,Ji=1,Xi="";function Ki(t,e){Wi[$i++]=Yi,Wi[$i++]=Hi,Hi=t,Yi=e}function Zi(t,e,n){qi[Gi++]=Ji,qi[Gi++]=Xi,qi[Gi++]=Qi,Qi=t;var r=Ji;t=Xi;var i=32-ae(r)-1;r&=~(1<<i),n+=1;var o=32-ae(e)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,Ji=1<<32-ae(e)+i|n<<i|r,Xi=o+t}else Ji=1<<o|n<<i|r,Xi=t}function to(t){null!==t.return&&(Ki(t,1),Zi(t,1,0))}function eo(t){for(;t===Hi;)Hi=Wi[--$i],Wi[$i]=null,Yi=Wi[--$i],Wi[$i]=null;for(;t===Qi;)Qi=qi[--Gi],qi[Gi]=null,Xi=qi[--Gi],qi[Gi]=null,Ji=qi[--Gi],qi[Gi]=null}var no=null,ro=null,io=!1,oo=null;function ao(t,e){var n=Lc(5,null,null,0);n.elementType="DELETED",n.stateNode=e,n.return=t,null===(e=t.deletions)?(t.deletions=[n],t.flags|=16):e.push(n)}function so(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,no=t,ro=ci(e.firstChild),!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,no=t,ro=null,!0);case 13:return null!==(e=8!==e.nodeType?null:e)&&(n=null!==Qi?{id:Ji,overflow:Xi}:null,t.memoizedState={dehydrated:e,treeContext:n,retryLane:1073741824},(n=Lc(18,null,null,0)).stateNode=e,n.return=t,t.child=n,no=t,ro=null,!0);default:return!1}}function lo(t){return 0!=(1&t.mode)&&0==(128&t.flags)}function co(t){if(io){var e=ro;if(e){var n=e;if(!so(t,e)){if(lo(t))throw Error(o(418));e=ci(n.nextSibling);var r=no;e&&so(t,e)?ao(r,n):(t.flags=-4097&t.flags|2,io=!1,no=t)}}else{if(lo(t))throw Error(o(418));t.flags=-4097&t.flags|2,io=!1,no=t}}}function uo(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;no=t}function ho(t){if(t!==no)return!1;if(!io)return uo(t),io=!0,!1;var e;if((e=3!==t.tag)&&!(e=5!==t.tag)&&(e="head"!==(e=t.type)&&"body"!==e&&!ni(t.type,t.memoizedProps)),e&&(e=ro)){if(lo(t))throw fo(),Error(o(418));for(;e;)ao(t,e),e=ci(e.nextSibling)}if(uo(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(o(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===e){ro=ci(t.nextSibling);break t}e--}else"$"!==n&&"$!"!==n&&"$?"!==n||e++}t=t.nextSibling}ro=null}}else ro=no?ci(t.stateNode.nextSibling):null;return!0}function fo(){for(var t=ro;t;)t=ci(t.nextSibling)}function po(){ro=no=null,io=!1}function mo(t){null===oo?oo=[t]:oo.push(t)}var go=x.ReactCurrentBatchConfig;function yo(t,e){if(t&&t.defaultProps){for(var n in e=N({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var vo=_i(null),bo=null,xo=null,Ao=null;function wo(){Ao=xo=bo=null}function Co(t){var e=vo.current;ki(vo),t._currentValue=e}function _o(t,e,n){for(;null!==t;){var r=t.alternate;if((t.childLanes&e)!==e?(t.childLanes|=e,null!==r&&(r.childLanes|=e)):null!==r&&(r.childLanes&e)!==e&&(r.childLanes|=e),t===n)break;t=t.return}}function ko(t,e){bo=t,Ao=xo=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(xs=!0),t.firstContext=null)}function So(t){var e=t._currentValue;if(Ao!==t)if(t={context:t,memoizedValue:e,next:null},null===xo){if(null===bo)throw Error(o(308));xo=t,bo.dependencies={lanes:0,firstContext:t}}else xo=xo.next=t;return e}var Eo=null;function Mo(t){null===Eo?Eo=[t]:Eo.push(t)}function Po(t,e,n,r){var i=e.interleaved;return null===i?(n.next=n,Mo(e)):(n.next=i.next,i.next=n),e.interleaved=n,To(t,r)}function To(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}var Lo=!1;function Io(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Do(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function Ro(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function Oo(t,e,n){var r=t.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ml)){var i=r.pending;return null===i?e.next=e:(e.next=i.next,i.next=e),r.pending=e,To(t,n)}return null===(i=r.interleaved)?(e.next=e,Mo(r)):(e.next=i.next,i.next=e),r.interleaved=e,To(t,n)}function Bo(t,e,n){if(null!==(e=e.updateQueue)&&(e=e.shared,0!=(4194240&n))){var r=e.lanes;n|=r&=t.pendingLanes,e.lanes=n,ve(t,n)}}function No(t,e){var n=t.updateQueue,r=t.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=e:o=o.next=e}else i=o=e;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function zo(t,e,n,r){var i=t.updateQueue;Lo=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,c=l.next;l.next=null,null===a?o=c:a.next=c,a=l;var u=t.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==a&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==o){var h=i.baseState;for(a=0,u=c=l=null,s=o;;){var d=s.lane,f=s.eventTime;if((r&d)===d){null!==u&&(u=u.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});t:{var p=t,m=s;switch(d=e,f=n,m.tag){case 1:if("function"==typeof(p=m.payload)){h=p.call(f,h,d);break t}h=p;break t;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(d="function"==typeof(p=m.payload)?p.call(f,h,d):p))break t;h=N({},h,d);break t;case 2:Lo=!0}}null!==s.callback&&0!==s.lane&&(t.flags|=64,null===(d=i.effects)?i.effects=[s]:d.push(s))}else f={eventTime:f,lane:d,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=f,l=h):u=u.next=f,a|=d;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(d=s).next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}if(null===u&&(l=h),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=u,null!==(e=i.shared.interleaved)){i=e;do{a|=i.lane,i=i.next}while(i!==e)}else null===o&&(i.shared.lanes=0);Bl|=a,t.lanes=a,t.memoizedState=h}}function Fo(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var r=t[e],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var jo=(new r.Component).refs;function Vo(t,e,n,r){n=null==(n=n(r,e=t.memoizedState))?e:N({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var Uo={isMounted:function(t){return!!(t=t._reactInternals)&&Ut(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=tc(),i=ec(t),o=Ro(r,i);o.payload=e,null!=n&&(o.callback=n),null!==(e=Oo(t,o,i))&&(nc(e,t,i,r),Bo(e,t,i))},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=tc(),i=ec(t),o=Ro(r,i);o.tag=1,o.payload=e,null!=n&&(o.callback=n),null!==(e=Oo(t,o,i))&&(nc(e,t,i,r),Bo(e,t,i))},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=tc(),r=ec(t),i=Ro(n,r);i.tag=2,null!=e&&(i.callback=e),null!==(e=Oo(t,i,r))&&(nc(e,t,r,n),Bo(e,t,r))}};function Wo(t,e,n,r,i,o,a){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(r,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function $o(t,e,n){var r=!1,i=Ei,o=e.contextType;return"object"==typeof o&&null!==o?o=So(o):(i=Ii(e)?Ti:Mi.current,o=(r=null!=(r=e.contextTypes))?Li(t,i):Ei),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=Uo,t.stateNode=e,e._reactInternals=t,r&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,t.__reactInternalMemoizedMaskedChildContext=o),e}function Ho(t,e,n,r){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,r),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&Uo.enqueueReplaceState(e,e.state,null)}function Yo(t,e,n,r){var i=t.stateNode;i.props=n,i.state=t.memoizedState,i.refs=jo,Io(t);var o=e.contextType;"object"==typeof o&&null!==o?i.context=So(o):(o=Ii(e)?Ti:Mi.current,i.context=Li(t,o)),i.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(Vo(t,e,o,n),i.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(e=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),e!==i.state&&Uo.enqueueReplaceState(i,i.state,null),zo(t,n,i,r),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4194308)}function qo(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,t));var i=r,a=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===a?e.ref:(e=function(t){var e=i.refs;e===jo&&(e=i.refs={}),null===t?delete e[a]:e[a]=t},e._stringRef=a,e)}if("string"!=typeof t)throw Error(o(284));if(!n._owner)throw Error(o(290,t))}return t}function Go(t,e){throw t=Object.prototype.toString.call(e),Error(o(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t))}function Qo(t){return(0,t._init)(t._payload)}function Jo(t){function e(e,n){if(t){var r=e.deletions;null===r?(e.deletions=[n],e.flags|=16):r.push(n)}}function n(n,r){if(!t)return null;for(;null!==r;)e(n,r),r=r.sibling;return null}function r(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(t,e){return(t=Dc(t,e)).index=0,t.sibling=null,t}function a(e,n,r){return e.index=r,t?null!==(r=e.alternate)?(r=r.index)<n?(e.flags|=2,n):r:(e.flags|=2,n):(e.flags|=1048576,n)}function s(e){return t&&null===e.alternate&&(e.flags|=2),e}function l(t,e,n,r){return null===e||6!==e.tag?((e=Nc(n,t.mode,r)).return=t,e):((e=i(e,n)).return=t,e)}function c(t,e,n,r){var o=n.type;return o===C?h(t,e,n.props.children,r,n.key):null!==e&&(e.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===I&&Qo(o)===e.type)?((r=i(e,n.props)).ref=qo(t,e,n),r.return=t,r):((r=Rc(n.type,n.key,n.props,null,t.mode,r)).ref=qo(t,e,n),r.return=t,r)}function u(t,e,n,r){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=zc(n,t.mode,r)).return=t,e):((e=i(e,n.children||[])).return=t,e)}function h(t,e,n,r,o){return null===e||7!==e.tag?((e=Oc(n,t.mode,r,o)).return=t,e):((e=i(e,n)).return=t,e)}function d(t,e,n){if("string"==typeof e&&""!==e||"number"==typeof e)return(e=Nc(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case A:return(n=Rc(e.type,e.key,e.props,null,t.mode,n)).ref=qo(t,null,e),n.return=t,n;case w:return(e=zc(e,t.mode,n)).return=t,e;case I:return d(t,(0,e._init)(e._payload),n)}if(et(e)||O(e))return(e=Oc(e,t.mode,n,null)).return=t,e;Go(t,e)}return null}function f(t,e,n,r){var i=null!==e?e.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(t,e,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===i?c(t,e,n,r):null;case w:return n.key===i?u(t,e,n,r):null;case I:return f(t,e,(i=n._init)(n._payload),r)}if(et(n)||O(n))return null!==i?null:h(t,e,n,r,null);Go(t,n)}return null}function p(t,e,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(e,t=t.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return c(e,t=t.get(null===r.key?n:r.key)||null,r,i);case w:return u(e,t=t.get(null===r.key?n:r.key)||null,r,i);case I:return p(t,e,n,(0,r._init)(r._payload),i)}if(et(r)||O(r))return h(e,t=t.get(n)||null,r,i,null);Go(e,r)}return null}function m(i,o,s,l){for(var c=null,u=null,h=o,m=o=0,g=null;null!==h&&m<s.length;m++){h.index>m?(g=h,h=null):g=h.sibling;var y=f(i,h,s[m],l);if(null===y){null===h&&(h=g);break}t&&h&&null===y.alternate&&e(i,h),o=a(y,o,m),null===u?c=y:u.sibling=y,u=y,h=g}if(m===s.length)return n(i,h),io&&Ki(i,m),c;if(null===h){for(;m<s.length;m++)null!==(h=d(i,s[m],l))&&(o=a(h,o,m),null===u?c=h:u.sibling=h,u=h);return io&&Ki(i,m),c}for(h=r(i,h);m<s.length;m++)null!==(g=p(h,i,m,s[m],l))&&(t&&null!==g.alternate&&h.delete(null===g.key?m:g.key),o=a(g,o,m),null===u?c=g:u.sibling=g,u=g);return t&&h.forEach((function(t){return e(i,t)})),io&&Ki(i,m),c}function g(i,s,l,c){var u=O(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var h=u=null,m=s,g=s=0,y=null,v=l.next();null!==m&&!v.done;g++,v=l.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=f(i,m,v.value,c);if(null===b){null===m&&(m=y);break}t&&m&&null===b.alternate&&e(i,m),s=a(b,s,g),null===h?u=b:h.sibling=b,h=b,m=y}if(v.done)return n(i,m),io&&Ki(i,g),u;if(null===m){for(;!v.done;g++,v=l.next())null!==(v=d(i,v.value,c))&&(s=a(v,s,g),null===h?u=v:h.sibling=v,h=v);return io&&Ki(i,g),u}for(m=r(i,m);!v.done;g++,v=l.next())null!==(v=p(m,i,g,v.value,c))&&(t&&null!==v.alternate&&m.delete(null===v.key?g:v.key),s=a(v,s,g),null===h?u=v:h.sibling=v,h=v);return t&&m.forEach((function(t){return e(i,t)})),io&&Ki(i,g),u}return function t(r,o,a,l){if("object"==typeof a&&null!==a&&a.type===C&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case A:t:{for(var c=a.key,u=o;null!==u;){if(u.key===c){if((c=a.type)===C){if(7===u.tag){n(r,u.sibling),(o=i(u,a.props.children)).return=r,r=o;break t}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===I&&Qo(c)===u.type){n(r,u.sibling),(o=i(u,a.props)).ref=qo(r,u,a),o.return=r,r=o;break t}n(r,u);break}e(r,u),u=u.sibling}a.type===C?((o=Oc(a.props.children,r.mode,l,a.key)).return=r,r=o):((l=Rc(a.type,a.key,a.props,null,r.mode,l)).ref=qo(r,o,a),l.return=r,r=l)}return s(r);case w:t:{for(u=a.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(r,o.sibling),(o=i(o,a.children||[])).return=r,r=o;break t}n(r,o);break}e(r,o),o=o.sibling}(o=zc(a,r.mode,l)).return=r,r=o}return s(r);case I:return t(r,o,(u=a._init)(a._payload),l)}if(et(a))return m(r,o,a,l);if(O(a))return g(r,o,a,l);Go(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==o&&6===o.tag?(n(r,o.sibling),(o=i(o,a)).return=r,r=o):(n(r,o),(o=Nc(a,r.mode,l)).return=r,r=o),s(r)):n(r,o)}}var Xo=Jo(!0),Ko=Jo(!1),Zo={},ta=_i(Zo),ea=_i(Zo),na=_i(Zo);function ra(t){if(t===Zo)throw Error(o(174));return t}function ia(t,e){switch(Si(na,e),Si(ea,t),Si(ta,Zo),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:lt(null,"");break;default:e=lt(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}ki(ta),Si(ta,e)}function oa(){ki(ta),ki(ea),ki(na)}function aa(t){ra(na.current);var e=ra(ta.current),n=lt(e,t.type);e!==n&&(Si(ea,t),Si(ta,n))}function sa(t){ea.current===t&&(ki(ta),ki(ea))}var la=_i(0);function ca(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(128&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var ua=[];function ha(){for(var t=0;t<ua.length;t++)ua[t]._workInProgressVersionPrimary=null;ua.length=0}var da=x.ReactCurrentDispatcher,fa=x.ReactCurrentBatchConfig,pa=0,ma=null,ga=null,ya=null,va=!1,ba=!1,xa=0,Aa=0;function wa(){throw Error(o(321))}function Ca(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!sr(t[n],e[n]))return!1;return!0}function _a(t,e,n,r,i,a){if(pa=a,ma=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,da.current=null===t||null===t.memoizedState?ss:ls,t=n(r,i),ba){a=0;do{if(ba=!1,xa=0,25<=a)throw Error(o(301));a+=1,ya=ga=null,e.updateQueue=null,da.current=cs,t=n(r,i)}while(ba)}if(da.current=as,e=null!==ga&&null!==ga.next,pa=0,ya=ga=ma=null,va=!1,e)throw Error(o(300));return t}function ka(){var t=0!==xa;return xa=0,t}function Sa(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ma.memoizedState=ya=t:ya=ya.next=t,ya}function Ea(){if(null===ga){var t=ma.alternate;t=null!==t?t.memoizedState:null}else t=ga.next;var e=null===ya?ma.memoizedState:ya.next;if(null!==e)ya=e,ga=t;else{if(null===t)throw Error(o(310));t={memoizedState:(ga=t).memoizedState,baseState:ga.baseState,baseQueue:ga.baseQueue,queue:ga.queue,next:null},null===ya?ma.memoizedState=ya=t:ya=ya.next=t}return ya}function Ma(t,e){return"function"==typeof e?e(t):e}function Pa(t){var e=Ea(),n=e.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=t;var r=ga,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){a=i.next,r=r.baseState;var l=s=null,c=null,u=a;do{var h=u.lane;if((pa&h)===h)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:t(r,u.action);else{var d={lane:h,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=d,s=r):c=c.next=d,ma.lanes|=h,Bl|=h}u=u.next}while(null!==u&&u!==a);null===c?s=r:c.next=l,sr(r,e.memoizedState)||(xs=!0),e.memoizedState=r,e.baseState=s,e.baseQueue=c,n.lastRenderedState=r}if(null!==(t=n.interleaved)){i=t;do{a=i.lane,ma.lanes|=a,Bl|=a,i=i.next}while(i!==t)}else null===i&&(n.lanes=0);return[e.memoizedState,n.dispatch]}function Ta(t){var e=Ea(),n=e.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=t;var r=n.dispatch,i=n.pending,a=e.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=t(a,s.action),s=s.next}while(s!==i);sr(a,e.memoizedState)||(xs=!0),e.memoizedState=a,null===e.baseQueue&&(e.baseState=a),n.lastRenderedState=a}return[a,r]}function La(){}function Ia(t,e){var n=ma,r=Ea(),i=e(),a=!sr(r.memoizedState,i);if(a&&(r.memoizedState=i,xs=!0),r=r.queue,$a(Oa.bind(null,n,r,t),[t]),r.getSnapshot!==e||a||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,Fa(9,Ra.bind(null,n,r,i,e),void 0,null),null===Pl)throw Error(o(349));0!=(30&pa)||Da(n,e,i)}return i}function Da(t,e,n){t.flags|=16384,t={getSnapshot:e,value:n},null===(e=ma.updateQueue)?(e={lastEffect:null,stores:null},ma.updateQueue=e,e.stores=[t]):null===(n=e.stores)?e.stores=[t]:n.push(t)}function Ra(t,e,n,r){e.value=n,e.getSnapshot=r,Ba(e)&&Na(t)}function Oa(t,e,n){return n((function(){Ba(e)&&Na(t)}))}function Ba(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!sr(t,n)}catch(t){return!0}}function Na(t){var e=To(t,1);null!==e&&nc(e,t,1,-1)}function za(t){var e=Sa();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ma,lastRenderedState:t},e.queue=t,t=t.dispatch=ns.bind(null,ma,t),[e.memoizedState,t]}function Fa(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},null===(e=ma.updateQueue)?(e={lastEffect:null,stores:null},ma.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t),t}function ja(){return Ea().memoizedState}function Va(t,e,n,r){var i=Sa();ma.flags|=t,i.memoizedState=Fa(1|e,n,void 0,void 0===r?null:r)}function Ua(t,e,n,r){var i=Ea();r=void 0===r?null:r;var o=void 0;if(null!==ga){var a=ga.memoizedState;if(o=a.destroy,null!==r&&Ca(r,a.deps))return void(i.memoizedState=Fa(e,n,o,r))}ma.flags|=t,i.memoizedState=Fa(1|e,n,o,r)}function Wa(t,e){return Va(8390656,8,t,e)}function $a(t,e){return Ua(2048,8,t,e)}function Ha(t,e){return Ua(4,2,t,e)}function Ya(t,e){return Ua(4,4,t,e)}function qa(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Ga(t,e,n){return n=null!=n?n.concat([t]):null,Ua(4,4,qa.bind(null,e,t),n)}function Qa(){}function Ja(t,e){var n=Ea();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&Ca(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function Xa(t,e){var n=Ea();e=void 0===e?null:e;var r=n.memoizedState;return null!==r&&null!==e&&Ca(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function Ka(t,e,n){return 0==(21&pa)?(t.baseState&&(t.baseState=!1,xs=!0),t.memoizedState=n):(sr(n,e)||(n=me(),ma.lanes|=n,Bl|=n,t.baseState=!0),e)}function Za(t,e){var n=be;be=0!==n&&4>n?n:4,t(!0);var r=fa.transition;fa.transition={};try{t(!1),e()}finally{be=n,fa.transition=r}}function ts(){return Ea().memoizedState}function es(t,e,n){var r=ec(t);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rs(t)?is(e,n):null!==(n=Po(t,e,n,r))&&(nc(n,t,r,tc()),os(n,e,r))}function ns(t,e,n){var r=ec(t),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rs(t))is(e,i);else{var o=t.alternate;if(0===t.lanes&&(null===o||0===o.lanes)&&null!==(o=e.lastRenderedReducer))try{var a=e.lastRenderedState,s=o(a,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,a)){var l=e.interleaved;return null===l?(i.next=i,Mo(e)):(i.next=l.next,l.next=i),void(e.interleaved=i)}}catch(t){}null!==(n=Po(t,e,i,r))&&(nc(n,t,r,i=tc()),os(n,e,r))}}function rs(t){var e=t.alternate;return t===ma||null!==e&&e===ma}function is(t,e){ba=va=!0;var n=t.pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}function os(t,e,n){if(0!=(4194240&n)){var r=e.lanes;n|=r&=t.pendingLanes,e.lanes=n,ve(t,n)}}var as={readContext:So,useCallback:wa,useContext:wa,useEffect:wa,useImperativeHandle:wa,useInsertionEffect:wa,useLayoutEffect:wa,useMemo:wa,useReducer:wa,useRef:wa,useState:wa,useDebugValue:wa,useDeferredValue:wa,useTransition:wa,useMutableSource:wa,useSyncExternalStore:wa,useId:wa,unstable_isNewReconciler:!1},ss={readContext:So,useCallback:function(t,e){return Sa().memoizedState=[t,void 0===e?null:e],t},useContext:So,useEffect:Wa,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,Va(4194308,4,qa.bind(null,e,t),n)},useLayoutEffect:function(t,e){return Va(4194308,4,t,e)},useInsertionEffect:function(t,e){return Va(4,2,t,e)},useMemo:function(t,e){var n=Sa();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=Sa();return e=void 0!==n?n(e):e,r.memoizedState=r.baseState=e,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:t,lastRenderedState:e},r.queue=t,t=t.dispatch=es.bind(null,ma,t),[r.memoizedState,t]},useRef:function(t){return t={current:t},Sa().memoizedState=t},useState:za,useDebugValue:Qa,useDeferredValue:function(t){return Sa().memoizedState=t},useTransition:function(){var t=za(!1),e=t[0];return t=Za.bind(null,t[1]),Sa().memoizedState=t,[e,t]},useMutableSource:function(){},useSyncExternalStore:function(t,e,n){var r=ma,i=Sa();if(io){if(void 0===n)throw Error(o(407));n=n()}else{if(n=e(),null===Pl)throw Error(o(349));0!=(30&pa)||Da(r,e,n)}i.memoizedState=n;var a={value:n,getSnapshot:e};return i.queue=a,Wa(Oa.bind(null,r,a,t),[t]),r.flags|=2048,Fa(9,Ra.bind(null,r,a,n,e),void 0,null),n},useId:function(){var t=Sa(),e=Pl.identifierPrefix;if(io){var n=Xi;e=":"+e+"R"+(n=(Ji&~(1<<32-ae(Ji)-1)).toString(32)+n),0<(n=xa++)&&(e+="H"+n.toString(32)),e+=":"}else e=":"+e+"r"+(n=Aa++).toString(32)+":";return t.memoizedState=e},unstable_isNewReconciler:!1},ls={readContext:So,useCallback:Ja,useContext:So,useEffect:$a,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Ya,useMemo:Xa,useReducer:Pa,useRef:ja,useState:function(){return Pa(Ma)},useDebugValue:Qa,useDeferredValue:function(t){return Ka(Ea(),ga.memoizedState,t)},useTransition:function(){return[Pa(Ma)[0],Ea().memoizedState]},useMutableSource:La,useSyncExternalStore:Ia,useId:ts,unstable_isNewReconciler:!1},cs={readContext:So,useCallback:Ja,useContext:So,useEffect:$a,useImperativeHandle:Ga,useInsertionEffect:Ha,useLayoutEffect:Ya,useMemo:Xa,useReducer:Ta,useRef:ja,useState:function(){return Ta(Ma)},useDebugValue:Qa,useDeferredValue:function(t){var e=Ea();return null===ga?e.memoizedState=t:Ka(e,ga.memoizedState,t)},useTransition:function(){return[Ta(Ma)[0],Ea().memoizedState]},useMutableSource:La,useSyncExternalStore:Ia,useId:ts,unstable_isNewReconciler:!1};function us(t,e){try{var n="",r=e;do{n+=V(r),r=r.return}while(r);var i=n}catch(t){i="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:i,digest:null}}function hs(t,e,n){return{value:t,source:null,stack:null!=n?n:null,digest:null!=e?e:null}}function ds(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}var fs="function"==typeof WeakMap?WeakMap:Map;function ps(t,e,n){(n=Ro(-1,n)).tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){$l||($l=!0,Hl=r),ds(0,e)},n}function ms(t,e,n){(n=Ro(-1,n)).tag=3;var r=t.type.getDerivedStateFromError;if("function"==typeof r){var i=e.value;n.payload=function(){return r(i)},n.callback=function(){ds(0,e)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ds(0,e),"function"!=typeof r&&(null===Yl?Yl=new Set([this]):Yl.add(this));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}function gs(t,e,n){var r=t.pingCache;if(null===r){r=t.pingCache=new fs;var i=new Set;r.set(e,i)}else void 0===(i=r.get(e))&&(i=new Set,r.set(e,i));i.has(n)||(i.add(n),t=kc.bind(null,t,e,n),e.then(t,t))}function ys(t){do{var e;if((e=13===t.tag)&&(e=null===(e=t.memoizedState)||null!==e.dehydrated),e)return t;t=t.return}while(null!==t);return null}function vs(t,e,n,r,i){return 0==(1&t.mode)?(t===e?t.flags|=65536:(t.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((e=Ro(-1,1)).tag=2,Oo(n,e,1))),n.lanes|=1),t):(t.flags|=65536,t.lanes=i,t)}var bs=x.ReactCurrentOwner,xs=!1;function As(t,e,n,r){e.child=null===t?Ko(e,null,n,r):Xo(e,t.child,n,r)}function ws(t,e,n,r,i){n=n.render;var o=e.ref;return ko(e,i),r=_a(t,e,n,r,o,i),n=ka(),null===t||xs?(io&&n&&to(e),e.flags|=1,As(t,e,r,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~i,$s(t,e,i))}function Cs(t,e,n,r,i){if(null===t){var o=n.type;return"function"!=typeof o||Ic(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Rc(n.type,null,r,e,e.mode,i)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=o,_s(t,e,o,r,i))}if(o=t.child,0==(t.lanes&i)){var a=o.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&t.ref===e.ref)return $s(t,e,i)}return e.flags|=1,(t=Dc(o,r)).ref=e.ref,t.return=e,e.child=t}function _s(t,e,n,r,i){if(null!==t){var o=t.memoizedProps;if(lr(o,r)&&t.ref===e.ref){if(xs=!1,e.pendingProps=r=o,0==(t.lanes&i))return e.lanes=t.lanes,$s(t,e,i);0!=(131072&t.flags)&&(xs=!0)}}return Es(t,e,n,r,i)}function ks(t,e,n){var r=e.pendingProps,i=r.children,o=null!==t?t.memoizedState:null;if("hidden"===r.mode)if(0==(1&e.mode))e.memoizedState={baseLanes:0,cachePool:null,transitions:null},Si(Dl,Il),Il|=n;else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t,cachePool:null,transitions:null},e.updateQueue=null,Si(Dl,Il),Il|=t,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Si(Dl,Il),Il|=r}else null!==o?(r=o.baseLanes|n,e.memoizedState=null):r=n,Si(Dl,Il),Il|=r;return As(t,e,i,n),e.child}function Ss(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=512,e.flags|=2097152)}function Es(t,e,n,r,i){var o=Ii(n)?Ti:Mi.current;return o=Li(e,o),ko(e,i),n=_a(t,e,n,r,o,i),r=ka(),null===t||xs?(io&&r&&to(e),e.flags|=1,As(t,e,n,i),e.child):(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~i,$s(t,e,i))}function Ms(t,e,n,r,i){if(Ii(n)){var o=!0;Bi(e)}else o=!1;if(ko(e,i),null===e.stateNode)Ws(t,e),$o(e,n,r),Yo(e,n,r,i),r=!0;else if(null===t){var a=e.stateNode,s=e.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?So(c):Li(e,c=Ii(n)?Ti:Mi.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;h||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&Ho(e,a,r,c),Lo=!1;var d=e.memoizedState;a.state=d,zo(e,r,a,i),l=e.memoizedState,s!==r||d!==l||Pi.current||Lo?("function"==typeof u&&(Vo(e,n,u,r),l=e.memoizedState),(s=Lo||Wo(e,n,s,r,d,l,c))?(h||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(e.flags|=4194308)):("function"==typeof a.componentDidMount&&(e.flags|=4194308),e.memoizedProps=r,e.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(e.flags|=4194308),r=!1)}else{a=e.stateNode,Do(t,e),s=e.memoizedProps,c=e.type===e.elementType?s:yo(e.type,s),a.props=c,h=e.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?So(l):Li(e,l=Ii(n)?Ti:Mi.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==h||d!==l)&&Ho(e,a,r,l),Lo=!1,d=e.memoizedState,a.state=d,zo(e,r,a,i);var p=e.memoizedState;s!==h||d!==p||Pi.current||Lo?("function"==typeof f&&(Vo(e,n,f,r),p=e.memoizedState),(c=Lo||Wo(e,n,c,r,d,p,l)||!1)?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(e.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(e.flags|=1024)):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=1024),e.memoizedProps=r,e.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===t.memoizedProps&&d===t.memoizedState||(e.flags|=1024),r=!1)}return Ps(t,e,n,r,o,i)}function Ps(t,e,n,r,i,o){Ss(t,e);var a=0!=(128&e.flags);if(!r&&!a)return i&&Ni(e,n,!1),$s(t,e,o);r=e.stateNode,bs.current=e;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return e.flags|=1,null!==t&&a?(e.child=Xo(e,t.child,null,o),e.child=Xo(e,null,s,o)):As(t,e,s,o),e.memoizedState=r.state,i&&Ni(e,n,!0),e.child}function Ts(t){var e=t.stateNode;e.pendingContext?Ri(0,e.pendingContext,e.pendingContext!==e.context):e.context&&Ri(0,e.context,!1),ia(t,e.containerInfo)}function Ls(t,e,n,r,i){return po(),mo(i),e.flags|=256,As(t,e,n,r),e.child}var Is,Ds,Rs,Os={dehydrated:null,treeContext:null,retryLane:0};function Bs(t){return{baseLanes:t,cachePool:null,transitions:null}}function Ns(t,e,n){var r,i=e.pendingProps,a=la.current,s=!1,l=0!=(128&e.flags);if((r=l)||(r=(null===t||null!==t.memoizedState)&&0!=(2&a)),r?(s=!0,e.flags&=-129):null!==t&&null===t.memoizedState||(a|=1),Si(la,1&a),null===t)return co(e),null!==(t=e.memoizedState)&&null!==(t=t.dehydrated)?(0==(1&e.mode)?e.lanes=1:"$!"===t.data?e.lanes=8:e.lanes=1073741824,null):(l=i.children,t=i.fallback,s?(i=e.mode,s=e.child,l={mode:"hidden",children:l},0==(1&i)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Bc(l,i,0,null),t=Oc(t,i,n,null),s.return=e,t.return=e,s.sibling=t,e.child=s,e.child.memoizedState=Bs(n),e.memoizedState=Os,t):zs(e,l));if(null!==(a=t.memoizedState)&&null!==(r=a.dehydrated))return function(t,e,n,r,i,a,s){if(n)return 256&e.flags?(e.flags&=-257,Fs(t,e,s,r=hs(Error(o(422))))):null!==e.memoizedState?(e.child=t.child,e.flags|=128,null):(a=r.fallback,i=e.mode,r=Bc({mode:"visible",children:r.children},i,0,null),(a=Oc(a,i,s,null)).flags|=2,r.return=e,a.return=e,r.sibling=a,e.child=r,0!=(1&e.mode)&&Xo(e,t.child,null,s),e.child.memoizedState=Bs(s),e.memoizedState=Os,a);if(0==(1&e.mode))return Fs(t,e,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Fs(t,e,s,r=hs(a=Error(o(419)),r,void 0))}if(l=0!=(s&t.childLanes),xs||l){if(null!==(r=Pl)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|s))?0:i)&&i!==a.retryLane&&(a.retryLane=i,To(t,i),nc(r,t,i,-1))}return mc(),Fs(t,e,s,r=hs(Error(o(421))))}return"$?"===i.data?(e.flags|=128,e.child=t.child,e=Ec.bind(null,t),i._reactRetry=e,null):(t=a.treeContext,ro=ci(i.nextSibling),no=e,io=!0,oo=null,null!==t&&(qi[Gi++]=Ji,qi[Gi++]=Xi,qi[Gi++]=Qi,Ji=t.id,Xi=t.overflow,Qi=e),(e=zs(e,r.children)).flags|=4096,e)}(t,e,l,i,r,a,n);if(s){s=i.fallback,l=e.mode,r=(a=t.child).sibling;var c={mode:"hidden",children:i.children};return 0==(1&l)&&e.child!==a?((i=e.child).childLanes=0,i.pendingProps=c,e.deletions=null):(i=Dc(a,c)).subtreeFlags=14680064&a.subtreeFlags,null!==r?s=Dc(r,s):(s=Oc(s,l,n,null)).flags|=2,s.return=e,i.return=e,i.sibling=s,e.child=i,i=s,s=e.child,l=null===(l=t.child.memoizedState)?Bs(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=t.childLanes&~n,e.memoizedState=Os,i}return t=(s=t.child).sibling,i=Dc(s,{mode:"visible",children:i.children}),0==(1&e.mode)&&(i.lanes=n),i.return=e,i.sibling=null,null!==t&&(null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)),e.child=i,e.memoizedState=null,i}function zs(t,e){return(e=Bc({mode:"visible",children:e},t.mode,0,null)).return=t,t.child=e}function Fs(t,e,n,r){return null!==r&&mo(r),Xo(e,t.child,null,n),(t=zs(e,e.pendingProps.children)).flags|=2,e.memoizedState=null,t}function js(t,e,n){t.lanes|=e;var r=t.alternate;null!==r&&(r.lanes|=e),_o(t.return,e,n)}function Vs(t,e,n,r,i){var o=t.memoizedState;null===o?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=e,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function Us(t,e,n){var r=e.pendingProps,i=r.revealOrder,o=r.tail;if(As(t,e,r.children,n),0!=(2&(r=la.current)))r=1&r|2,e.flags|=128;else{if(null!==t&&0!=(128&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&js(t,n,e);else if(19===t.tag)js(t,n,e);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(Si(la,r),0==(1&e.mode))e.memoizedState=null;else switch(i){case"forwards":for(n=e.child,i=null;null!==n;)null!==(t=n.alternate)&&null===ca(t)&&(i=n),n=n.sibling;null===(n=i)?(i=e.child,e.child=null):(i=n.sibling,n.sibling=null),Vs(e,!1,i,n,o);break;case"backwards":for(n=null,i=e.child,e.child=null;null!==i;){if(null!==(t=i.alternate)&&null===ca(t)){e.child=i;break}t=i.sibling,i.sibling=n,n=i,i=t}Vs(e,!0,n,null,o);break;case"together":Vs(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Ws(t,e){0==(1&e.mode)&&null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2)}function $s(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),Bl|=e.lanes,0==(n&e.childLanes))return null;if(null!==t&&e.child!==t.child)throw Error(o(153));if(null!==e.child){for(n=Dc(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Dc(t,t.pendingProps)).return=e;n.sibling=null}return e.child}function Hs(t,e){if(!io)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e||null===t.tail?t.tail=null:t.tail.sibling=null:r.sibling=null}}function Ys(t){var e=null!==t.alternate&&t.alternate.child===t.child,n=0,r=0;if(e)for(var i=t.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=t,i=i.sibling;else for(i=t.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=t,i=i.sibling;return t.subtreeFlags|=r,t.childLanes=n,e}function qs(t,e,n){var r=e.pendingProps;switch(eo(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ys(e),null;case 1:case 17:return Ii(e.type)&&Di(),Ys(e),null;case 3:return r=e.stateNode,oa(),ki(Pi),ki(Mi),ha(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==t&&null!==t.child||(ho(e)?e.flags|=4:null===t||t.memoizedState.isDehydrated&&0==(256&e.flags)||(e.flags|=1024,null!==oo&&(ac(oo),oo=null))),Ys(e),null;case 5:sa(e);var i=ra(na.current);if(n=e.type,null!==t&&null!=e.stateNode)Ds(t,e,n,r),t.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!r){if(null===e.stateNode)throw Error(o(166));return Ys(e),null}if(t=ra(ta.current),ho(e)){r=e.stateNode,n=e.type;var a=e.memoizedProps;switch(r[di]=e,r[fi]=a,t=0!=(1&e.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(i=0;i<Or.length;i++)Fr(Or[i],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":J(r,a),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Fr("invalid",r);break;case"textarea":it(r,a),Fr("invalid",r)}for(var l in vt(n,a),i=null,a)if(a.hasOwnProperty(l)){var c=a[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Kr(r.textContent,c,t),i=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Kr(r.textContent,c,t),i=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Fr("scroll",r)}switch(n){case"input":Y(r),Z(r,a,!0);break;case"textarea":Y(r),at(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=i,e.updateQueue=r,null!==r&&(e.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===t&&(t=st(n)),"http://www.w3.org/1999/xhtml"===t?"script"===n?((t=l.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof r.is?t=l.createElement(n,{is:r.is}):(t=l.createElement(n),"select"===n&&(l=t,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):t=l.createElementNS(t,n),t[di]=e,t[fi]=r,Is(t,e),e.stateNode=t;t:{switch(l=bt(n,r),n){case"dialog":Fr("cancel",t),Fr("close",t),i=r;break;case"iframe":case"object":case"embed":Fr("load",t),i=r;break;case"video":case"audio":for(i=0;i<Or.length;i++)Fr(Or[i],t);i=r;break;case"source":Fr("error",t),i=r;break;case"img":case"image":case"link":Fr("error",t),Fr("load",t),i=r;break;case"details":Fr("toggle",t),i=r;break;case"input":J(t,r),i=Q(t,r),Fr("invalid",t);break;case"option":default:i=r;break;case"select":t._wrapperState={wasMultiple:!!r.multiple},i=N({},r,{value:void 0}),Fr("invalid",t);break;case"textarea":it(t,r),i=rt(t,r),Fr("invalid",t)}for(a in vt(n,i),c=i)if(c.hasOwnProperty(a)){var u=c[a];"style"===a?gt(t,u):"dangerouslySetInnerHTML"===a?null!=(u=u?u.__html:void 0)&&ht(t,u):"children"===a?"string"==typeof u?("textarea"!==n||""!==u)&&dt(t,u):"number"==typeof u&&dt(t,""+u):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(s.hasOwnProperty(a)?null!=u&&"onScroll"===a&&Fr("scroll",t):null!=u&&b(t,a,u,l))}switch(n){case"input":Y(t),Z(t,r,!1);break;case"textarea":Y(t),at(t);break;case"option":null!=r.value&&t.setAttribute("value",""+$(r.value));break;case"select":t.multiple=!!r.multiple,null!=(a=r.value)?nt(t,!!r.multiple,a,!1):null!=r.defaultValue&&nt(t,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(t.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break t;case"img":r=!0;break t;default:r=!1}}r&&(e.flags|=4)}null!==e.ref&&(e.flags|=512,e.flags|=2097152)}return Ys(e),null;case 6:if(t&&null!=e.stateNode)Rs(0,e,t.memoizedProps,r);else{if("string"!=typeof r&&null===e.stateNode)throw Error(o(166));if(n=ra(na.current),ra(ta.current),ho(e)){if(r=e.stateNode,n=e.memoizedProps,r[di]=e,(a=r.nodeValue!==n)&&null!==(t=no))switch(t.tag){case 3:Kr(r.nodeValue,n,0!=(1&t.mode));break;case 5:!0!==t.memoizedProps.suppressHydrationWarning&&Kr(r.nodeValue,n,0!=(1&t.mode))}a&&(e.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[di]=e,e.stateNode=r}return Ys(e),null;case 13:if(ki(la),r=e.memoizedState,null===t||null!==t.memoizedState&&null!==t.memoizedState.dehydrated){if(io&&null!==ro&&0!=(1&e.mode)&&0==(128&e.flags))fo(),po(),e.flags|=98560,a=!1;else if(a=ho(e),null!==r&&null!==r.dehydrated){if(null===t){if(!a)throw Error(o(318));if(!(a=null!==(a=e.memoizedState)?a.dehydrated:null))throw Error(o(317));a[di]=e}else po(),0==(128&e.flags)&&(e.memoizedState=null),e.flags|=4;Ys(e),a=!1}else null!==oo&&(ac(oo),oo=null),a=!0;if(!a)return 65536&e.flags?e:null}return 0!=(128&e.flags)?(e.lanes=n,e):((r=null!==r)!=(null!==t&&null!==t.memoizedState)&&r&&(e.child.flags|=8192,0!=(1&e.mode)&&(null===t||0!=(1&la.current)?0===Rl&&(Rl=3):mc())),null!==e.updateQueue&&(e.flags|=4),Ys(e),null);case 4:return oa(),null===t&&Ur(e.stateNode.containerInfo),Ys(e),null;case 10:return Co(e.type._context),Ys(e),null;case 19:if(ki(la),null===(a=e.memoizedState))return Ys(e),null;if(r=0!=(128&e.flags),null===(l=a.rendering))if(r)Hs(a,!1);else{if(0!==Rl||null!==t&&0!=(128&t.flags))for(t=e.child;null!==t;){if(null!==(l=ca(t))){for(e.flags|=128,Hs(a,!1),null!==(r=l.updateQueue)&&(e.updateQueue=r,e.flags|=4),e.subtreeFlags=0,r=n,n=e.child;null!==n;)t=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=t,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,t=l.dependencies,a.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return Si(la,1&la.current|2),e.child}t=t.sibling}null!==a.tail&&Xt()>Ul&&(e.flags|=128,r=!0,Hs(a,!1),e.lanes=4194304)}else{if(!r)if(null!==(t=ca(l))){if(e.flags|=128,r=!0,null!==(n=t.updateQueue)&&(e.updateQueue=n,e.flags|=4),Hs(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!io)return Ys(e),null}else 2*Xt()-a.renderingStartTime>Ul&&1073741824!==n&&(e.flags|=128,r=!0,Hs(a,!1),e.lanes=4194304);a.isBackwards?(l.sibling=e.child,e.child=l):(null!==(n=a.last)?n.sibling=l:e.child=l,a.last=l)}return null!==a.tail?(e=a.tail,a.rendering=e,a.tail=e.sibling,a.renderingStartTime=Xt(),e.sibling=null,n=la.current,Si(la,r?1&n|2:1&n),e):(Ys(e),null);case 22:case 23:return hc(),r=null!==e.memoizedState,null!==t&&null!==t.memoizedState!==r&&(e.flags|=8192),r&&0!=(1&e.mode)?0!=(1073741824&Il)&&(Ys(e),6&e.subtreeFlags&&(e.flags|=8192)):Ys(e),null;case 24:case 25:return null}throw Error(o(156,e.tag))}function Gs(t,e){switch(eo(e),e.tag){case 1:return Ii(e.type)&&Di(),65536&(t=e.flags)?(e.flags=-65537&t|128,e):null;case 3:return oa(),ki(Pi),ki(Mi),ha(),0!=(65536&(t=e.flags))&&0==(128&t)?(e.flags=-65537&t|128,e):null;case 5:return sa(e),null;case 13:if(ki(la),null!==(t=e.memoizedState)&&null!==t.dehydrated){if(null===e.alternate)throw Error(o(340));po()}return 65536&(t=e.flags)?(e.flags=-65537&t|128,e):null;case 19:return ki(la),null;case 4:return oa(),null;case 10:return Co(e.type._context),null;case 22:case 23:return hc(),null;default:return null}}Is=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ds=function(t,e,n,r){var i=t.memoizedProps;if(i!==r){t=e.stateNode,ra(ta.current);var o,a=null;switch(n){case"input":i=Q(t,i),r=Q(t,r),a=[];break;case"select":i=N({},i,{value:void 0}),r=N({},r,{value:void 0}),a=[];break;case"textarea":i=rt(t,i),r=rt(t,r),a=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(t.onclick=Zr)}for(u in vt(n,r),n=null,i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u){var l=i[u];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?a||(a=[]):(a=a||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=i?i[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(a||(a=[]),a.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(a=a||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Fr("scroll",t),a||l===c||(a=[])):(a=a||[]).push(u,c))}n&&(a=a||[]).push("style",n);var u=a;(e.updateQueue=u)&&(e.flags|=4)}},Rs=function(t,e,n,r){n!==r&&(e.flags|=4)};var Qs=!1,Js=!1,Xs="function"==typeof WeakSet?WeakSet:Set,Ks=null;function Zs(t,e){var n=t.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){_c(t,e,n)}else n.current=null}function tl(t,e,n){try{n()}catch(n){_c(t,e,n)}}var el=!1;function nl(t,e,n){var r=e.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&t)===t){var o=i.destroy;i.destroy=void 0,void 0!==o&&tl(e,n,o)}i=i.next}while(i!==r)}}function rl(t,e){if(null!==(e=null!==(e=e.updateQueue)?e.lastEffect:null)){var n=e=e.next;do{if((n.tag&t)===t){var r=n.create;n.destroy=r()}n=n.next}while(n!==e)}}function il(t){var e=t.ref;if(null!==e){var n=t.stateNode;t.tag,t=n,"function"==typeof e?e(t):e.current=t}}function ol(t){var e=t.alternate;null!==e&&(t.alternate=null,ol(e)),t.child=null,t.deletions=null,t.sibling=null,5===t.tag&&null!==(e=t.stateNode)&&(delete e[di],delete e[fi],delete e[mi],delete e[gi],delete e[yi]),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}function al(t){return 5===t.tag||3===t.tag||4===t.tag}function sl(t){t:for(;;){for(;null===t.sibling;){if(null===t.return||al(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.flags)continue t;if(null===t.child||4===t.tag)continue t;t.child.return=t,t=t.child}if(!(2&t.flags))return t.stateNode}}function ll(t,e,n){var r=t.tag;if(5===r||6===r)t=t.stateNode,e?8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(8===n.nodeType?(e=n.parentNode).insertBefore(t,n):(e=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==e.onclick||(e.onclick=Zr));else if(4!==r&&null!==(t=t.child))for(ll(t,e,n),t=t.sibling;null!==t;)ll(t,e,n),t=t.sibling}function cl(t,e,n){var r=t.tag;if(5===r||6===r)t=t.stateNode,e?n.insertBefore(t,e):n.appendChild(t);else if(4!==r&&null!==(t=t.child))for(cl(t,e,n),t=t.sibling;null!==t;)cl(t,e,n),t=t.sibling}var ul=null,hl=!1;function dl(t,e,n){for(n=n.child;null!==n;)fl(t,e,n),n=n.sibling}function fl(t,e,n){if(oe&&"function"==typeof oe.onCommitFiberUnmount)try{oe.onCommitFiberUnmount(ie,n)}catch(t){}switch(n.tag){case 5:Js||Zs(n,e);case 6:var r=ul,i=hl;ul=null,dl(t,e,n),hl=i,null!==(ul=r)&&(hl?(t=ul,n=n.stateNode,8===t.nodeType?t.parentNode.removeChild(n):t.removeChild(n)):ul.removeChild(n.stateNode));break;case 18:null!==ul&&(hl?(t=ul,n=n.stateNode,8===t.nodeType?li(t.parentNode,n):1===t.nodeType&&li(t,n),Ue(t)):li(ul,n.stateNode));break;case 4:r=ul,i=hl,ul=n.stateNode.containerInfo,hl=!0,dl(t,e,n),ul=r,hl=i;break;case 0:case 11:case 14:case 15:if(!Js&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,void 0!==a&&(0!=(2&o)||0!=(4&o))&&tl(n,e,a),i=i.next}while(i!==r)}dl(t,e,n);break;case 1:if(!Js&&(Zs(n,e),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(t){_c(n,e,t)}dl(t,e,n);break;case 21:dl(t,e,n);break;case 22:1&n.mode?(Js=(r=Js)||null!==n.memoizedState,dl(t,e,n),Js=r):dl(t,e,n);break;default:dl(t,e,n)}}function pl(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new Xs),e.forEach((function(e){var r=Mc.bind(null,t,e);n.has(e)||(n.add(e),e.then(r,r))}))}}function ml(t,e){var n=e.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var a=t,s=e,l=s;t:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,hl=!1;break t;case 3:case 4:ul=l.stateNode.containerInfo,hl=!0;break t}l=l.return}if(null===ul)throw Error(o(160));fl(a,s,i),ul=null,hl=!1;var c=i.alternate;null!==c&&(c.return=null),i.return=null}catch(t){_c(i,e,t)}}if(12854&e.subtreeFlags)for(e=e.child;null!==e;)gl(e,t),e=e.sibling}function gl(t,e){var n=t.alternate,r=t.flags;switch(t.tag){case 0:case 11:case 14:case 15:if(ml(e,t),yl(t),4&r){try{nl(3,t,t.return),rl(3,t)}catch(e){_c(t,t.return,e)}try{nl(5,t,t.return)}catch(e){_c(t,t.return,e)}}break;case 1:ml(e,t),yl(t),512&r&&null!==n&&Zs(n,n.return);break;case 5:if(ml(e,t),yl(t),512&r&&null!==n&&Zs(n,n.return),32&t.flags){var i=t.stateNode;try{dt(i,"")}catch(e){_c(t,t.return,e)}}if(4&r&&null!=(i=t.stateNode)){var a=t.memoizedProps,s=null!==n?n.memoizedProps:a,l=t.type,c=t.updateQueue;if(t.updateQueue=null,null!==c)try{"input"===l&&"radio"===a.type&&null!=a.name&&X(i,a),bt(l,s);var u=bt(l,a);for(s=0;s<c.length;s+=2){var h=c[s],d=c[s+1];"style"===h?gt(i,d):"dangerouslySetInnerHTML"===h?ht(i,d):"children"===h?dt(i,d):b(i,h,d,u)}switch(l){case"input":K(i,a);break;case"textarea":ot(i,a);break;case"select":var f=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!a.multiple;var p=a.value;null!=p?nt(i,!!a.multiple,p,!1):f!==!!a.multiple&&(null!=a.defaultValue?nt(i,!!a.multiple,a.defaultValue,!0):nt(i,!!a.multiple,a.multiple?[]:"",!1))}i[fi]=a}catch(e){_c(t,t.return,e)}}break;case 6:if(ml(e,t),yl(t),4&r){if(null===t.stateNode)throw Error(o(162));i=t.stateNode,a=t.memoizedProps;try{i.nodeValue=a}catch(e){_c(t,t.return,e)}}break;case 3:if(ml(e,t),yl(t),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ue(e.containerInfo)}catch(e){_c(t,t.return,e)}break;case 4:default:ml(e,t),yl(t);break;case 13:ml(e,t),yl(t),8192&(i=t.child).flags&&(a=null!==i.memoizedState,i.stateNode.isHidden=a,!a||null!==i.alternate&&null!==i.alternate.memoizedState||(Vl=Xt())),4&r&&pl(t);break;case 22:if(h=null!==n&&null!==n.memoizedState,1&t.mode?(Js=(u=Js)||h,ml(e,t),Js=u):ml(e,t),yl(t),8192&r){if(u=null!==t.memoizedState,(t.stateNode.isHidden=u)&&!h&&0!=(1&t.mode))for(Ks=t,h=t.child;null!==h;){for(d=Ks=h;null!==Ks;){switch(p=(f=Ks).child,f.tag){case 0:case 11:case 14:case 15:nl(4,f,f.return);break;case 1:Zs(f,f.return);var m=f.stateNode;if("function"==typeof m.componentWillUnmount){r=f,n=f.return;try{e=r,m.props=e.memoizedProps,m.state=e.memoizedState,m.componentWillUnmount()}catch(t){_c(r,n,t)}}break;case 5:Zs(f,f.return);break;case 22:if(null!==f.memoizedState){Al(d);continue}}null!==p?(p.return=f,Ks=p):Al(d)}h=h.sibling}t:for(h=null,d=t;;){if(5===d.tag){if(null===h){h=d;try{i=d.stateNode,u?"function"==typeof(a=i.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=d.stateNode,s=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=mt("display",s))}catch(e){_c(t,t.return,e)}}}else if(6===d.tag){if(null===h)try{d.stateNode.nodeValue=u?"":d.memoizedProps}catch(e){_c(t,t.return,e)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===t)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===t)break t;for(;null===d.sibling;){if(null===d.return||d.return===t)break t;h===d&&(h=null),d=d.return}h===d&&(h=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:ml(e,t),yl(t),4&r&&pl(t);case 21:}}function yl(t){var e=t.flags;if(2&e){try{t:{for(var n=t.return;null!==n;){if(al(n)){var r=n;break t}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(dt(i,""),r.flags&=-33),cl(t,sl(t),i);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(t,sl(t),a);break;default:throw Error(o(161))}}catch(e){_c(t,t.return,e)}t.flags&=-3}4096&e&&(t.flags&=-4097)}function vl(t,e,n){Ks=t,bl(t,e,n)}function bl(t,e,n){for(var r=0!=(1&t.mode);null!==Ks;){var i=Ks,o=i.child;if(22===i.tag&&r){var a=null!==i.memoizedState||Qs;if(!a){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Js;s=Qs;var c=Js;if(Qs=a,(Js=l)&&!c)for(Ks=i;null!==Ks;)l=(a=Ks).child,22===a.tag&&null!==a.memoizedState?wl(i):null!==l?(l.return=a,Ks=l):wl(i);for(;null!==o;)Ks=o,bl(o,e,n),o=o.sibling;Ks=i,Qs=s,Js=c}xl(t)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,Ks=o):xl(t)}}function xl(t){for(;null!==Ks;){var e=Ks;if(0!=(8772&e.flags)){var n=e.alternate;try{if(0!=(8772&e.flags))switch(e.tag){case 0:case 11:case 15:Js||rl(5,e);break;case 1:var r=e.stateNode;if(4&e.flags&&!Js)if(null===n)r.componentDidMount();else{var i=e.elementType===e.type?n.memoizedProps:yo(e.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=e.updateQueue;null!==a&&Fo(e,a,r);break;case 3:var s=e.updateQueue;if(null!==s){if(n=null,null!==e.child)switch(e.child.tag){case 5:case 1:n=e.child.stateNode}Fo(e,s,n)}break;case 5:var l=e.stateNode;if(null===n&&4&e.flags){n=l;var c=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===e.memoizedState){var u=e.alternate;if(null!==u){var h=u.memoizedState;if(null!==h){var d=h.dehydrated;null!==d&&Ue(d)}}}break;default:throw Error(o(163))}Js||512&e.flags&&il(e)}catch(t){_c(e,e.return,t)}}if(e===t){Ks=null;break}if(null!==(n=e.sibling)){n.return=e.return,Ks=n;break}Ks=e.return}}function Al(t){for(;null!==Ks;){var e=Ks;if(e===t){Ks=null;break}var n=e.sibling;if(null!==n){n.return=e.return,Ks=n;break}Ks=e.return}}function wl(t){for(;null!==Ks;){var e=Ks;try{switch(e.tag){case 0:case 11:case 15:var n=e.return;try{rl(4,e)}catch(t){_c(e,n,t)}break;case 1:var r=e.stateNode;if("function"==typeof r.componentDidMount){var i=e.return;try{r.componentDidMount()}catch(t){_c(e,i,t)}}var o=e.return;try{il(e)}catch(t){_c(e,o,t)}break;case 5:var a=e.return;try{il(e)}catch(t){_c(e,a,t)}}}catch(t){_c(e,e.return,t)}if(e===t){Ks=null;break}var s=e.sibling;if(null!==s){s.return=e.return,Ks=s;break}Ks=e.return}}var Cl,_l=Math.ceil,kl=x.ReactCurrentDispatcher,Sl=x.ReactCurrentOwner,El=x.ReactCurrentBatchConfig,Ml=0,Pl=null,Tl=null,Ll=0,Il=0,Dl=_i(0),Rl=0,Ol=null,Bl=0,Nl=0,zl=0,Fl=null,jl=null,Vl=0,Ul=1/0,Wl=null,$l=!1,Hl=null,Yl=null,ql=!1,Gl=null,Ql=0,Jl=0,Xl=null,Kl=-1,Zl=0;function tc(){return 0!=(6&Ml)?Xt():-1!==Kl?Kl:Kl=Xt()}function ec(t){return 0==(1&t.mode)?1:0!=(2&Ml)&&0!==Ll?Ll&-Ll:null!==go.transition?(0===Zl&&(Zl=me()),Zl):0!==(t=be)?t:t=void 0===(t=window.event)?16:Je(t.type)}function nc(t,e,n,r){if(50<Jl)throw Jl=0,Xl=null,Error(o(185));ye(t,n,r),0!=(2&Ml)&&t===Pl||(t===Pl&&(0==(2&Ml)&&(Nl|=n),4===Rl&&sc(t,Ll)),rc(t,r),1===n&&0===Ml&&0==(1&e.mode)&&(Ul=Xt()+500,Fi&&Ui()))}function rc(t,e){var n=t.callbackNode;!function(t,e){for(var n=t.suspendedLanes,r=t.pingedLanes,i=t.expirationTimes,o=t.pendingLanes;0<o;){var a=31-ae(o),s=1<<a,l=i[a];-1===l?0!=(s&n)&&0==(s&r)||(i[a]=fe(s,e)):l<=e&&(t.expiredLanes|=s),o&=~s}}(t,e);var r=de(t,t===Pl?Ll:0);if(0===r)null!==n&&Gt(n),t.callbackNode=null,t.callbackPriority=0;else if(e=r&-r,t.callbackPriority!==e){if(null!=n&&Gt(n),1===e)0===t.tag?function(t){Fi=!0,Vi(t)}(lc.bind(null,t)):Vi(lc.bind(null,t)),ai((function(){0==(6&Ml)&&Ui()})),n=null;else{switch(xe(r)){case 1:n=Zt;break;case 4:n=te;break;case 16:default:n=ee;break;case 536870912:n=re}n=Pc(n,ic.bind(null,t))}t.callbackPriority=e,t.callbackNode=n}}function ic(t,e){if(Kl=-1,Zl=0,0!=(6&Ml))throw Error(o(327));var n=t.callbackNode;if(wc()&&t.callbackNode!==n)return null;var r=de(t,t===Pl?Ll:0);if(0===r)return null;if(0!=(30&r)||0!=(r&t.expiredLanes)||e)e=gc(t,r);else{e=r;var i=Ml;Ml|=2;var a=pc();for(Pl===t&&Ll===e||(Wl=null,Ul=Xt()+500,dc(t,e));;)try{vc();break}catch(e){fc(t,e)}wo(),kl.current=a,Ml=i,null!==Tl?e=0:(Pl=null,Ll=0,e=Rl)}if(0!==e){if(2===e&&0!==(i=pe(t))&&(r=i,e=oc(t,i)),1===e)throw n=Ol,dc(t,0),sc(t,r),rc(t,Xt()),n;if(6===e)sc(t,r);else{if(i=t.current.alternate,0==(30&r)&&!function(t){for(var e=t;;){if(16384&e.flags){var n=e.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!sr(o(),i))return!1}catch(t){return!1}}}if(n=e.child,16384&e.subtreeFlags&&null!==n)n.return=e,e=n;else{if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}(i)&&(2===(e=gc(t,r))&&0!==(a=pe(t))&&(r=a,e=oc(t,a)),1===e))throw n=Ol,dc(t,0),sc(t,r),rc(t,Xt()),n;switch(t.finishedWork=i,t.finishedLanes=r,e){case 0:case 1:throw Error(o(345));case 2:case 5:Ac(t,jl,Wl);break;case 3:if(sc(t,r),(130023424&r)===r&&10<(e=Vl+500-Xt())){if(0!==de(t,0))break;if(((i=t.suspendedLanes)&r)!==r){tc(),t.pingedLanes|=t.suspendedLanes&i;break}t.timeoutHandle=ri(Ac.bind(null,t,jl,Wl),e);break}Ac(t,jl,Wl);break;case 4:if(sc(t,r),(4194240&r)===r)break;for(e=t.eventTimes,i=-1;0<r;){var s=31-ae(r);a=1<<s,(s=e[s])>i&&(i=s),r&=~a}if(r=i,10<(r=(120>(r=Xt()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*_l(r/1960))-r)){t.timeoutHandle=ri(Ac.bind(null,t,jl,Wl),r);break}Ac(t,jl,Wl);break;default:throw Error(o(329))}}}return rc(t,Xt()),t.callbackNode===n?ic.bind(null,t):null}function oc(t,e){var n=Fl;return t.current.memoizedState.isDehydrated&&(dc(t,e).flags|=256),2!==(t=gc(t,e))&&(e=jl,jl=n,null!==e&&ac(e)),t}function ac(t){null===jl?jl=t:jl.push.apply(jl,t)}function sc(t,e){for(e&=~zl,e&=~Nl,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-ae(e),r=1<<n;t[n]=-1,e&=~r}}function lc(t){if(0!=(6&Ml))throw Error(o(327));wc();var e=de(t,0);if(0==(1&e))return rc(t,Xt()),null;var n=gc(t,e);if(0!==t.tag&&2===n){var r=pe(t);0!==r&&(e=r,n=oc(t,r))}if(1===n)throw n=Ol,dc(t,0),sc(t,e),rc(t,Xt()),n;if(6===n)throw Error(o(345));return t.finishedWork=t.current.alternate,t.finishedLanes=e,Ac(t,jl,Wl),rc(t,Xt()),null}function cc(t,e){var n=Ml;Ml|=1;try{return t(e)}finally{0===(Ml=n)&&(Ul=Xt()+500,Fi&&Ui())}}function uc(t){null!==Gl&&0===Gl.tag&&0==(6&Ml)&&wc();var e=Ml;Ml|=1;var n=El.transition,r=be;try{if(El.transition=null,be=1,t)return t()}finally{be=r,El.transition=n,0==(6&(Ml=e))&&Ui()}}function hc(){Il=Dl.current,ki(Dl)}function dc(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,ii(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(eo(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Di();break;case 3:oa(),ki(Pi),ki(Mi),ha();break;case 5:sa(r);break;case 4:oa();break;case 13:case 19:ki(la);break;case 10:Co(r.type._context);break;case 22:case 23:hc()}n=n.return}if(Pl=t,Tl=t=Dc(t.current,null),Ll=Il=e,Rl=0,Ol=null,zl=Nl=Bl=0,jl=Fl=null,null!==Eo){for(e=0;e<Eo.length;e++)if(null!==(r=(n=Eo[e]).interleaved)){n.interleaved=null;var i=r.next,o=n.pending;if(null!==o){var a=o.next;o.next=i,r.next=a}n.pending=r}Eo=null}return t}function fc(t,e){for(;;){var n=Tl;try{if(wo(),da.current=as,va){for(var r=ma.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}va=!1}if(pa=0,ya=ga=ma=null,ba=!1,xa=0,Sl.current=null,null===n||null===n.return){Rl=1,Ol=e,Tl=null;break}t:{var a=t,s=n.return,l=n,c=e;if(e=Ll,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,h=l,d=h.tag;if(0==(1&h.mode)&&(0===d||11===d||15===d)){var f=h.alternate;f?(h.updateQueue=f.updateQueue,h.memoizedState=f.memoizedState,h.lanes=f.lanes):(h.updateQueue=null,h.memoizedState=null)}var p=ys(s);if(null!==p){p.flags&=-257,vs(p,s,l,0,e),1&p.mode&&gs(a,u,e),c=u;var m=(e=p).updateQueue;if(null===m){var g=new Set;g.add(c),e.updateQueue=g}else m.add(c);break t}if(0==(1&e)){gs(a,u,e),mc();break t}c=Error(o(426))}else if(io&&1&l.mode){var y=ys(s);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),vs(y,s,l,0,e),mo(us(c,l));break t}}a=c=us(c,l),4!==Rl&&(Rl=2),null===Fl?Fl=[a]:Fl.push(a),a=s;do{switch(a.tag){case 3:a.flags|=65536,e&=-e,a.lanes|=e,No(a,ps(0,c,e));break t;case 1:l=c;var v=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Yl||!Yl.has(b)))){a.flags|=65536,e&=-e,a.lanes|=e,No(a,ms(a,l,e));break t}}a=a.return}while(null!==a)}xc(n)}catch(t){e=t,Tl===n&&null!==n&&(Tl=n=n.return);continue}break}}function pc(){var t=kl.current;return kl.current=as,null===t?as:t}function mc(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===Pl||0==(268435455&Bl)&&0==(268435455&Nl)||sc(Pl,Ll)}function gc(t,e){var n=Ml;Ml|=2;var r=pc();for(Pl===t&&Ll===e||(Wl=null,dc(t,e));;)try{yc();break}catch(e){fc(t,e)}if(wo(),Ml=n,kl.current=r,null!==Tl)throw Error(o(261));return Pl=null,Ll=0,Rl}function yc(){for(;null!==Tl;)bc(Tl)}function vc(){for(;null!==Tl&&!Qt();)bc(Tl)}function bc(t){var e=Cl(t.alternate,t,Il);t.memoizedProps=t.pendingProps,null===e?xc(t):Tl=e,Sl.current=null}function xc(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(32768&e.flags)){if(null!==(n=qs(n,e,Il)))return void(Tl=n)}else{if(null!==(n=Gs(n,e)))return n.flags&=32767,void(Tl=n);if(null===t)return Rl=6,void(Tl=null);t.flags|=32768,t.subtreeFlags=0,t.deletions=null}if(null!==(e=e.sibling))return void(Tl=e);Tl=e=t}while(null!==e);0===Rl&&(Rl=5)}function Ac(t,e,n){var r=be,i=El.transition;try{El.transition=null,be=1,function(t,e,n,r){do{wc()}while(null!==Gl);if(0!=(6&Ml))throw Error(o(327));n=t.finishedWork;var i=t.finishedLanes;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(o(177));t.callbackNode=null,t.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(t,e){var n=t.pendingLanes&~e;t.pendingLanes=e,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=e,t.mutableReadLanes&=e,t.entangledLanes&=e,e=t.entanglements;var r=t.eventTimes;for(t=t.expirationTimes;0<n;){var i=31-ae(n),o=1<<i;e[i]=0,r[i]=-1,t[i]=-1,n&=~o}}(t,a),t===Pl&&(Tl=Pl=null,Ll=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||ql||(ql=!0,Pc(ee,(function(){return wc(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=El.transition,El.transition=null;var s=be;be=1;var l=Ml;Ml|=4,Sl.current=null,function(t,e){if(ti=$e,fr(t=dr())){if("selectionStart"in t)var n={start:t.selectionStart,end:t.selectionEnd};else t:{var r=(n=(n=t.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(t){n=null;break t}var s=0,l=-1,c=-1,u=0,h=0,d=t,f=null;e:for(;;){for(var p;d!==n||0!==i&&3!==d.nodeType||(l=s+i),d!==a||0!==r&&3!==d.nodeType||(c=s+r),3===d.nodeType&&(s+=d.nodeValue.length),null!==(p=d.firstChild);)f=d,d=p;for(;;){if(d===t)break e;if(f===n&&++u===i&&(l=s),f===a&&++h===r&&(c=s),null!==(p=d.nextSibling))break;f=(d=f).parentNode}d=p}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ei={focusedElem:t,selectionRange:n},$e=!1,Ks=e;null!==Ks;)if(t=(e=Ks).child,0!=(1028&e.subtreeFlags)&&null!==t)t.return=e,Ks=t;else for(;null!==Ks;){e=Ks;try{var m=e.alternate;if(0!=(1024&e.flags))switch(e.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=e.stateNode,b=v.getSnapshotBeforeUpdate(e.elementType===e.type?g:yo(e.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var x=e.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(o(163))}}catch(t){_c(e,e.return,t)}if(null!==(t=e.sibling)){t.return=e.return,Ks=t;break}Ks=e.return}m=el,el=!1}(t,n),gl(n,t),pr(ei),$e=!!ti,ei=ti=null,t.current=n,vl(n,t,i),Jt(),Ml=l,be=s,El.transition=a}else t.current=n;if(ql&&(ql=!1,Gl=t,Ql=i),0===(a=t.pendingLanes)&&(Yl=null),function(t){if(oe&&"function"==typeof oe.onCommitFiberRoot)try{oe.onCommitFiberRoot(ie,t,void 0,128==(128&t.current.flags))}catch(t){}}(n.stateNode),rc(t,Xt()),null!==e)for(r=t.onRecoverableError,n=0;n<e.length;n++)r((i=e[n]).value,{componentStack:i.stack,digest:i.digest});if($l)throw $l=!1,t=Hl,Hl=null,t;0!=(1&Ql)&&0!==t.tag&&wc(),0!=(1&(a=t.pendingLanes))?t===Xl?Jl++:(Jl=0,Xl=t):Jl=0,Ui()}(t,e,n,r)}finally{El.transition=i,be=r}return null}function wc(){if(null!==Gl){var t=xe(Ql),e=El.transition,n=be;try{if(El.transition=null,be=16>t?16:t,null===Gl)var r=!1;else{if(t=Gl,Gl=null,Ql=0,0!=(6&Ml))throw Error(o(331));var i=Ml;for(Ml|=4,Ks=t.current;null!==Ks;){var a=Ks,s=a.child;if(0!=(16&Ks.flags)){var l=a.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Ks=u;null!==Ks;){var h=Ks;switch(h.tag){case 0:case 11:case 15:nl(8,h,a)}var d=h.child;if(null!==d)d.return=h,Ks=d;else for(;null!==Ks;){var f=(h=Ks).sibling,p=h.return;if(ol(h),h===u){Ks=null;break}if(null!==f){f.return=p,Ks=f;break}Ks=p}}}var m=a.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Ks=a}}if(0!=(2064&a.subtreeFlags)&&null!==s)s.return=a,Ks=s;else t:for(;null!==Ks;){if(0!=(2048&(a=Ks).flags))switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var v=a.sibling;if(null!==v){v.return=a.return,Ks=v;break t}Ks=a.return}}var b=t.current;for(Ks=b;null!==Ks;){var x=(s=Ks).child;if(0!=(2064&s.subtreeFlags)&&null!==x)x.return=s,Ks=x;else t:for(s=b;null!==Ks;){if(0!=(2048&(l=Ks).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(t){_c(l,l.return,t)}if(l===s){Ks=null;break t}var A=l.sibling;if(null!==A){A.return=l.return,Ks=A;break t}Ks=l.return}}if(Ml=i,Ui(),oe&&"function"==typeof oe.onPostCommitFiberRoot)try{oe.onPostCommitFiberRoot(ie,t)}catch(t){}r=!0}return r}finally{be=n,El.transition=e}}return!1}function Cc(t,e,n){t=Oo(t,e=ps(0,e=us(n,e),1),1),e=tc(),null!==t&&(ye(t,1,e),rc(t,e))}function _c(t,e,n){if(3===t.tag)Cc(t,t,n);else for(;null!==e;){if(3===e.tag){Cc(e,t,n);break}if(1===e.tag){var r=e.stateNode;if("function"==typeof e.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r))){e=Oo(e,t=ms(e,t=us(n,t),1),1),t=tc(),null!==e&&(ye(e,1,t),rc(e,t));break}}e=e.return}}function kc(t,e,n){var r=t.pingCache;null!==r&&r.delete(e),e=tc(),t.pingedLanes|=t.suspendedLanes&n,Pl===t&&(Ll&n)===n&&(4===Rl||3===Rl&&(130023424&Ll)===Ll&&500>Xt()-Vl?dc(t,0):zl|=n),rc(t,e)}function Sc(t,e){0===e&&(0==(1&t.mode)?e=1:(e=ue,0==(130023424&(ue<<=1))&&(ue=4194304)));var n=tc();null!==(t=To(t,e))&&(ye(t,e,n),rc(t,n))}function Ec(t){var e=t.memoizedState,n=0;null!==e&&(n=e.retryLane),Sc(t,n)}function Mc(t,e){var n=0;switch(t.tag){case 13:var r=t.stateNode,i=t.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=t.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(e),Sc(t,n)}function Pc(t,e){return qt(t,e)}function Tc(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Lc(t,e,n,r){return new Tc(t,e,n,r)}function Ic(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Dc(t,e){var n=t.alternate;return null===n?((n=Lc(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&t.flags,n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Rc(t,e,n,r,i,a){var s=2;if(r=t,"function"==typeof t)Ic(t)&&(s=1);else if("string"==typeof t)s=5;else t:switch(t){case C:return Oc(n.children,i,a,e);case _:s=8,i|=8;break;case k:return(t=Lc(12,n,e,2|i)).elementType=k,t.lanes=a,t;case P:return(t=Lc(13,n,e,i)).elementType=P,t.lanes=a,t;case T:return(t=Lc(19,n,e,i)).elementType=T,t.lanes=a,t;case D:return Bc(n,i,a,e);default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case S:s=10;break t;case E:s=9;break t;case M:s=11;break t;case L:s=14;break t;case I:s=16,r=null;break t}throw Error(o(130,null==t?t:typeof t,""))}return(e=Lc(s,n,e,i)).elementType=t,e.type=r,e.lanes=a,e}function Oc(t,e,n,r){return(t=Lc(7,t,r,e)).lanes=n,t}function Bc(t,e,n,r){return(t=Lc(22,t,r,e)).elementType=D,t.lanes=n,t.stateNode={isHidden:!1},t}function Nc(t,e,n){return(t=Lc(6,t,null,e)).lanes=n,t}function zc(t,e,n){return(e=Lc(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Fc(t,e,n,r,i){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ge(0),this.expirationTimes=ge(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ge(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function jc(t,e,n,r,i,o,a,s,l){return t=new Fc(t,e,n,s,l),1===e?(e=1,!0===o&&(e|=8)):e=0,o=Lc(3,null,null,e),t.current=o,o.stateNode=t,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Io(o),t}function Vc(t,e,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:t,containerInfo:e,implementation:n}}function Uc(t){if(!t)return Ei;t:{if(Ut(t=t._reactInternals)!==t||1!==t.tag)throw Error(o(170));var e=t;do{switch(e.tag){case 3:e=e.stateNode.context;break t;case 1:if(Ii(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break t}}e=e.return}while(null!==e);throw Error(o(171))}if(1===t.tag){var n=t.type;if(Ii(n))return Oi(t,n,e)}return e}function Wc(t,e,n,r,i,o,a,s,l){return(t=jc(n,r,!0,t,0,o,0,s,l)).context=Uc(null),n=t.current,(o=Ro(r=tc(),i=ec(n))).callback=null!=e?e:null,Oo(n,o,i),t.current.lanes=i,ye(t,i,r),rc(t,r),t}function $c(t,e,n,r){var i=e.current,o=tc(),a=ec(i);return n=Uc(n),null===e.context?e.context=n:e.pendingContext=n,(e=Ro(o,a)).payload={element:t},null!==(r=void 0===r?null:r)&&(e.callback=r),null!==(t=Oo(i,e,a))&&(nc(t,i,a,o),Bo(t,i,a)),a}function Hc(t){return(t=t.current).child?(t.child.tag,t.child.stateNode):null}function Yc(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function qc(t,e){Yc(t,e),(t=t.alternate)&&Yc(t,e)}Cl=function(t,e,n){if(null!==t)if(t.memoizedProps!==e.pendingProps||Pi.current)xs=!0;else{if(0==(t.lanes&n)&&0==(128&e.flags))return xs=!1,function(t,e,n){switch(e.tag){case 3:Ts(e),po();break;case 5:aa(e);break;case 1:Ii(e.type)&&Bi(e);break;case 4:ia(e,e.stateNode.containerInfo);break;case 10:var r=e.type._context,i=e.memoizedProps.value;Si(vo,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=e.memoizedState))return null!==r.dehydrated?(Si(la,1&la.current),e.flags|=128,null):0!=(n&e.child.childLanes)?Ns(t,e,n):(Si(la,1&la.current),null!==(t=$s(t,e,n))?t.sibling:null);Si(la,1&la.current);break;case 19:if(r=0!=(n&e.childLanes),0!=(128&t.flags)){if(r)return Us(t,e,n);e.flags|=128}if(null!==(i=e.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Si(la,la.current),r)break;return null;case 22:case 23:return e.lanes=0,ks(t,e,n)}return $s(t,e,n)}(t,e,n);xs=0!=(131072&t.flags)}else xs=!1,io&&0!=(1048576&e.flags)&&Zi(e,Yi,e.index);switch(e.lanes=0,e.tag){case 2:var r=e.type;Ws(t,e),t=e.pendingProps;var i=Li(e,Mi.current);ko(e,n),i=_a(null,e,r,t,i,n);var a=ka();return e.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(e.tag=1,e.memoizedState=null,e.updateQueue=null,Ii(r)?(a=!0,Bi(e)):a=!1,e.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Io(e),i.updater=Uo,e.stateNode=i,i._reactInternals=e,Yo(e,r,t,n),e=Ps(null,e,r,!0,a,n)):(e.tag=0,io&&a&&to(e),As(null,e,i,n),e=e.child),e;case 16:r=e.elementType;t:{switch(Ws(t,e),t=e.pendingProps,r=(i=r._init)(r._payload),e.type=r,i=e.tag=function(t){if("function"==typeof t)return Ic(t)?1:0;if(null!=t){if((t=t.$$typeof)===M)return 11;if(t===L)return 14}return 2}(r),t=yo(r,t),i){case 0:e=Es(null,e,r,t,n);break t;case 1:e=Ms(null,e,r,t,n);break t;case 11:e=ws(null,e,r,t,n);break t;case 14:e=Cs(null,e,r,yo(r.type,t),n);break t}throw Error(o(306,r,""))}return e;case 0:return r=e.type,i=e.pendingProps,Es(t,e,r,i=e.elementType===r?i:yo(r,i),n);case 1:return r=e.type,i=e.pendingProps,Ms(t,e,r,i=e.elementType===r?i:yo(r,i),n);case 3:t:{if(Ts(e),null===t)throw Error(o(387));r=e.pendingProps,i=(a=e.memoizedState).element,Do(t,e),zo(e,r,null,n);var s=e.memoizedState;if(r=s.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},e.updateQueue.baseState=a,e.memoizedState=a,256&e.flags){e=Ls(t,e,r,n,i=us(Error(o(423)),e));break t}if(r!==i){e=Ls(t,e,r,n,i=us(Error(o(424)),e));break t}for(ro=ci(e.stateNode.containerInfo.firstChild),no=e,io=!0,oo=null,n=Ko(e,null,r,n),e.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(po(),r===i){e=$s(t,e,n);break t}As(t,e,r,n)}e=e.child}return e;case 5:return aa(e),null===t&&co(e),r=e.type,i=e.pendingProps,a=null!==t?t.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==a&&ni(r,a)&&(e.flags|=32),Ss(t,e),As(t,e,s,n),e.child;case 6:return null===t&&co(e),null;case 13:return Ns(t,e,n);case 4:return ia(e,e.stateNode.containerInfo),r=e.pendingProps,null===t?e.child=Xo(e,null,r,n):As(t,e,r,n),e.child;case 11:return r=e.type,i=e.pendingProps,ws(t,e,r,i=e.elementType===r?i:yo(r,i),n);case 7:return As(t,e,e.pendingProps,n),e.child;case 8:case 12:return As(t,e,e.pendingProps.children,n),e.child;case 10:t:{if(r=e.type._context,i=e.pendingProps,a=e.memoizedProps,s=i.value,Si(vo,r._currentValue),r._currentValue=s,null!==a)if(sr(a.value,s)){if(a.children===i.children&&!Pi.current){e=$s(t,e,n);break t}}else for(null!==(a=e.child)&&(a.return=e);null!==a;){var l=a.dependencies;if(null!==l){s=a.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=Ro(-1,n&-n)).tag=2;var u=a.updateQueue;if(null!==u){var h=(u=u.shared).pending;null===h?c.next=c:(c.next=h.next,h.next=c),u.pending=c}}a.lanes|=n,null!==(c=a.alternate)&&(c.lanes|=n),_o(a.return,n,e),l.lanes|=n;break}c=c.next}}else if(10===a.tag)s=a.type===e.type?null:a.child;else if(18===a.tag){if(null===(s=a.return))throw Error(o(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),_o(s,n,e),s=a.sibling}else s=a.child;if(null!==s)s.return=a;else for(s=a;null!==s;){if(s===e){s=null;break}if(null!==(a=s.sibling)){a.return=s.return,s=a;break}s=s.return}a=s}As(t,e,i.children,n),e=e.child}return e;case 9:return i=e.type,r=e.pendingProps.children,ko(e,n),r=r(i=So(i)),e.flags|=1,As(t,e,r,n),e.child;case 14:return i=yo(r=e.type,e.pendingProps),Cs(t,e,r,i=yo(r.type,i),n);case 15:return _s(t,e,e.type,e.pendingProps,n);case 17:return r=e.type,i=e.pendingProps,i=e.elementType===r?i:yo(r,i),Ws(t,e),e.tag=1,Ii(r)?(t=!0,Bi(e)):t=!1,ko(e,n),$o(e,r,i),Yo(e,r,i,n),Ps(null,e,r,!0,t,n);case 19:return Us(t,e,n);case 22:return ks(t,e,n)}throw Error(o(156,e.tag))};var Gc="function"==typeof reportError?reportError:function(t){console.error(t)};function Qc(t){this._internalRoot=t}function Jc(t){this._internalRoot=t}function Xc(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)}function Kc(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function Zc(){}function tu(t,e,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if("function"==typeof i){var s=i;i=function(){var t=Hc(a);s.call(t)}}$c(e,a,t,i)}else a=function(t,e,n,r,i){if(i){if("function"==typeof r){var o=r;r=function(){var t=Hc(a);o.call(t)}}var a=Wc(e,r,t,0,null,!1,0,"",Zc);return t._reactRootContainer=a,t[pi]=a.current,Ur(8===t.nodeType?t.parentNode:t),uc(),a}for(;i=t.lastChild;)t.removeChild(i);if("function"==typeof r){var s=r;r=function(){var t=Hc(l);s.call(t)}}var l=jc(t,0,!1,null,0,!1,0,"",Zc);return t._reactRootContainer=l,t[pi]=l.current,Ur(8===t.nodeType?t.parentNode:t),uc((function(){$c(e,l,n,r)})),l}(n,e,t,i,r);return Hc(a)}Jc.prototype.render=Qc.prototype.render=function(t){var e=this._internalRoot;if(null===e)throw Error(o(409));$c(t,e,null,null)},Jc.prototype.unmount=Qc.prototype.unmount=function(){var t=this._internalRoot;if(null!==t){this._internalRoot=null;var e=t.containerInfo;uc((function(){$c(null,t,null,null)})),e[pi]=null}},Jc.prototype.unstable_scheduleHydration=function(t){if(t){var e=_e();t={blockedOn:null,target:t,priority:e};for(var n=0;n<De.length&&0!==e&&e<De[n].priority;n++);De.splice(n,0,t),0===n&&Ne(t)}},Ae=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.current.memoizedState.isDehydrated){var n=he(e.pendingLanes);0!==n&&(ve(e,1|n),rc(e,Xt()),0==(6&Ml)&&(Ul=Xt()+500,Ui()))}break;case 13:uc((function(){var e=To(t,1);if(null!==e){var n=tc();nc(e,t,1,n)}})),qc(t,1)}},we=function(t){if(13===t.tag){var e=To(t,134217728);null!==e&&nc(e,t,134217728,tc()),qc(t,134217728)}},Ce=function(t){if(13===t.tag){var e=ec(t),n=To(t,e);null!==n&&nc(n,t,e,tc()),qc(t,e)}},_e=function(){return be},ke=function(t,e){var n=be;try{return be=t,e()}finally{be=n}},wt=function(t,e,n){switch(e){case"input":if(K(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var i=Ai(r);if(!i)throw Error(o(90));q(r),K(r,i)}}}break;case"textarea":ot(t,n);break;case"select":null!=(e=n.value)&&nt(t,!!n.multiple,e,!1)}},Mt=cc,Pt=uc;var eu={usingClientEntryPoint:!1,Events:[bi,xi,Ai,St,Et,cc]},nu={findFiberByHostInstance:vi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=Ht(t))?null:t.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var iu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!iu.isDisabled&&iu.supportsFiber)try{ie=iu.inject(ru),oe=iu}catch(ut){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,e.createPortal=function(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(e))throw Error(o(200));return Vc(t,e,null,n)},e.createRoot=function(t,e){if(!Xc(t))throw Error(o(299));var n=!1,r="",i=Gc;return null!=e&&(!0===e.unstable_strictMode&&(n=!0),void 0!==e.identifierPrefix&&(r=e.identifierPrefix),void 0!==e.onRecoverableError&&(i=e.onRecoverableError)),e=jc(t,1,!1,null,0,n,0,r,i),t[pi]=e.current,Ur(8===t.nodeType?t.parentNode:t),new Qc(e)},e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(o(188));throw t=Object.keys(t).join(","),Error(o(268,t))}return null===(t=Ht(e))?null:t.stateNode},e.flushSync=function(t){return uc(t)},e.hydrate=function(t,e,n){if(!Kc(e))throw Error(o(200));return tu(null,t,e,!0,n)},e.hydrateRoot=function(t,e,n){if(!Xc(t))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,i=!1,a="",s=Gc;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),e=Wc(e,null,t,1,null!=n?n:null,i,0,a,s),t[pi]=e.current,Ur(t),r)for(t=0;t<r.length;t++)i=(i=(n=r[t])._getVersion)(n._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[n,i]:e.mutableSourceEagerHydrationData.push(n,i);return new Jc(e)},e.render=function(t,e,n){if(!Kc(e))throw Error(o(200));return tu(null,t,e,!1,n)},e.unmountComponentAtNode=function(t){if(!Kc(t))throw Error(o(40));return!!t._reactRootContainer&&(uc((function(){tu(null,null,t,!1,(function(){t._reactRootContainer=null,t[pi]=null}))})),!0)},e.unstable_batchedUpdates=cc,e.unstable_renderSubtreeIntoContainer=function(t,e,n,r){if(!Kc(n))throw Error(o(200));if(null==t||void 0===t._reactInternals)throw Error(o(38));return tu(t,e,n,!1,r)},e.version="18.2.0-next-9e3b772b8-20220608"},745:(t,e,n)=>{"use strict";var r=n(935);e.createRoot=r.createRoot,e.hydrateRoot=r.hydrateRoot},935:(t,e,n)=>{"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(448)},186:(t,e,n)=>{function r(t,e){return r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},r(t,e)}var i=n(294),o=n(697),a=[];var s=function(t){var e,n;function i(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).state={animationIndex:0,animationLoop:null,animationRunning:!1},e}n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,r(e,n),i.getActiveInstance=function(){return i.mountedInstances[i.mountedInstances.length-1]},i.draw=function(){if("undefined"!=typeof document){var t,e=i.getActiveInstance();if(0===a.length){var n=document.getElementsByTagName("head")[0],r=document.createElement("link");r.type="image/x-icon",r.rel="icon";var o=document.createElement("link");o.rel="apple-touch-icon",a.push(r,o);for(var s=n.getElementsByTagName("link"),l=s.length;--l>=0;)/\bicon\b/i.test(s[l].getAttribute("rel"))&&!e.props.keepIconLink(s[l])&&n.removeChild(s[l]);a.forEach((function(t){return n.appendChild(t)}))}t=e.props.url instanceof Array?e.props.url[e.state.animationIndex]:e.props.url,e.props.alertCount||e.props.renderOverlay?(c={alertCount:e.props.alertCount,alertFillColor:e.props.alertFillColor,alertTextColor:e.props.alertTextColor,callback:function(t){a.forEach((function(e){return e.href=t}))},renderOverlay:e.props.renderOverlay,url:t,canvasSize:e.props.iconSize},u=c.alertCount,h=c.alertFillColor,d=c.alertTextColor,f=c.callback,p=c.renderOverlay,m=c.url,g=c.canvasSize,(y=document.createElement("img")).crossOrigin="Anonymous",y.onload=function(){var t=document.createElement("canvas");t.width=g,t.height=g;var e=t.getContext("2d");e.clearRect(0,0,y.width,y.height),e.drawImage(y,0,0,t.width,t.height),u&&function(t,e){var n=e.fillColor,r=e.text,i=e.textColor,o=e.canvasSize,a=o/5;t.font="bold "+(o-2*a)+"px arial";var s=Math.min(t.measureText(r).width,o-a)+a,l=o-s,c=o/2-a,u=a+o/2,h=Math.min(s/2,u/2);t.beginPath(),t.moveTo(l+h,c),t.arcTo(l+s,c,l+s,c+u,h),t.arcTo(l+s,c+u,l,c+u,h),t.arcTo(l,c+u,l,c,h),t.arcTo(l,c,l+s,c,h),t.closePath(),t.fillStyle=n,t.fill(),t.fillStyle=i,t.textBaseline="bottom",t.textAlign="right",t.fillText(r,o-a/2,o,o-a)}(e,{fillColor:h,textColor:d,text:u,canvasSize:g}),p&&p(t,e),f(e.canvas.toDataURL())},y.src=m):a.forEach((function(e){return e.href=t}))}var c,u,h,d,f,p,m,g,y},i.update=function(){if("undefined"!=typeof document){var t=i.getActiveInstance(),e=t.props.url instanceof Array&&t.props.animated,n=null;if(clearInterval(t.state.animationLoop),e){var r=function(){var e=(t.state.animationIndex+1)%t.props.url.length;i.draw(),t.setState({animationIndex:e})};n=setInterval(r,t.props.animationDelay),r()}else i.draw();t.setState({animationLoop:n})}};var o=i.prototype;return o.componentDidMount=function(){i.mountedInstances.push(this),i.update()},o.componentWillUnmount=function(){var t=i.getActiveInstance();clearInterval(t.state.animationLoop)},o.componentDidUpdate=function(t){t.url===this.props.url&&t.animated===this.props.animated&&t.alertCount===this.props.alertCount&&t.alertFillColor===this.props.alertFillColor&&t.alertTextColor===this.props.alertTextColor&&t.renderOverlay===this.props.renderOverlay&&t.keepIconLink===this.props.keepIconLink&&t.iconSize===this.props.iconSize||i.update()},o.render=function(){return null},i}(i.Component);s.displayName="Favicon",s.mountedInstances=[],s.defaultProps={iconSize:16,alertCount:null,alertFillColor:"red",alertTextColor:"white",animated:!0,animationDelay:500,keepIconLink:function(){return!1},renderOverlay:null,url:null},s.propTypes={iconSize:o.number,alertCount:o.oneOfType([o.number,o.string]),alertFillColor:o.string,alertTextColor:o.string,animated:o.bool,animationDelay:o.number,keepIconLink:o.func,renderOverlay:o.func,url:o.oneOfType([o.arrayOf(o.string),o.string]).isRequired},t.exports=s},408:(t,e)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),h=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}function v(){}function b(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}y.prototype.isReactComponent={},y.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")},y.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},v.prototype=y.prototype;var x=b.prototype=new v;x.constructor=b,m(x,y.prototype),x.isPureReactComponent=!0;var A=Array.isArray,w=Object.prototype.hasOwnProperty,C={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,r){var i,o={},a=null,s=null;if(null!=e)for(i in void 0!==e.ref&&(s=e.ref),void 0!==e.key&&(a=""+e.key),e)w.call(e,i)&&!_.hasOwnProperty(i)&&(o[i]=e[i]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(t&&t.defaultProps)for(i in l=t.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:n,type:t,key:a,ref:s,props:o,_owner:C.current}}function S(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var E=/\/+/g;function M(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function P(t,e,i,o,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=t),t=""===o?"."+M(l,0):o,A(a)?(i="",null!=t&&(i=t.replace(E,"$&/")+"/"),P(a,e,i,"",(function(t){return t}))):null!=a&&(S(a)&&(a=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,i+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+t)),e.push(a)),1;if(l=0,o=""===o?".":o+":",A(t))for(var c=0;c<t.length;c++){var u=o+M(s=t[c],c);l+=P(s,e,i,u,a)}else if(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=f&&t[f]||t["@@iterator"])?t:null}(t),"function"==typeof u)for(t=u.call(t),c=0;!(s=t.next()).done;)l+=P(s=s.value,e,i,u=o+M(s,c++),a);else if("object"===s)throw e=String(t),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return l}function T(t,e,n){if(null==t)return t;var r=[],i=0;return P(t,r,"","",(function(t){return e.call(n,t,i++)})),r}function L(t){if(-1===t._status){var e=t._result;(e=e()).then((function(e){0!==t._status&&-1!==t._status||(t._status=1,t._result=e)}),(function(e){0!==t._status&&-1!==t._status||(t._status=2,t._result=e)})),-1===t._status&&(t._status=0,t._result=e)}if(1===t._status)return t._result.default;throw t._result}var I={current:null},D={transition:null},R={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:D,ReactCurrentOwner:C};e.Children={map:T,forEach:function(t,e,n){T(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return T(t,(function(){e++})),e},toArray:function(t){return T(t,(function(t){return t}))||[]},only:function(t){if(!S(t))throw Error("React.Children.only expected to receive a single React element child.");return t}},e.Component=y,e.Fragment=i,e.Profiler=a,e.PureComponent=b,e.StrictMode=o,e.Suspense=u,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,e.cloneElement=function(t,e,r){if(null==t)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var i=m({},t.props),o=t.key,a=t.ref,s=t._owner;if(null!=e){if(void 0!==e.ref&&(a=e.ref,s=C.current),void 0!==e.key&&(o=""+e.key),t.type&&t.type.defaultProps)var l=t.type.defaultProps;for(c in e)w.call(e,c)&&!_.hasOwnProperty(c)&&(i[c]=void 0===e[c]&&void 0!==l?l[c]:e[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}return{$$typeof:n,type:t.type,key:o,ref:a,props:i,_owner:s}},e.createContext=function(t){return(t={$$typeof:l,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:t},t.Consumer=t},e.createElement=k,e.createFactory=function(t){var e=k.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:c,render:t}},e.isValidElement=S,e.lazy=function(t){return{$$typeof:d,_payload:{_status:-1,_result:t},_init:L}},e.memo=function(t,e){return{$$typeof:h,type:t,compare:void 0===e?null:e}},e.startTransition=function(t){var e=D.transition;D.transition={};try{t()}finally{D.transition=e}},e.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},e.useCallback=function(t,e){return I.current.useCallback(t,e)},e.useContext=function(t){return I.current.useContext(t)},e.useDebugValue=function(){},e.useDeferredValue=function(t){return I.current.useDeferredValue(t)},e.useEffect=function(t,e){return I.current.useEffect(t,e)},e.useId=function(){return I.current.useId()},e.useImperativeHandle=function(t,e,n){return I.current.useImperativeHandle(t,e,n)},e.useInsertionEffect=function(t,e){return I.current.useInsertionEffect(t,e)},e.useLayoutEffect=function(t,e){return I.current.useLayoutEffect(t,e)},e.useMemo=function(t,e){return I.current.useMemo(t,e)},e.useReducer=function(t,e,n){return I.current.useReducer(t,e,n)},e.useRef=function(t){return I.current.useRef(t)},e.useState=function(t){return I.current.useState(t)},e.useSyncExternalStore=function(t,e,n){return I.current.useSyncExternalStore(t,e,n)},e.useTransition=function(){return I.current.useTransition()},e.version="18.2.0"},294:(t,e,n)=>{"use strict";t.exports=n(408)},53:(t,e)=>{"use strict";function n(t,e){var n=t.length;t.push(e);t:for(;0<n;){var r=n-1>>>1,i=t[r];if(!(0<o(i,e)))break t;t[r]=e,t[n]=i,n=r}}function r(t){return 0===t.length?null:t[0]}function i(t){if(0===t.length)return null;var e=t[0],n=t.pop();if(n!==e){t[0]=n;t:for(var r=0,i=t.length,a=i>>>1;r<a;){var s=2*(r+1)-1,l=t[s],c=s+1,u=t[c];if(0>o(l,n))c<i&&0>o(u,l)?(t[r]=u,t[c]=n,r=c):(t[r]=l,t[s]=n,r=s);else{if(!(c<i&&0>o(u,n)))break t;t[r]=u,t[c]=n,r=c}}}return e}function o(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();e.unstable_now=function(){return s.now()-l}}var c=[],u=[],h=1,d=null,f=3,p=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(t){for(var e=r(u);null!==e;){if(null===e.callback)i(u);else{if(!(e.startTime<=t))break;i(u),e.sortIndex=e.expirationTime,n(c,e)}e=r(u)}}function A(t){if(g=!1,x(t),!m)if(null!==r(c))m=!0,D(w);else{var e=r(u);null!==e&&R(A,e.startTime-t)}}function w(t,n){m=!1,g&&(g=!1,v(S),S=-1),p=!0;var o=f;try{for(x(n),d=r(c);null!==d&&(!(d.expirationTime>n)||t&&!P());){var a=d.callback;if("function"==typeof a){d.callback=null,f=d.priorityLevel;var s=a(d.expirationTime<=n);n=e.unstable_now(),"function"==typeof s?d.callback=s:d===r(c)&&i(c),x(n)}else i(c);d=r(c)}if(null!==d)var l=!0;else{var h=r(u);null!==h&&R(A,h.startTime-n),l=!1}return l}finally{d=null,f=o,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var C,_=!1,k=null,S=-1,E=5,M=-1;function P(){return!(e.unstable_now()-M<E)}function T(){if(null!==k){var t=e.unstable_now();M=t;var n=!0;try{n=k(!0,t)}finally{n?C():(_=!1,k=null)}}else _=!1}if("function"==typeof b)C=function(){b(T)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,I=L.port2;L.port1.onmessage=T,C=function(){I.postMessage(null)}}else C=function(){y(T,0)};function D(t){k=t,_||(_=!0,C())}function R(t,n){S=y((function(){t(e.unstable_now())}),n)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){m||p||(m=!0,D(w))},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<t?Math.floor(1e3/t):5},e.unstable_getCurrentPriorityLevel=function(){return f},e.unstable_getFirstCallbackNode=function(){return r(c)},e.unstable_next=function(t){switch(f){case 1:case 2:case 3:var e=3;break;default:e=f}var n=f;f=e;try{return t()}finally{f=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=f;f=t;try{return e()}finally{f=n}},e.unstable_scheduleCallback=function(t,i,o){var a=e.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?a+o:a,t){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return t={id:h++,callback:i,priorityLevel:t,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>a?(t.sortIndex=o,n(u,t),null===r(c)&&t===r(u)&&(g?(v(S),S=-1):g=!0,R(A,o-a))):(t.sortIndex=s,n(c,t),m||p||(m=!0,D(w))),t},e.unstable_shouldYield=P,e.unstable_wrapCallback=function(t){var e=f;return function(){var n=f;f=e;try{return t.apply(this,arguments)}finally{f=n}}}},840:(t,e,n)=>{"use strict";t.exports=n(53)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var l=t[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,h="".concat(c," ").concat(u);o[c]=u+1;var d=n(h),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=i(f,r);r.byIndex=s,e.splice(s,0,{identifier:h,updater:p,references:1})}a.push(h)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var l=r(t,i),c=0;c<o.length;c++){var u=n(o[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=l}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},r={};function i(t){var e=r[t];if(void 0!==e)return e.exports;var o=r[t]={id:t,exports:{}};return n[t](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},e=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};t=t||[null,e({}),e([]),e(e)];for(var s=2&r&&n;"object"==typeof s&&!~t.indexOf(s);s=e(s))Object.getOwnPropertyNames(s).forEach((t=>a[t]=()=>n[t]));return a.default=()=>n,i.d(o,a),o},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.p="/",i.nc=void 0,(()=>{"use strict";var t,e=i(294),n=i.t(e,2),r=i(745),o=i(186),a=i.n(o);function s(){return s=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},s.apply(this,arguments)}!function(t){t.Pop="POP",t.Push="PUSH",t.Replace="REPLACE"}(t||(t={}));const l="popstate";function c(t){return{usr:t.state,key:t.key}}function u(t,e,n,r){return void 0===n&&(n=null),s({pathname:"string"==typeof t?t:t.pathname,search:"",hash:""},"string"==typeof e?d(e):e,{state:n,key:e&&e.key||r||Math.random().toString(36).substr(2,8)})}function h(t){let{pathname:e="/",search:n="",hash:r=""}=t;return n&&"?"!==n&&(e+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(e+="#"===r.charAt(0)?r:"#"+r),e}function d(t){let e={};if(t){let n=t.indexOf("#");n>=0&&(e.hash=t.substr(n),t=t.substr(0,n));let r=t.indexOf("?");r>=0&&(e.search=t.substr(r),t=t.substr(0,r)),t&&(e.pathname=t)}return e}function f(t){let e="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:"unknown://unknown",n="string"==typeof t?t:h(t);return new URL(n,e)}var p;function m(t,e,n){return void 0===e&&(e=[]),void 0===n&&(n=new Set),t.map(((t,r)=>{let i=[...e,r],o="string"==typeof t.id?t.id:i.join("-");return k(!0!==t.index||!t.children,"Cannot specify children on an index route"),k(!n.has(o),'Found a route id collision on id "'+o+"\".  Route id's must be globally unique within Data Router usages"),n.add(o),function(t){return!0===t.index}(t)?s({},t,{id:o}):s({},t,{id:o,children:t.children?m(t.children,i,n):void 0})}))}function g(t,e,n){void 0===n&&(n="/");let r=_(("string"==typeof e?d(e):e).pathname||"/",n);if(null==r)return null;let i=y(t);!function(t){t.sort(((t,e)=>t.score!==e.score?e.score-t.score:function(t,e){return t.length===e.length&&t.slice(0,-1).every(((t,n)=>t===e[n]))?t[t.length-1]-e[e.length-1]:0}(t.routesMeta.map((t=>t.childrenIndex)),e.routesMeta.map((t=>t.childrenIndex)))))}(i);let o=null;for(let t=0;null==o&&t<i.length;++t)o=A(i[t],C(r));return o}function y(t,e,n,r){return void 0===e&&(e=[]),void 0===n&&(n=[]),void 0===r&&(r=""),t.forEach(((t,i)=>{let o={relativePath:t.path||"",caseSensitive:!0===t.caseSensitive,childrenIndex:i,route:t};o.relativePath.startsWith("/")&&(k(o.relativePath.startsWith(r),'Absolute route path "'+o.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),o.relativePath=o.relativePath.slice(r.length));let a=T([r,o.relativePath]),s=n.concat(o);t.children&&t.children.length>0&&(k(!0!==t.index,'Index routes must not have child routes. Please remove all child routes from route path "'+a+'".'),y(t.children,e,s,a)),(null!=t.path||t.index)&&e.push({path:a,score:x(a,t.index),routesMeta:s})})),e}!function(t){t.data="data",t.deferred="deferred",t.redirect="redirect",t.error="error"}(p||(p={}));const v=/^:\w+$/,b=t=>"*"===t;function x(t,e){let n=t.split("/"),r=n.length;return n.some(b)&&(r+=-2),e&&(r+=2),n.filter((t=>!b(t))).reduce(((t,e)=>t+(v.test(e)?3:""===e?1:10)),r)}function A(t,e){let{routesMeta:n}=t,r={},i="/",o=[];for(let t=0;t<n.length;++t){let a=n[t],s=t===n.length-1,l="/"===i?e:e.slice(i.length)||"/",c=w({path:a.relativePath,caseSensitive:a.caseSensitive,end:s},l);if(!c)return null;Object.assign(r,c.params);let u=a.route;o.push({params:r,pathname:T([i,c.pathname]),pathnameBase:L(T([i,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(i=T([i,c.pathnameBase]))}return o}function w(t,e){"string"==typeof t&&(t={path:t,caseSensitive:!1,end:!0});let[n,r]=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!0),S("*"===t||!t.endsWith("*")||t.endsWith("/*"),'Route path "'+t+'" will be treated as if it were "'+t.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+t.replace(/\*$/,"/*")+'".');let r=[],i="^"+t.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((t,e)=>(r.push(e),"([^\\/]+)")));return t.endsWith("*")?(r.push("*"),i+="*"===t||"/*"===t?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?i+="\\/*$":""!==t&&"/"!==t&&(i+="(?:(?=\\/|$))"),[new RegExp(i,e?void 0:"i"),r]}(t.path,t.caseSensitive,t.end),i=e.match(n);if(!i)return null;let o=i[0],a=o.replace(/(.)\/+$/,"$1"),s=i.slice(1),l=r.reduce(((t,e,n)=>{if("*"===e){let t=s[n]||"";a=o.slice(0,o.length-t.length).replace(/(.)\/+$/,"$1")}return t[e]=function(t,e){try{return decodeURIComponent(t)}catch(n){return S(!1,'The value for the URL param "'+e+'" will not be decoded because the string "'+t+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),t}}(s[n]||"",e),t}),{});return{params:l,pathname:o,pathnameBase:a,pattern:t}}function C(t){try{return decodeURI(t)}catch(e){return S(!1,'The URL path "'+t+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+e+")."),t}}function _(t,e){if("/"===e)return t;if(!t.toLowerCase().startsWith(e.toLowerCase()))return null;let n=e.endsWith("/")?e.length-1:e.length,r=t.charAt(n);return r&&"/"!==r?null:t.slice(n)||"/"}function k(t,e){if(!1===t||null==t)throw new Error(e)}function S(t,e){if(!t){"undefined"!=typeof console&&console.warn(e);try{throw new Error(e)}catch(t){}}}function E(t,e,n,r){return"Cannot include a '"+t+"' character in a manually specified `to."+e+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function M(t){return t.filter(((t,e)=>0===e||t.route.path&&t.route.path.length>0))}function P(t,e,n,r){let i;void 0===r&&(r=!1),"string"==typeof t?i=d(t):(i=s({},t),k(!i.pathname||!i.pathname.includes("?"),E("?","pathname","search",i)),k(!i.pathname||!i.pathname.includes("#"),E("#","pathname","hash",i)),k(!i.search||!i.search.includes("#"),E("#","search","hash",i)));let o,a=""===t||""===i.pathname,l=a?"/":i.pathname;if(r||null==l)o=n;else{let t=e.length-1;if(l.startsWith("..")){let e=l.split("/");for(;".."===e[0];)e.shift(),t-=1;i.pathname=e.join("/")}o=t>=0?e[t]:"/"}let c=function(t,e){void 0===e&&(e="/");let{pathname:n,search:r="",hash:i=""}="string"==typeof t?d(t):t,o=n?n.startsWith("/")?n:function(t,e){let n=e.replace(/\/+$/,"").split("/");return t.split("/").forEach((t=>{".."===t?n.length>1&&n.pop():"."!==t&&n.push(t)})),n.length>1?n.join("/"):"/"}(n,e):e;return{pathname:o,search:I(r),hash:D(i)}}(i,o),u=l&&"/"!==l&&l.endsWith("/"),h=(a||"."===l)&&n.endsWith("/");return c.pathname.endsWith("/")||!u&&!h||(c.pathname+="/"),c}const T=t=>t.join("/").replace(/\/\/+/g,"/"),L=t=>t.replace(/\/+$/,"").replace(/^\/*/,"/"),I=t=>t&&"?"!==t?t.startsWith("?")?t:"?"+t:"",D=t=>t&&"#"!==t?t.startsWith("#")?t:"#"+t:"";class R extends Error{}class O{constructor(t){let e;this.pendingKeys=new Set,this.subscriber=void 0,k(t&&"object"==typeof t&&!Array.isArray(t),"defer() only accepts plain objects"),this.abortPromise=new Promise(((t,n)=>e=n)),this.controller=new AbortController;let n=()=>e(new R("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",n),this.controller.signal.addEventListener("abort",n),this.data=Object.entries(t).reduce(((t,e)=>{let[n,r]=e;return Object.assign(t,{[n]:this.trackPromise(n,r)})}),{})}trackPromise(t,e){if(!(e instanceof Promise))return e;this.pendingKeys.add(t);let n=Promise.race([e,this.abortPromise]).then((e=>this.onSettle(n,t,null,e)),(e=>this.onSettle(n,t,e)));return n.catch((()=>{})),Object.defineProperty(n,"_tracked",{get:()=>!0}),n}onSettle(t,e,n,r){if(this.controller.signal.aborted&&n instanceof R)return this.unlistenAbortSignal(),Object.defineProperty(t,"_error",{get:()=>n}),Promise.reject(n);this.pendingKeys.delete(e),this.done&&this.unlistenAbortSignal();const i=this.subscriber;return n?(Object.defineProperty(t,"_error",{get:()=>n}),i&&i(!1),Promise.reject(n)):(Object.defineProperty(t,"_data",{get:()=>r}),i&&i(!1),r)}subscribe(t){this.subscriber=t}cancel(){this.controller.abort(),this.pendingKeys.forEach(((t,e)=>this.pendingKeys.delete(e)));let t=this.subscriber;t&&t(!0)}async resolveData(t){let e=!1;if(!this.done){let n=()=>this.cancel();t.addEventListener("abort",n),e=await new Promise((e=>{this.subscribe((r=>{t.removeEventListener("abort",n),(r||this.done)&&e(r)}))}))}return e}get done(){return 0===this.pendingKeys.size}get unwrappedData(){return k(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((t,e)=>{let[n,r]=e;return Object.assign(t,{[n]:B(r)})}),{})}}function B(t){if(!function(t){return t instanceof Promise&&!0===t._tracked}(t))return t;if(t._error)throw t._error;return t._data}class N{constructor(t,e,n,r){void 0===r&&(r=!1),this.status=t,this.statusText=e||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function z(t){return t instanceof N}const F=["post","put","patch","delete"],j=new Set(F),V=["get",...F],U=new Set(V),W=new Set([301,302,303,307,308]),$=new Set([307,308]),H={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},Y={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0},q=!("undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement);function G(t,e,n){void 0===n&&(n=!1);let r="string"==typeof t?t:h(t);if(!e||!function(t){return null!=t&&"formData"in t}(e))return{path:r};if(e.formMethod&&(i=e.formMethod,!U.has(i)))return{path:r,error:ot(405,{method:e.formMethod})};var i;if(e.formMethod&&ht(e.formMethod))return{path:r,submission:{formMethod:e.formMethod,formAction:st(r),formEncType:e&&e.formEncType||"application/x-www-form-urlencoded",formData:e.formData}};let o=d(r);try{let t=tt(e.formData);n&&o.search&&pt(o.search)&&t.append("index",""),o.search="?"+t}catch(t){return{path:r,error:ot(400)}}return{path:h(o)}}function Q(t,e,n,r,i,o,a,s,l,c){let u=l?Object.values(l)[0]:s?Object.values(s)[0]:null,h=function(t,e){let n=t;if(e){let r=t.findIndex((t=>t.route.id===e));r>=0&&(n=t.slice(0,r))}return n}(e,l?Object.keys(l)[0]:void 0).filter(((e,a)=>null!=e.route.loader&&(function(t,e,n){let r=!e||n.route.id!==e.route.id,i=void 0===t[n.route.id];return r||i}(t.loaderData,t.matches[a],e)||o.some((t=>t===e.route.id))||X(t.location,t.matches[a],n,r,e,i,u)))),d=[];return c&&c.forEach(((t,e)=>{let[r,o,s]=t;(a.includes(e)||i&&X(r,o,n,r,o,i,u))&&d.push([e,r,o,s])})),[h,d]}function J(t,e){let n=t.route.path;return t.pathname!==e.pathname||n&&n.endsWith("*")&&t.params["*"]!==e.params["*"]}function X(t,e,n,r,i,o,a){let l=f(t),c=e.params,u=f(r),h=i.params,d=J(e,i)||l.toString()===u.toString()||l.search!==u.search||o;if(i.route.shouldRevalidate){let t=i.route.shouldRevalidate(s({currentUrl:l,currentParams:c,nextUrl:u,nextParams:h},n,{actionResult:a,defaultShouldRevalidate:d}));if("boolean"==typeof t)return t}return d}async function K(t,e,n,r,i,o,a){let s,l,c;void 0===i&&(i="/"),void 0===o&&(o=!1),void 0===a&&(a=!1);let u=new Promise(((t,e)=>c=e)),d=()=>c();e.signal.addEventListener("abort",d);try{let r=n.route[t];k(r,"Could not find the "+t+' to run on the "'+n.route.id+'" route'),l=await Promise.race([r({request:e,params:n.params}),u]),k(void 0!==l,"You defined "+("action"===t?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+t+"` function. Please return a value or `null`.")}catch(t){s=p.error,l=t}finally{e.signal.removeEventListener("abort",d)}if(l instanceof Response){let t,c=l.status;if(W.has(c)){let t=l.headers.get("Location");k(t,"Redirects returned/thrown from loaders/actions must have a Location header");let a=f(t).origin!==f("/").origin;if(!a){let o=P(t,M(r.slice(0,r.indexOf(n)+1)).map((t=>t.pathnameBase)),f(e.url).pathname);if(k(h(o),"Unable to resolve redirect location: "+t),i){let t=o.pathname;o.pathname="/"===t?i:T([i,t])}t=h(o)}if(o)throw l.headers.set("Location",t),l;return{type:p.redirect,status:c,location:t,revalidate:null!==l.headers.get("X-Remix-Revalidate"),external:a}}if(a)throw{type:s||p.data,response:l};let u=l.headers.get("Content-Type");return t=u&&u.startsWith("application/json")?await l.json():await l.text(),s===p.error?{type:s,error:new N(c,l.statusText,t),headers:l.headers}:{type:p.data,data:t,statusCode:l.status,headers:l.headers}}return s===p.error?{type:s,error:l}:l instanceof O?{type:p.deferred,deferredData:l}:{type:p.data,data:l}}function Z(t,e,n){let r=f(st(t)).toString(),i={signal:e};if(n){let{formMethod:t,formEncType:e,formData:r}=n;i.method=t.toUpperCase(),i.body="application/x-www-form-urlencoded"===e?tt(r):r}return new Request(r,i)}function tt(t){let e=new URLSearchParams;for(let[n,r]of t.entries())k("string"==typeof r,'File inputs are not supported with encType "application/x-www-form-urlencoded", please use "multipart/form-data" instead.'),e.append(n,r);return e}function et(t,e,n,r,i,o,a,l){let{loaderData:c,errors:u}=function(t,e,n,r,i){let o,a={},s=null,l=!1,c={};return n.forEach(((n,u)=>{let h=e[u].route.id;if(k(!ut(n),"Cannot handle redirect results in processLoaderData"),ct(n)){let e=rt(t,h),i=n.error;r&&(i=Object.values(r)[0],r=void 0),s=Object.assign(s||{},{[e.route.id]:i}),l||(l=!0,o=z(n.error)?n.error.status:500),n.headers&&(c[h]=n.headers)}else lt(n)?(i&&i.set(h,n.deferredData),a[h]=n.deferredData.data):(a[h]=n.data,null==n.statusCode||200===n.statusCode||l||(o=n.statusCode),n.headers&&(c[h]=n.headers))})),r&&(s=r),{loaderData:a,errors:s,statusCode:o||200,loaderHeaders:c}}(e,n,r,i,l);for(let e=0;e<o.length;e++){let[n,,r]=o[e];k(void 0!==a&&void 0!==a[e],"Did not find corresponding fetcher result");let i=a[e];if(ct(i)){let e=rt(t.matches,r.route.id);u&&u[e.route.id]||(u=s({},u,{[e.route.id]:i.error})),t.fetchers.delete(n)}else{if(ut(i))throw new Error("Unhandled fetcher revalidation redirect");if(lt(i))throw new Error("Unhandled fetcher deferred data");{let e={state:"idle",data:i.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};t.fetchers.set(n,e)}}}return{loaderData:c,errors:u}}function nt(t,e,n){let r=s({},e);return n.forEach((n=>{let i=n.route.id;void 0===e[i]&&void 0!==t[i]&&(r[i]=t[i])})),r}function rt(t,e){return(e?t.slice(0,t.findIndex((t=>t.route.id===e))+1):[...t]).reverse().find((t=>!0===t.route.hasErrorBoundary))||t[0]}function it(t){let e=t.find((t=>t.index||!t.path||"/"===t.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:e}],route:e}}function ot(t,e){let{pathname:n,routeId:r,method:i,message:o}=void 0===e?{}:e,a="Unknown Server Error",s="Unknown @remix-run/router error";return 400===t?(a="Bad Request",s=i&&n&&r?"You made a "+i+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"Cannot submit binary form data using GET"):403===t?(a="Forbidden",s='Route "'+r+'" does not match URL "'+n+'"'):404===t?(a="Not Found",s='No route matches URL "'+n+'"'):405===t&&(a="Method Not Allowed",i&&n&&r?s="You made a "+i.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':i&&(s='Invalid request method "'+i.toUpperCase()+'"')),new N(t||500,a,new Error(s),!0)}function at(t){for(let e=t.length-1;e>=0;e--){let n=t[e];if(ut(n))return n}}function st(t){return h(s({},"string"==typeof t?d(t):t,{hash:""}))}function lt(t){return t.type===p.deferred}function ct(t){return t.type===p.error}function ut(t){return(t&&t.type)===p.redirect}function ht(t){return j.has(t)}async function dt(t,e,n,r,i,o){for(let a=0;a<n.length;a++){let s=n[a],l=e[a],c=t.find((t=>t.route.id===l.route.id)),u=null!=c&&!J(c,l)&&void 0!==(o&&o[l.route.id]);lt(s)&&(i||u)&&await ft(s,r,i).then((t=>{t&&(n[a]=t||n[a])}))}}async function ft(t,e,n){if(void 0===n&&(n=!1),!await t.deferredData.resolveData(e)){if(n)try{return{type:p.data,data:t.deferredData.unwrappedData}}catch(t){return{type:p.error,error:t}}return{type:p.data,data:t.deferredData.data}}}function pt(t){return new URLSearchParams(t).getAll("index").some((t=>""===t))}function mt(t,e){let{route:n,pathname:r,params:i}=t;return{id:n.id,pathname:r,params:i,data:e[n.id],handle:n.handle}}function gt(t,e){let n="string"==typeof e?d(e).search:e.search;if(t[t.length-1].route.index&&pt(n||""))return t[t.length-1];let r=M(t);return r[r.length-1]}function yt(){return yt=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},yt.apply(this,arguments)}"function"==typeof Object.is&&Object.is;const{useState:vt,useEffect:bt,useLayoutEffect:xt,useDebugValue:At}=n;"undefined"==typeof window||void 0===window.document||window.document.createElement;const wt=n.useSyncExternalStore,Ct=e.createContext(null),_t=e.createContext(null),kt=e.createContext(null),St=e.createContext(null),Et=e.createContext(null),Mt=e.createContext({outlet:null,matches:[]}),Pt=e.createContext(null);function Tt(){return null!=e.useContext(Et)}function Lt(){return Tt()||k(!1),e.useContext(Et).location}function It(t,n){let{relative:r}=void 0===n?{}:n,{matches:i}=e.useContext(Mt),{pathname:o}=Lt(),a=JSON.stringify(M(i).map((t=>t.pathnameBase)));return e.useMemo((()=>P(t,JSON.parse(a),o,"path"===r)),[t,a,o,r])}function Dt(){let t=function(){var t;let n=e.useContext(Pt),r=function(t){let n=e.useContext(kt);return n||k(!1),n}(Nt.UseRouteError),i=e.useContext(Mt),o=i.matches[i.matches.length-1];return n||(i||k(!1),!o.route.id&&k(!1),null==(t=r.errors)?void 0:t[o.route.id])}(),n=z(t)?t.status+" "+t.statusText:t instanceof Error?t.message:JSON.stringify(t),r=t instanceof Error?t.stack:null,i="rgba(200,200,200, 0.5)",o={padding:"0.5rem",backgroundColor:i},a={padding:"2px 4px",backgroundColor:i};return e.createElement(e.Fragment,null,e.createElement("h2",null,"Unhandled Thrown Error!"),e.createElement("h3",{style:{fontStyle:"italic"}},n),r?e.createElement("pre",{style:o},r):null,e.createElement("p",null,"💿 Hey developer 👋"),e.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",e.createElement("code",{style:a},"errorElement")," props on ",e.createElement("code",{style:a},"<Route>")))}class Rt extends e.Component{constructor(t){super(t),this.state={location:t.location,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,e){return e.location!==t.location?{error:t.error,location:t.location}:{error:t.error||e.error,location:e.location}}componentDidCatch(t,e){console.error("React Router caught the following error during render",t,e)}render(){return this.state.error?e.createElement(Pt.Provider,{value:this.state.error,children:this.props.component}):this.props.children}}function Ot(t){let{routeContext:n,match:r,children:i}=t,o=e.useContext(Ct);return o&&r.route.errorElement&&(o._deepestRenderedBoundaryId=r.route.id),e.createElement(Mt.Provider,{value:n},i)}var Bt,Nt,zt;function Ft(t){let{fallbackElement:n,router:r}=t,i=wt(r.subscribe,(()=>r.state),(()=>r.state)),o=e.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:t=>r.navigate(t),push:(t,e,n)=>r.navigate(t,{state:e,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(t,e,n)=>r.navigate(t,{replace:!0,state:e,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),a=r.basename||"/";return e.createElement(_t.Provider,{value:{router:r,navigator:o,static:!1,basename:a}},e.createElement(kt.Provider,{value:i},e.createElement(Vt,{basename:r.basename,location:r.state.location,navigationType:r.state.historyAction,navigator:o},r.state.initialized?e.createElement(Ut,null):n)))}function jt(t){k(!1)}function Vt(n){let{basename:r="/",children:i=null,location:o,navigationType:a=t.Pop,navigator:s,static:l=!1}=n;Tt()&&k(!1);let c=r.replace(/^\/*/,"/"),u=e.useMemo((()=>({basename:c,navigator:s,static:l})),[c,s,l]);"string"==typeof o&&(o=d(o));let{pathname:h="/",search:f="",hash:p="",state:m=null,key:g="default"}=o,y=e.useMemo((()=>{let t=_(h,c);return null==t?null:{pathname:t,search:f,hash:p,state:m,key:g}}),[c,h,f,p,m,g]);return null==y?null:e.createElement(St.Provider,{value:u},e.createElement(Et.Provider,{children:i,value:{location:y,navigationType:a}}))}function Ut(n){let{children:r,location:i}=n,o=e.useContext(_t);return function(n,r){Tt()||k(!1);let{navigator:i}=e.useContext(St),o=e.useContext(kt),{matches:a}=e.useContext(Mt),s=a[a.length-1],l=s?s.params:{},c=(s&&s.pathname,s?s.pathnameBase:"/");s&&s.route;let u,h=Lt();if(r){var f;let t="string"==typeof r?d(r):r;"/"===c||(null==(f=t.pathname)?void 0:f.startsWith(c))||k(!1),u=t}else u=h;let p=u.pathname||"/",m=g(n,{pathname:"/"===c?p:p.slice(c.length)||"/"}),y=function(t,n,r){if(void 0===n&&(n=[]),null==t){if(null==r||!r.errors)return null;t=r.matches}let i=t,o=null==r?void 0:r.errors;if(null!=o){let t=i.findIndex((t=>t.route.id&&(null==o?void 0:o[t.route.id])));t>=0||k(!1),i=i.slice(0,Math.min(i.length,t+1))}return i.reduceRight(((t,a,s)=>{let l=a.route.id?null==o?void 0:o[a.route.id]:null,c=r?a.route.errorElement||e.createElement(Dt,null):null,u=()=>e.createElement(Ot,{match:a,routeContext:{outlet:t,matches:n.concat(i.slice(0,s+1))}},l?c:void 0!==a.route.element?a.route.element:t);return r&&(a.route.errorElement||0===s)?e.createElement(Rt,{location:r.location,component:c,error:l,children:u()}):u()}),null)}(m&&m.map((t=>Object.assign({},t,{params:Object.assign({},l,t.params),pathname:T([c,i.encodeLocation?i.encodeLocation(t.pathname).pathname:t.pathname]),pathnameBase:"/"===t.pathnameBase?c:T([c,i.encodeLocation?i.encodeLocation(t.pathnameBase).pathname:t.pathnameBase])}))),a,o||void 0);return r&&y?e.createElement(Et.Provider,{value:{location:yt({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:t.Pop}},y):y}(o&&!r?o.router.routes:$t(r),i)}!function(t){t.UseRevalidator="useRevalidator"}(Bt||(Bt={})),function(t){t.UseLoaderData="useLoaderData",t.UseActionData="useActionData",t.UseRouteError="useRouteError",t.UseNavigation="useNavigation",t.UseRouteLoaderData="useRouteLoaderData",t.UseMatches="useMatches",t.UseRevalidator="useRevalidator"}(Nt||(Nt={})),function(t){t[t.pending=0]="pending",t[t.success=1]="success",t[t.error=2]="error"}(zt||(zt={})),new Promise((()=>{}));class Wt extends e.Component{constructor(t){super(t),this.state={error:null}}static getDerivedStateFromError(t){return{error:t}}componentDidCatch(t,e){console.error("<Await> caught the following error during render",t,e)}render(){let{children:t,errorElement:e,resolve:n}=this.props,r=null,i=zt.pending;if(n instanceof Promise)if(this.state.error){zt.error;let t=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>t})}else n._tracked?void 0!==r._error?zt.error:void 0!==r._data?zt.success:zt.pending:(zt.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),n.then((t=>Object.defineProperty(n,"_data",{get:()=>t})),(t=>Object.defineProperty(n,"_error",{get:()=>t}))));else zt.success,Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(i===zt.error&&r._error instanceof AbortedDeferredError)throw neverSettledPromise;if(i===zt.error&&!e)throw r._error;if(i===zt.error)return React.createElement(AwaitContext.Provider,{value:r,children:e});if(i===zt.success)return React.createElement(AwaitContext.Provider,{value:r,children:t});throw r}}function $t(t,n){void 0===n&&(n=[]);let r=[];return e.Children.forEach(t,((t,i)=>{if(!e.isValidElement(t))return;if(t.type===e.Fragment)return void r.push.apply(r,$t(t.props.children,n));t.type!==jt&&k(!1),t.props.index&&t.props.children&&k(!1);let o=[...n,i],a={id:t.props.id||o.join("-"),caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path,loader:t.props.loader,action:t.props.action,errorElement:t.props.errorElement,hasErrorBoundary:null!=t.props.errorElement,shouldRevalidate:t.props.shouldRevalidate,handle:t.props.handle};t.props.children&&(a.children=$t(t.props.children,o)),r.push(a)})),r}function Ht(){return Ht=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},Ht.apply(this,arguments)}const Yt=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"];function qt(t){if(!t)return null;let e=Object.entries(t),n={};for(let[t,r]of e)r&&"RouteErrorResponse"===r.__type?n[t]=new N(r.status,r.statusText,r.data,!0===r.internal):n[t]=r;return n}const Gt=e.forwardRef((function(t,n){let{onClick:r,relative:i,reloadDocument:o,replace:a,state:s,target:l,to:c,preventScrollReset:u}=t,d=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,Yt),f=function(t,n){let{relative:r}=void 0===n?{}:n;Tt()||k(!1);let{basename:i,navigator:o}=e.useContext(St),{hash:a,pathname:s,search:l}=It(t,{relative:r}),c=s;return"/"!==i&&(c="/"===s?i:T([i,s])),o.createHref({pathname:c,search:l,hash:a})}(c,{relative:i}),p=function(t,n){let{target:r,replace:i,state:o,preventScrollReset:a,relative:s}=void 0===n?{}:n,l=function(){Tt()||k(!1);let{basename:t,navigator:n}=e.useContext(St),{matches:r}=e.useContext(Mt),{pathname:i}=Lt(),o=JSON.stringify(M(r).map((t=>t.pathnameBase))),a=e.useRef(!1);e.useEffect((()=>{a.current=!0}));let s=e.useCallback((function(e,r){if(void 0===r&&(r={}),!a.current)return;if("number"==typeof e)return void n.go(e);let s=P(e,JSON.parse(o),i,"path"===r.relative);"/"!==t&&(s.pathname="/"===s.pathname?t:T([t,s.pathname])),(r.replace?n.replace:n.push)(s,r.state,r)}),[t,n,o,i]);return s}(),c=Lt(),u=It(t,{relative:s});return e.useCallback((e=>{if(function(t,e){return!(0!==t.button||e&&"_self"!==e||function(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}(t))}(e,r)){e.preventDefault();let n=void 0!==i?i:h(c)===h(u);l(t,{replace:n,state:o,preventScrollReset:a,relative:s})}}),[c,l,u,i,o,r,t,a,s])}(c,{replace:a,state:s,target:l,preventScrollReset:u,relative:i});return e.createElement("a",Ht({},d,{href:f,onClick:o?r:function(t){r&&r(t),t.defaultPrevented||p(t)},ref:n,target:l}))}));var Qt,Jt;(function(t){t.UseScrollRestoration="useScrollRestoration",t.UseSubmitImpl="useSubmitImpl",t.UseFetcher="useFetcher"})(Qt||(Qt={})),function(t){t.UseFetchers="useFetchers",t.UseScrollRestoration="useScrollRestoration"}(Jt||(Jt={}));const Xt=(0,e.createContext)({transformPagePoint:t=>t,isStatic:!1,reducedMotion:"never"}),Kt=(0,e.createContext)({}),Zt=(0,e.createContext)(null),te="undefined"!=typeof document,ee=te?e.useLayoutEffect:e.useEffect,ne=(0,e.createContext)({strict:!1});function re(t){return"object"==typeof t&&Object.prototype.hasOwnProperty.call(t,"current")}function ie(t){return"string"==typeof t||Array.isArray(t)}function oe(t){return"object"==typeof t&&"function"==typeof t.start}const ae=["initial","animate","exit","whileHover","whileDrag","whileTap","whileFocus","whileInView"];function se(t){return oe(t.animate)||ae.some((e=>ie(t[e])))}function le(t){return Boolean(se(t)||t.variants)}function ce(t){return Array.isArray(t)?t.join(" "):t}const ue=t=>({isEnabled:e=>t.some((t=>!!e[t]))}),he={measureLayout:ue(["layout","layoutId","drag"]),animation:ue(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:ue(["exit"]),drag:ue(["drag","dragControls"]),focus:ue(["whileFocus"]),hover:ue(["whileHover","onHoverStart","onHoverEnd"]),tap:ue(["whileTap","onTap","onTapStart","onTapCancel"]),pan:ue(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:ue(["whileInView","onViewportEnter","onViewportLeave"])};function de(t){const n=(0,e.useRef)(null);return null===n.current&&(n.current=t()),n.current}const fe={hasAnimatedSinceResize:!0,hasEverUpdated:!1};let pe=1;const me=(0,e.createContext)({});class ge extends e.Component{getSnapshotBeforeUpdate(){const{visualElement:t,props:e}=this.props;return t&&t.setProps(e),null}componentDidUpdate(){}render(){return this.props.children}}const ye=(0,e.createContext)({}),ve=Symbol.for("motionComponentSymbol");function be({preloadedFeatures:t,createVisualElement:n,projectionNodeConstructor:r,useRender:i,useVisualState:o,Component:a}){t&&function(t){for(const e in t)"projectionNodeConstructor"===e?he.projectionNodeConstructor=t[e]:he[e].Component=t[e]}(t);const s=(0,e.forwardRef)((function(s,l){const c={...(0,e.useContext)(Xt),...s,layoutId:xe(s)},{isStatic:u}=c;let h=null;const d=function(t){const{initial:n,animate:r}=function(t,e){if(se(t)){const{initial:e,animate:n}=t;return{initial:!1===e||ie(e)?e:void 0,animate:ie(n)?n:void 0}}return!1!==t.inherit?e:{}}(t,(0,e.useContext)(Kt));return(0,e.useMemo)((()=>({initial:n,animate:r})),[ce(n),ce(r)])}(s),f=u?void 0:de((()=>{if(fe.hasEverUpdated)return pe++})),p=o(s,u);if(!u&&te){d.visualElement=function(t,n,r,i){const o=(0,e.useContext)(Kt).visualElement,a=(0,e.useContext)(ne),s=(0,e.useContext)(Zt),l=(0,e.useContext)(Xt).reducedMotion,c=(0,e.useRef)();i=i||a.renderer,!c.current&&i&&(c.current=i(t,{visualState:n,parent:o,props:r,presenceId:s?s.id:void 0,blockInitialAnimation:!!s&&!1===s.initial,reducedMotionConfig:l}));const u=c.current;return ee((()=>{u&&u.render()})),(0,e.useEffect)((()=>{u&&u.animationState&&u.animationState.animateChanges()})),ee((()=>()=>u&&u.notify("Unmount")),[]),u}(a,p,c,n);const i=(0,e.useContext)(ne).strict,o=(0,e.useContext)(ye);d.visualElement&&(h=d.visualElement.loadFeatures(c,i,t,f,r||he.projectionNodeConstructor,o))}return e.createElement(ge,{visualElement:d.visualElement,props:c},h,e.createElement(Kt.Provider,{value:d},i(a,s,f,function(t,n,r){return(0,e.useCallback)((e=>{e&&t.mount&&t.mount(e),n&&(e?n.mount(e):n.unmount()),r&&("function"==typeof r?r(e):re(r)&&(r.current=e))}),[n])}(p,d.visualElement,l),p,u,d.visualElement)))}));return s[ve]=a,s}function xe({layoutId:t}){const n=(0,e.useContext)(me).id;return n&&void 0!==t?n+"-"+t:t}function Ae(t){function e(e,n={}){return be(t(e,n))}if("undefined"==typeof Proxy)return e;const n=new Map;return new Proxy(e,{get:(t,r)=>(n.has(r)||n.set(r,e(r)),n.get(r))})}const we=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","text","tspan","use","view"];function Ce(t){return"string"==typeof t&&!t.includes("-")&&!!(we.indexOf(t)>-1||/[A-Z]/.test(t))}const _e={},ke=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],Se=new Set(ke);function Ee(t,{layout:e,layoutId:n}){return Se.has(t)||t.startsWith("origin")||(e||void 0!==n)&&(!!_e[t]||"opacity"===t)}const Me=t=>!!(null==t?void 0:t.getVelocity),Pe={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},Te=(t,e)=>ke.indexOf(t)-ke.indexOf(e);function Le(t){return t.startsWith("--")}const Ie=(t,e)=>e&&"number"==typeof t?e.transform(t):t,De=(t,e)=>n=>Math.max(Math.min(n,e),t),Re=t=>t%1?Number(t.toFixed(5)):t,Oe=/(-)?([\d]*\.?[\d])+/g,Be=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,Ne=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function ze(t){return"string"==typeof t}const Fe=t=>({test:e=>ze(e)&&e.endsWith(t)&&1===e.split(" ").length,parse:parseFloat,transform:e=>`${e}${t}`}),je=Fe("deg"),Ve=Fe("%"),Ue=Fe("px"),We=Fe("vh"),$e=Fe("vw"),He=Object.assign(Object.assign({},Ve),{parse:t=>Ve.parse(t)/100,transform:t=>Ve.transform(100*t)}),Ye={test:t=>"number"==typeof t,parse:parseFloat,transform:t=>t},qe=Object.assign(Object.assign({},Ye),{transform:De(0,1)}),Ge=Object.assign(Object.assign({},Ye),{default:1}),Qe={...Ye,transform:Math.round},Je={borderWidth:Ue,borderTopWidth:Ue,borderRightWidth:Ue,borderBottomWidth:Ue,borderLeftWidth:Ue,borderRadius:Ue,radius:Ue,borderTopLeftRadius:Ue,borderTopRightRadius:Ue,borderBottomRightRadius:Ue,borderBottomLeftRadius:Ue,width:Ue,maxWidth:Ue,height:Ue,maxHeight:Ue,size:Ue,top:Ue,right:Ue,bottom:Ue,left:Ue,padding:Ue,paddingTop:Ue,paddingRight:Ue,paddingBottom:Ue,paddingLeft:Ue,margin:Ue,marginTop:Ue,marginRight:Ue,marginBottom:Ue,marginLeft:Ue,rotate:je,rotateX:je,rotateY:je,rotateZ:je,scale:Ge,scaleX:Ge,scaleY:Ge,scaleZ:Ge,skew:je,skewX:je,skewY:je,distance:Ue,translateX:Ue,translateY:Ue,translateZ:Ue,x:Ue,y:Ue,z:Ue,perspective:Ue,transformPerspective:Ue,opacity:qe,originX:He,originY:He,originZ:Ue,zIndex:Qe,fillOpacity:qe,strokeOpacity:qe,numOctaves:Qe};function Xe(t,e,n,r){const{style:i,vars:o,transform:a,transformKeys:s,transformOrigin:l}=t;s.length=0;let c=!1,u=!1,h=!0;for(const t in e){const n=e[t];if(Le(t)){o[t]=n;continue}const r=Je[t],d=Ie(n,r);if(Se.has(t)){if(c=!0,a[t]=d,s.push(t),!h)continue;n!==(r.default||0)&&(h=!1)}else t.startsWith("origin")?(u=!0,l[t]=d):i[t]=d}if(e.transform||(c||r?i.transform=function({transform:t,transformKeys:e},{enableHardwareAcceleration:n=!0,allowTransformNone:r=!0},i,o){let a="";e.sort(Te);for(const n of e)a+=`${Pe[n]||n}(${t[n]}) `;return n&&!t.z&&(a+="translateZ(0)"),a=a.trim(),o?a=o(t,i?"":a):r&&i&&(a="none"),a}(t,n,h,r):i.transform&&(i.transform="none")),u){const{originX:t="50%",originY:e="50%",originZ:n=0}=l;i.transformOrigin=`${t} ${e} ${n}`}}function Ke(t,e,n){for(const r in e)Me(e[r])||Ee(r,n)||(t[r]=e[r])}function Ze(t,n,r){const i={},o=function(t,n,r){const i={};return Ke(i,t.style||{},t),Object.assign(i,function({transformTemplate:t},n,r){return(0,e.useMemo)((()=>{const e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};return Xe(e,n,{enableHardwareAcceleration:!r},t),Object.assign({},e.vars,e.style)}),[n])}(t,n,r)),t.transformValues?t.transformValues(i):i}(t,n,r);return t.drag&&!1!==t.dragListener&&(i.draggable=!1,o.userSelect=o.WebkitUserSelect=o.WebkitTouchCallout="none",o.touchAction=!0===t.drag?"none":"pan-"+("x"===t.drag?"y":"x")),i.style=o,i}const tn=new Set(["initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","onHoverStart","onHoverEnd","layoutScroll","whileInView","onViewportEnter","onViewportLeave","viewport","whileTap","onTap","onTapStart","onTapCancel","animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView","onPan","onPanStart","onPanSessionStart","onPanEnd"]);function en(t){return tn.has(t)}let nn=t=>!en(t);try{(rn=require("@emotion/is-prop-valid").default)&&(nn=t=>t.startsWith("on")?!en(t):rn(t))}catch(t){}var rn;function on(t,e,n){return"string"==typeof t?t:Ue.transform(e+n*t)}const an={offset:"stroke-dashoffset",array:"stroke-dasharray"},sn={offset:"strokeDashoffset",array:"strokeDasharray"};function ln(t,{attrX:e,attrY:n,originX:r,originY:i,pathLength:o,pathSpacing:a=1,pathOffset:s=0,...l},c,u){Xe(t,l,c,u),t.attrs=t.style,t.style={};const{attrs:h,style:d,dimensions:f}=t;h.transform&&(f&&(d.transform=h.transform),delete h.transform),f&&(void 0!==r||void 0!==i||d.transform)&&(d.transformOrigin=function(t,e,n){return`${on(e,t.x,t.width)} ${on(n,t.y,t.height)}`}(f,void 0!==r?r:.5,void 0!==i?i:.5)),void 0!==e&&(h.x=e),void 0!==n&&(h.y=n),void 0!==o&&function(t,e,n=1,r=0,i=!0){t.pathLength=1;const o=i?an:sn;t[o.offset]=Ue.transform(-r);const a=Ue.transform(e),s=Ue.transform(n);t[o.array]=`${a} ${s}`}(h,o,a,s,!1)}function cn(t,n){const r=(0,e.useMemo)((()=>{const e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}};return ln(e,n,{enableHardwareAcceleration:!1},t.transformTemplate),{...e.attrs,style:{...e.style}}}),[n]);if(t.style){const e={};Ke(e,t.style,t),r.style={...e,...r.style}}return r}function un(t=!1){return(n,r,i,o,{latestValues:a},s)=>{const l=(Ce(n)?cn:Ze)(r,a,s),c=function(t,e,n){const r={};for(const i in t)(nn(i)||!0===n&&en(i)||!e&&!en(i)||t.draggable&&i.startsWith("onDrag"))&&(r[i]=t[i]);return r}(r,"string"==typeof n,t),u={...c,...l,ref:o};return i&&(u["data-projection-id"]=i),(0,e.createElement)(n,u)}}const hn=t=>t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();function dn(t,{style:e,vars:n},r,i){Object.assign(t.style,e,i&&i.getProjectionStyles(r));for(const e in n)t.style.setProperty(e,n[e])}const fn=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function pn(t,e,n,r){dn(t,e,void 0,r);for(const n in e.attrs)t.setAttribute(fn.has(n)?n:hn(n),e.attrs[n])}function mn(t){const{style:e}=t,n={};for(const r in e)(Me(e[r])||Ee(r,t))&&(n[r]=e[r]);return n}function gn(t){const e=mn(t);for(const n in t)Me(t[n])&&(e["x"===n||"y"===n?"attr"+n.toUpperCase():n]=t[n]);return e}function yn(t,e,n,r={},i={}){return"function"==typeof e&&(e=e(void 0!==n?n:t.custom,r,i)),"string"==typeof e&&(e=t.variants&&t.variants[e]),"function"==typeof e&&(e=e(void 0!==n?n:t.custom,r,i)),e}const vn=t=>Array.isArray(t),bn=t=>vn(t)?t[t.length-1]||0:t;function xn(t){const e=Me(t)?t.get():t;return n=e,Boolean(n&&"object"==typeof n&&n.mix&&n.toValue)?e.toValue():e;var n}const An=t=>(n,r)=>{const i=(0,e.useContext)(Kt),o=(0,e.useContext)(Zt),a=()=>function({scrapeMotionValuesFromProps:t,createRenderState:e,onMount:n},r,i,o){const a={latestValues:wn(r,i,o,t),renderState:e()};return n&&(a.mount=t=>n(r,t,a)),a}(t,n,i,o);return r?a():de(a)};function wn(t,e,n,r){const i={},o=r(t);for(const t in o)i[t]=xn(o[t]);let{initial:a,animate:s}=t;const l=se(t),c=le(t);e&&c&&!l&&!1!==t.inherit&&(void 0===a&&(a=e.initial),void 0===s&&(s=e.animate));let u=!!n&&!1===n.initial;u=u||!1===a;const h=u?s:a;return h&&"boolean"!=typeof h&&!oe(h)&&(Array.isArray(h)?h:[h]).forEach((e=>{const n=yn(t,e);if(!n)return;const{transitionEnd:r,transition:o,...a}=n;for(const t in a){let e=a[t];Array.isArray(e)&&(e=e[u?e.length-1:0]),null!==e&&(i[t]=e)}for(const t in r)i[t]=r[t]})),i}const Cn={useVisualState:An({scrapeMotionValuesFromProps:gn,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{},attrs:{}}),onMount:(t,e,{renderState:n,latestValues:r})=>{try{n.dimensions="function"==typeof e.getBBox?e.getBBox():e.getBoundingClientRect()}catch(t){n.dimensions={x:0,y:0,width:0,height:0}}ln(n,r,{enableHardwareAcceleration:!1},t.transformTemplate),pn(e,n)}})},_n={useVisualState:An({scrapeMotionValuesFromProps:mn,createRenderState:()=>({style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}})})};var kn;function Sn(t,e,n,r={passive:!0}){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n)}function En(t,n,r,i){(0,e.useEffect)((()=>{const e=t.current;if(r&&e)return Sn(e,n,r,i)}),[t,n,r,i])}function Mn(t){return"undefined"!=typeof PointerEvent&&t instanceof PointerEvent?!("mouse"!==t.pointerType):t instanceof MouseEvent}function Pn(t){return!!t.touches}!function(t){t.Animate="animate",t.Hover="whileHover",t.Tap="whileTap",t.Drag="whileDrag",t.Focus="whileFocus",t.InView="whileInView",t.Exit="exit"}(kn||(kn={}));const Tn={pageX:0,pageY:0};function Ln(t,e="page"){const n=t.touches[0]||t.changedTouches[0]||Tn;return{x:n[e+"X"],y:n[e+"Y"]}}function In(t,e="page"){return{x:t[e+"X"],y:t[e+"Y"]}}function Dn(t,e="page"){return{point:Pn(t)?Ln(t,e):In(t,e)}}const Rn=(t,e=!1)=>{const n=e=>t(e,Dn(e));return e?(r=n,t=>{const e=t instanceof MouseEvent;(!e||e&&0===t.button)&&r(t)}):n;var r},On={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Bn={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function Nn(t){return te&&null===window.onpointerdown?t:te&&null===window.ontouchstart?Bn[t]:te&&null===window.onmousedown?On[t]:t}function zn(t,e,n,r){return Sn(t,Nn(e),Rn(n,"pointerdown"===e),r)}function Fn(t,e,n,r){return En(t,Nn(e),n&&Rn(n,"pointerdown"===e),r)}function jn(t){let e=null;return()=>null===e&&(e=t,()=>{e=null})}const Vn=jn("dragHorizontal"),Un=jn("dragVertical");function Wn(t){let e=!1;if("y"===t)e=Un();else if("x"===t)e=Vn();else{const t=Vn(),n=Un();t&&n?e=()=>{t(),n()}:(t&&t(),n&&n())}return e}function $n(){const t=Wn(!0);return!t||(t(),!1)}function Hn(t,e,n){return(r,i)=>{Mn(r)&&!$n()&&(t.animationState&&t.animationState.setActive(kn.Hover,e),n&&n(r,i))}}const Yn=(t,e)=>!!e&&(t===e||Yn(t,e.parentElement));function qn(t){return(0,e.useEffect)((()=>()=>t()),[])}const Gn=(t,e)=>n=>e(t(n)),Qn=(...t)=>t.reduce(Gn),Jn=("undefined"==typeof process||process.env,"production"),Xn=new Set,Kn=new WeakMap,Zn=new WeakMap,tr=t=>{const e=Kn.get(t.target);e&&e(t)},er=t=>{t.forEach(tr)};const nr={some:0,all:1};function rr(t,n,r,{root:i,margin:o,amount:a="some",once:s}){(0,e.useEffect)((()=>{if(!t||!r.current)return;const e={root:null==i?void 0:i.current,rootMargin:o,threshold:"number"==typeof a?a:nr[a]};return function(t,e,n){const r=function({root:t,...e}){const n=t||document;Zn.has(n)||Zn.set(n,{});const r=Zn.get(n),i=JSON.stringify(e);return r[i]||(r[i]=new IntersectionObserver(er,{root:t,...e})),r[i]}(e);return Kn.set(t,n),r.observe(t),()=>{Kn.delete(t),r.unobserve(t)}}(r.current,e,(t=>{const{isIntersecting:e}=t;if(n.isInView===e)return;if(n.isInView=e,s&&!e&&n.hasEnteredView)return;e&&(n.hasEnteredView=!0),r.animationState&&r.animationState.setActive(kn.InView,e);const i=r.getProps(),o=e?i.onViewportEnter:i.onViewportLeave;o&&o(t)}))}),[t,i,o,a])}function ir(t,n,r,{fallback:i=!0}){(0,e.useEffect)((()=>{var e;t&&i&&("production"!==Jn&&(e="IntersectionObserver not available on this device. whileInView animations will trigger on mount.",Xn.has(e)||(console.warn(e),Xn.add(e))),requestAnimationFrame((()=>{n.hasEnteredView=!0;const{onViewportEnter:t}=r.getProps();t&&t(null),r.animationState&&r.animationState.setActive(kn.InView,!0)})))}),[t])}const or=t=>e=>(t(e),null),ar={inView:or((function({visualElement:t,whileInView:n,onViewportEnter:r,onViewportLeave:i,viewport:o={}}){const a=(0,e.useRef)({hasEnteredView:!1,isInView:!1});let s=Boolean(n||r||i);o.once&&a.current.hasEnteredView&&(s=!1),("undefined"==typeof IntersectionObserver?ir:rr)(s,a.current,t,o)})),tap:or((function({onTap:t,onTapStart:n,onTapCancel:r,whileTap:i,visualElement:o}){const a=t||n||r||i,s=(0,e.useRef)(!1),l=(0,e.useRef)(null),c={passive:!(n||t||r||p)};function u(){l.current&&l.current(),l.current=null}function h(){return u(),s.current=!1,o.animationState&&o.animationState.setActive(kn.Tap,!1),!$n()}function d(e,n){h()&&(Yn(o.current,e.target)?t&&t(e,n):r&&r(e,n))}function f(t,e){h()&&r&&r(t,e)}function p(t,e){u(),s.current||(s.current=!0,l.current=Qn(zn(window,"pointerup",d,c),zn(window,"pointercancel",f,c)),o.animationState&&o.animationState.setActive(kn.Tap,!0),n&&n(t,e))}Fn(o,"pointerdown",a?p:void 0,c),qn(u)})),focus:or((function({whileFocus:t,visualElement:e}){const{animationState:n}=e;En(e,"focus",t?()=>{n&&n.setActive(kn.Focus,!0)}:void 0),En(e,"blur",t?()=>{n&&n.setActive(kn.Focus,!1)}:void 0)})),hover:or((function({onHoverStart:t,onHoverEnd:e,whileHover:n,visualElement:r}){Fn(r,"pointerenter",t||n?Hn(r,!0,t):void 0,{passive:!t}),Fn(r,"pointerleave",e||n?Hn(r,!1,e):void 0,{passive:!e})}))};function sr(){const t=(0,e.useContext)(Zt);if(null===t)return[!0,null];const{isPresent:n,onExitComplete:r,register:i}=t,o=(0,e.useId)();return(0,e.useEffect)((()=>i(o)),[]),!n&&r?[!1,()=>r&&r(o)]:[!0]}function lr(t,e){if(!Array.isArray(e))return!1;const n=e.length;if(n!==t.length)return!1;for(let r=0;r<n;r++)if(e[r]!==t[r])return!1;return!0}const cr=t=>1e3*t,ur=t=>t,hr=(t,e,n)=>(((1-3*n+3*e)*t+(3*n-6*e))*t+3*e)*t;function dr(t,e,n,r){if(t===e&&n===r)return ur;return i=>0===i||1===i?i:hr(function(t,e,n,r,i){let o,a,s=0;do{a=e+(n-e)/2,o=hr(a,r,i)-t,o>0?n=a:e=a}while(Math.abs(o)>1e-7&&++s<12);return a}(i,0,1,t,n),e,r)}const fr=t=>e=>e<=.5?t(2*e)/2:(2-t(2*(1-e)))/2,pr=t=>e=>1-t(1-e),mr=t=>t*t,gr=pr(mr),yr=fr(mr),vr=t=>1-Math.sin(Math.acos(t)),br=pr(vr),xr=fr(br),Ar=(t=1.525)=>e=>e*e*((t+1)*e-t),wr=Ar(),Cr=pr(wr),_r=fr(wr),kr=(t=>{const e=Ar(void 0);return t=>(t*=2)<1?.5*e(t):.5*(2-Math.pow(2,-10*(t-1)))})(),Sr={linear:ur,easeIn:mr,easeInOut:yr,easeOut:gr,circIn:vr,circInOut:xr,circOut:br,backIn:wr,backInOut:_r,backOut:Cr,anticipate:kr},Er=t=>{if(Array.isArray(t)){t.length;const[e,n,r,i]=t;return dr(e,n,r,i)}return"string"==typeof t?Sr[t]:t},Mr=(t,e)=>n=>Boolean(ze(n)&&Ne.test(n)&&n.startsWith(t)||e&&Object.prototype.hasOwnProperty.call(n,e)),Pr=(t,e,n)=>r=>{if(!ze(r))return r;const[i,o,a,s]=r.match(Oe);return{[t]:parseFloat(i),[e]:parseFloat(o),[n]:parseFloat(a),alpha:void 0!==s?parseFloat(s):1}},Tr=De(0,255),Lr=Object.assign(Object.assign({},Ye),{transform:t=>Math.round(Tr(t))}),Ir={test:Mr("rgb","red"),parse:Pr("red","green","blue"),transform:({red:t,green:e,blue:n,alpha:r=1})=>"rgba("+Lr.transform(t)+", "+Lr.transform(e)+", "+Lr.transform(n)+", "+Re(qe.transform(r))+")"},Dr={test:Mr("#"),parse:function(t){let e="",n="",r="",i="";return t.length>5?(e=t.substr(1,2),n=t.substr(3,2),r=t.substr(5,2),i=t.substr(7,2)):(e=t.substr(1,1),n=t.substr(2,1),r=t.substr(3,1),i=t.substr(4,1),e+=e,n+=n,r+=r,i+=i),{red:parseInt(e,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:i?parseInt(i,16)/255:1}},transform:Ir.transform},Rr={test:Mr("hsl","hue"),parse:Pr("hue","saturation","lightness"),transform:({hue:t,saturation:e,lightness:n,alpha:r=1})=>"hsla("+Math.round(t)+", "+Ve.transform(Re(e))+", "+Ve.transform(Re(n))+", "+Re(qe.transform(r))+")"},Or={test:t=>Ir.test(t)||Dr.test(t)||Rr.test(t),parse:t=>Ir.test(t)?Ir.parse(t):Rr.test(t)?Rr.parse(t):Dr.parse(t),transform:t=>ze(t)?t:t.hasOwnProperty("red")?Ir.transform(t):Rr.transform(t)},Br="${c}",Nr="${n}";function zr(t){"number"==typeof t&&(t=`${t}`);const e=[];let n=0;const r=t.match(Be);r&&(n=r.length,t=t.replace(Be,Br),e.push(...r.map(Or.parse)));const i=t.match(Oe);return i&&(t=t.replace(Oe,Nr),e.push(...i.map(Ye.parse))),{values:e,numColors:n,tokenised:t}}function Fr(t){return zr(t).values}function jr(t){const{values:e,numColors:n,tokenised:r}=zr(t),i=e.length;return t=>{let e=r;for(let r=0;r<i;r++)e=e.replace(r<n?Br:Nr,r<n?Or.transform(t[r]):Re(t[r]));return e}}const Vr=t=>"number"==typeof t?0:t,Ur={test:function(t){var e,n,r,i;return isNaN(t)&&ze(t)&&(null!==(n=null===(e=t.match(Oe))||void 0===e?void 0:e.length)&&void 0!==n?n:0)+(null!==(i=null===(r=t.match(Be))||void 0===r?void 0:r.length)&&void 0!==i?i:0)>0},parse:Fr,createTransformer:jr,getAnimatableNone:function(t){const e=Fr(t);return jr(t)(e.map(Vr))}},Wr=(t,e)=>!("zIndex"===t||"number"!=typeof e&&!Array.isArray(e)&&("string"!=typeof e||!Ur.test(e)||e.startsWith("url("))),$r=()=>({type:"spring",stiffness:500,damping:25,restSpeed:10}),Hr=t=>({type:"spring",stiffness:550,damping:0===t?2*Math.sqrt(550):30,restSpeed:10}),Yr=()=>({type:"keyframes",ease:"linear",duration:.3}),qr=t=>({type:"keyframes",duration:.8,values:t}),Gr={x:$r,y:$r,z:$r,rotate:$r,rotateX:$r,rotateY:$r,rotateZ:$r,scaleX:Hr,scaleY:Hr,scale:Hr,opacity:Yr,backgroundColor:Yr,color:Yr,default:Hr},Qr=(t,e)=>{let n;return n=vn(e)?qr:Gr[t]||Gr.default,{to:e,...n(e)}},Jr=new Set(["brightness","contrast","saturate","opacity"]);function Xr(t){let[e,n]=t.slice(0,-1).split("(");if("drop-shadow"===e)return t;const[r]=n.match(Oe)||[];if(!r)return t;const i=n.replace(r,"");let o=Jr.has(e)?1:0;return r!==n&&(o*=100),e+"("+o+i+")"}const Kr=/([a-z-]*)\(.*?\)/g,Zr=Object.assign(Object.assign({},Ur),{getAnimatableNone:t=>{const e=t.match(Kr);return e?e.map(Xr).join(" "):t}}),ti={...Je,color:Or,backgroundColor:Or,outlineColor:Or,fill:Or,stroke:Or,borderColor:Or,borderTopColor:Or,borderRightColor:Or,borderBottomColor:Or,borderLeftColor:Or,filter:Zr,WebkitFilter:Zr},ei=t=>ti[t];function ni(t,e){var n;let r=ei(t);return r!==Zr&&(r=Ur),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,e)}const ri=1/60*1e3,ii="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),oi="undefined"!=typeof window?t=>window.requestAnimationFrame(t):t=>setTimeout((()=>t(ii())),ri);let ai=!0,si=!1,li=!1;const ci={delta:0,timestamp:0},ui=["read","update","preRender","render","postRender"],hi=ui.reduce(((t,e)=>(t[e]=function(t){let e=[],n=[],r=0,i=!1,o=!1;const a=new WeakSet,s={schedule:(t,o=!1,s=!1)=>{const l=s&&i,c=l?e:n;return o&&a.add(t),-1===c.indexOf(t)&&(c.push(t),l&&i&&(r=e.length)),t},cancel:t=>{const e=n.indexOf(t);-1!==e&&n.splice(e,1),a.delete(t)},process:l=>{if(i)o=!0;else{if(i=!0,[e,n]=[n,e],n.length=0,r=e.length,r)for(let n=0;n<r;n++){const r=e[n];r(l),a.has(r)&&(s.schedule(r),t())}i=!1,o&&(o=!1,s.process(l))}}};return s}((()=>si=!0)),t)),{}),di=ui.reduce(((t,e)=>{const n=hi[e];return t[e]=(t,e=!1,r=!1)=>(si||yi(),n.schedule(t,e,r)),t}),{}),fi=ui.reduce(((t,e)=>(t[e]=hi[e].cancel,t)),{}),pi=ui.reduce(((t,e)=>(t[e]=()=>hi[e].process(ci),t)),{}),mi=t=>hi[t].process(ci),gi=t=>{si=!1,ci.delta=ai?ri:Math.max(Math.min(t-ci.timestamp,40),1),ci.timestamp=t,li=!0,ui.forEach(mi),li=!1,si&&(ai=!1,oi(gi))},yi=()=>{si=!0,ai=!0,li||oi(gi)},vi=()=>ci,bi=di;function xi(t,e){const n=performance.now(),r=({timestamp:i})=>{const o=i-n;o>=e&&(fi.read(r),t(o-e))};return bi.read(r,!0),()=>fi.read(r)}const Ai=(t,e,n)=>Math.min(Math.max(n,t),e),wi=(t,e,n)=>-n*t+n*e+t;function Ci(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}const _i=(t,e,n)=>{const r=t*t;return Math.sqrt(Math.max(0,n*(e*e-r)+r))},ki=[Dr,Ir,Rr];function Si(t){const e=(n=t,ki.find((t=>t.test(n))));var n;Boolean(e);let r=e.parse(t);return e===Rr&&(r=function({hue:t,saturation:e,lightness:n,alpha:r}){t/=360,n/=100;let i=0,o=0,a=0;if(e/=100){const r=n<.5?n*(1+e):n+e-n*e,s=2*n-r;i=Ci(s,r,t+1/3),o=Ci(s,r,t),a=Ci(s,r,t-1/3)}else i=o=a=n;return{red:Math.round(255*i),green:Math.round(255*o),blue:Math.round(255*a),alpha:r}}(r)),r}const Ei=(t,e)=>{const n=Si(t),r=Si(e),i={...n};return t=>(i.red=_i(n.red,r.red,t),i.green=_i(n.green,r.green,t),i.blue=_i(n.blue,r.blue,t),i.alpha=wi(n.alpha,r.alpha,t),Ir.transform(i))};function Mi(t,e){return"number"==typeof t?n=>wi(t,e,n):Or.test(t)?Ei(t,e):Ii(t,e)}const Pi=(t,e)=>{const n=[...t],r=n.length,i=t.map(((t,n)=>Mi(t,e[n])));return t=>{for(let e=0;e<r;e++)n[e]=i[e](t);return n}},Ti=(t,e)=>{const n={...t,...e},r={};for(const i in n)void 0!==t[i]&&void 0!==e[i]&&(r[i]=Mi(t[i],e[i]));return t=>{for(const e in r)n[e]=r[e](t);return n}};function Li(t){const e=Ur.parse(t),n=e.length;let r=0,i=0;for(let t=0;t<n;t++)r||"number"==typeof e[t]?r++:i++;return{parsed:e,numNumbers:r,numColors:i}}const Ii=(t,e)=>{const n=Ur.createTransformer(e),r=Li(t),i=Li(e);return r.numColors===i.numColors&&r.numNumbers>=i.numNumbers?Qn(Pi(r.parsed,i.parsed),n):n=>`${n>0?e:t}`},Di=(t,e,n)=>{const r=e-t;return 0===r?1:(n-t)/r},Ri=(t,e)=>n=>wi(t,e,n);function Oi(t,e,{clamp:n=!0,ease:r,mixer:i}={}){const o=t.length;e.length,!r||!Array.isArray(r)||r.length,t[0]>t[o-1]&&(t=[...t].reverse(),e=[...e].reverse());const a=function(t,e,n){const r=[],i=n||("number"==typeof(o=t[0])?Ri:"string"==typeof o?Or.test(o)?Ei:Ii:Array.isArray(o)?Pi:"object"==typeof o?Ti:Ri);var o;const a=t.length-1;for(let n=0;n<a;n++){let o=i(t[n],t[n+1]);if(e){const t=Array.isArray(e)?e[n]:e;o=Qn(t,o)}r.push(o)}return r}(e,r,i),s=a.length,l=e=>{let n=0;if(s>1)for(;n<t.length-2&&!(e<t[n+1]);n++);const r=Di(t[n],t[n+1],e);return a[n](r)};return n?e=>l(Ai(t[0],t[o-1],e)):l}function Bi(t,e){return t.map((()=>e||yr)).splice(0,t.length-1)}function Ni(t,e){return t*Math.sqrt(1-e*e)}const zi=["duration","bounce"],Fi=["stiffness","damping","mass"];function ji(t,e){return e.some((e=>void 0!==t[e]))}function Vi({from:t=0,to:e=1,restSpeed:n=2,restDelta:r=.01,...i}){const o={done:!1,value:t};let{stiffness:a,damping:s,mass:l,velocity:c,duration:u,isResolvedFromDuration:h}=function(t){let e={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...t};if(!ji(t,Fi)&&ji(t,zi)){const n=function({duration:t=800,bounce:e=.25,velocity:n=0,mass:r=1}){let i,o,a=1-e;a=Ai(.05,1,a),t=Ai(.01,10,t/1e3),a<1?(i=e=>{const r=e*a,i=r*t;return.001-(r-n)/Ni(e,a)*Math.exp(-i)},o=e=>{const r=e*a*t,o=r*n+n,s=Math.pow(a,2)*Math.pow(e,2)*t,l=Math.exp(-r),c=Ni(Math.pow(e,2),a);return(.001-i(e)>0?-1:1)*((o-s)*l)/c}):(i=e=>Math.exp(-e*t)*((e-n)*t+1)-.001,o=e=>Math.exp(-e*t)*(t*t*(n-e)));const s=function(t,e,n){let r=n;for(let n=1;n<12;n++)r-=t(r)/e(r);return r}(i,o,5/t);if(t*=1e3,isNaN(s))return{stiffness:100,damping:10,duration:t};{const e=Math.pow(s,2)*r;return{stiffness:e,damping:2*a*Math.sqrt(r*e),duration:t}}}(t);e={...e,...n,velocity:0,mass:1},e.isResolvedFromDuration=!0}return e}(i),d=Ui,f=Ui;function p(){const n=c?-c/1e3:0,i=e-t,o=s/(2*Math.sqrt(a*l)),u=Math.sqrt(a/l)/1e3;if(void 0===r&&(r=Math.min(Math.abs(e-t)/100,.4)),o<1){const t=Ni(u,o);d=r=>{const a=Math.exp(-o*u*r);return e-a*((n+o*u*i)/t*Math.sin(t*r)+i*Math.cos(t*r))},f=e=>{const r=Math.exp(-o*u*e);return o*u*r*(Math.sin(t*e)*(n+o*u*i)/t+i*Math.cos(t*e))-r*(Math.cos(t*e)*(n+o*u*i)-t*i*Math.sin(t*e))}}else if(1===o)d=t=>e-Math.exp(-u*t)*(i+(n+u*i)*t);else{const t=u*Math.sqrt(o*o-1);d=r=>{const a=Math.exp(-o*u*r),s=Math.min(t*r,300);return e-a*((n+o*u*i)*Math.sinh(s)+t*i*Math.cosh(s))/t}}}return p(),{next:t=>{const i=d(t);if(h)o.done=t>=u;else{const a=1e3*f(t),s=Math.abs(a)<=n,l=Math.abs(e-i)<=r;o.done=s&&l}return o.value=o.done?e:i,o},flipTarget:()=>{c=-c,[t,e]=[e,t],p()}}}Vi.needsInterpolation=(t,e)=>"string"==typeof t||"string"==typeof e;const Ui=t=>0,Wi={decay:function({velocity:t=0,from:e=0,power:n=.8,timeConstant:r=350,restDelta:i=.5,modifyTarget:o}){const a={done:!1,value:e};let s=n*t;const l=e+s,c=void 0===o?l:o(l);return c!==l&&(s=c-e),{next:t=>{const e=-s*Math.exp(-t/r);return a.done=!(e>i||e<-i),a.value=a.done?c:c+e,a},flipTarget:()=>{}}},keyframes:function({from:t=0,to:e=1,ease:n,offset:r,duration:i=300}){const o={done:!1,value:t},a=Array.isArray(e)?e:[t,e],s=function(t,e){return t.map((t=>t*e))}(r&&r.length===a.length?r:function(t){const e=t.length;return t.map(((t,n)=>0!==n?n/(e-1):0))}(a),i);function l(){return Oi(s,a,{ease:Array.isArray(n)?n:Bi(a,n)})}let c=l();return{next:t=>(o.value=c(t),o.done=t>=i,o),flipTarget:()=>{a.reverse(),c=l()}}},spring:Vi};function $i(t,e,n=0){return t-e-n}const Hi=t=>{const e=({delta:e})=>t(e);return{start:()=>bi.update(e,!0),stop:()=>fi.update(e)}};function Yi({from:t,autoplay:e=!0,driver:n=Hi,elapsed:r=0,repeat:i=0,repeatType:o="loop",repeatDelay:a=0,onPlay:s,onStop:l,onComplete:c,onRepeat:u,onUpdate:h,type:d="keyframes",...f}){var p,m;let g,y,v,{to:b}=f,x=0,A=f.duration,w=!1,C=!0;const _=Wi[Array.isArray(b)?"keyframes":d];(null===(m=(p=_).needsInterpolation)||void 0===m?void 0:m.call(p,t,b))&&(v=Oi([0,100],[t,b],{clamp:!1}),t=0,b=100);const k=_({...f,from:t,to:b});return e&&(null==s||s(),g=n((function(t){if(C||(t=-t),r+=t,!w){const t=k.next(Math.max(0,r));y=t.value,v&&(y=v(y)),w=C?t.done:r<=0}null==h||h(y),w&&(0===x&&(null!=A||(A=r)),x<i?function(t,e,n,r){return r?t>=e+n:t<=-n}(r,A,a,C)&&(x++,"reverse"===o?(C=x%2==0,r=function(t,e=0,n=0,r=!0){return r?$i(e+-t,e,n):e-(t-e)+n}(r,A,a,C)):(r=$i(r,A,a),"mirror"===o&&k.flipTarget()),w=!1,u&&u()):(g.stop(),c&&c()))})),g.start()),{stop:()=>{null==l||l(),g.stop()}}}function qi(t,e){return e?t*(1e3/e):0}let Gi=!1;function Qi({ease:t,times:e,yoyo:n,flip:r,loop:i,...o}){const a={...o};return e&&(a.offset=e),o.duration&&(a.duration=cr(o.duration)),o.repeatDelay&&(a.repeatDelay=cr(o.repeatDelay)),t&&(a.ease=(t=>Array.isArray(t)&&"number"!=typeof t[0])(t)?t.map(Er):Er(t)),"tween"===o.type&&(a.type="keyframes"),(n||i||r)&&(Gi=!0,n?a.repeatType="reverse":i?a.repeatType="loop":r&&(a.repeatType="mirror"),a.repeat=i||n||r||o.repeat),"spring"!==o.type&&(a.type="keyframes"),a}function Ji(t,e,n){return Array.isArray(e.to)&&void 0===t.duration&&(t.duration=.8),function(t){Array.isArray(t.to)&&null===t.to[0]&&(t.to=[...t.to],t.to[0]=t.from)}(e),function({when:t,delay:e,delayChildren:n,staggerChildren:r,staggerDirection:i,repeat:o,repeatType:a,repeatDelay:s,from:l,...c}){return!!Object.keys(c).length}(t)||(t={...t,...Qr(n,e.to)}),{...e,...Qi(t)}}function Xi(t){return 0===t||"string"==typeof t&&0===parseFloat(t)&&-1===t.indexOf(" ")}function Ki(t){return"number"==typeof t?0:ni("",t)}function Zi(t,e){return t[e]||t.default||t}function to(t,e,n,r={}){return e.start((i=>{let o;const a=function(t,e,n,r,i){const o=Zi(r,t)||{};let a=void 0!==o.from?o.from:e.get();const s=Wr(t,n);return"none"===a&&s&&"string"==typeof n?a=ni(t,n):Xi(a)&&"string"==typeof n?a=Ki(n):!Array.isArray(n)&&Xi(n)&&"string"==typeof a&&(n=Ki(a)),Wr(t,a)&&s&&!1!==o.type?function(){const r={from:a,to:n,velocity:e.getVelocity(),onComplete:i,onUpdate:t=>e.set(t)};return"inertia"===o.type||"decay"===o.type?function({from:t=0,velocity:e=0,min:n,max:r,power:i=.8,timeConstant:o=750,bounceStiffness:a=500,bounceDamping:s=10,restDelta:l=1,modifyTarget:c,driver:u,onUpdate:h,onComplete:d,onStop:f}){let p;function m(t){return void 0!==n&&t<n||void 0!==r&&t>r}function g(t){return void 0===n?r:void 0===r||Math.abs(n-t)<Math.abs(r-t)?n:r}function y(t){null==p||p.stop(),p=Yi({...t,driver:u,onUpdate:e=>{var n;null==h||h(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:d,onStop:f})}function v(t){y({type:"spring",stiffness:a,damping:s,restDelta:l,...t})}if(m(t))v({from:t,velocity:e,to:g(t)});else{let r=i*e+t;void 0!==c&&(r=c(r));const a=g(r),s=a===n?-1:1;let u,h;const d=t=>{u=h,h=t,e=qi(t-u,vi().delta),(1===s&&t>a||-1===s&&t<a)&&v({from:t,to:a,velocity:e})};y({type:"decay",from:t,velocity:e,timeConstant:o,power:i,restDelta:l,modifyTarget:c,onUpdate:m(r)?d:void 0})}return{stop:()=>null==p?void 0:p.stop()}}({...r,...o}):Yi({...Ji(o,r,t),onUpdate:t=>{r.onUpdate(t),o.onUpdate&&o.onUpdate(t)},onComplete:()=>{r.onComplete(),o.onComplete&&o.onComplete()}})}:function(){const t=bn(n);return e.set(t),i(),o.onUpdate&&o.onUpdate(t),o.onComplete&&o.onComplete(),{stop:()=>{}}}}(t,e,n,r,i),s=function(t,e){var n,r;return null!==(r=null!==(n=(Zi(t,e)||{}).delay)&&void 0!==n?n:t.delay)&&void 0!==r?r:0}(r,t),l=()=>o=a();let c;return s?c=xi(l,cr(s)):l(),()=>{c&&c(),o&&o.stop()}}))}function eo(t,e){-1===t.indexOf(e)&&t.push(e)}function no(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class ro{constructor(){this.subscriptions=[]}add(t){return eo(this.subscriptions,t),()=>no(this.subscriptions,t)}notify(t,e,n){const r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](t,e,n);else for(let i=0;i<r;i++){const r=this.subscriptions[i];r&&r(t,e,n)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}class io{constructor(t){var e;this.version="7.6.18",this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new ro,this.velocityUpdateSubscribers=new ro,this.renderSubscribers=new ro,this.canTrackVelocity=!1,this.updateAndNotify=(t,e=!0)=>{this.prev=this.current,this.current=t;const{delta:n,timestamp:r}=vi();this.lastUpdated!==r&&(this.timeDelta=n,this.lastUpdated=r,bi.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.updateSubscribers.notify(this.current),this.velocityUpdateSubscribers.getSize()&&this.velocityUpdateSubscribers.notify(this.getVelocity()),e&&this.renderSubscribers.notify(this.current)},this.scheduleVelocityCheck=()=>bi.postRender(this.velocityCheck),this.velocityCheck=({timestamp:t})=>{t!==this.lastUpdated&&(this.prev=this.current,this.velocityUpdateSubscribers.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=t,this.canTrackVelocity=(e=this.current,!isNaN(parseFloat(e)))}onChange(t){return this.updateSubscribers.add(t)}clearListeners(){this.updateSubscribers.clear()}onRenderRequest(t){return t(this.get()),this.renderSubscribers.add(t)}attach(t){this.passiveEffect=t}set(t,e=!0){e&&this.passiveEffect?this.passiveEffect(t,this.updateAndNotify):this.updateAndNotify(t,e)}get(){return this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?qi(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(t){return this.stop(),new Promise((e=>{this.hasAnimated=!0,this.stopAnimation=t(e)})).then((()=>this.clearAnimation()))}stop(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()}isAnimating(){return!!this.stopAnimation}clearAnimation(){this.stopAnimation=null}destroy(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()}}function oo(t){return new io(t)}const ao=t=>e=>e.test(t),so=[Ye,Ue,Ve,je,$e,We,{test:t=>"auto"===t,parse:t=>t}],lo=t=>so.find(ao(t)),co=[...so,Or,Ur],uo=t=>co.find(ao(t));function ho(t,e,n){const r=t.getProps();return yn(r,e,void 0!==n?n:r.custom,function(t){const e={};return t.values.forEach(((t,n)=>e[n]=t.get())),e}(t),function(t){const e={};return t.values.forEach(((t,n)=>e[n]=t.getVelocity())),e}(t))}function fo(t,e,n){t.hasValue(e)?t.getValue(e).set(n):t.addValue(e,oo(n))}function po(t,e){if(e)return(e[t]||e.default||e).from}function mo(t){return Boolean(Me(t)&&t.add)}function go(t,e,n={}){var r;const i=ho(t,e,n.custom);let{transition:o=t.getDefaultTransition()||{}}=i||{};n.transitionOverride&&(o=n.transitionOverride);const a=i?()=>yo(t,i,n):()=>Promise.resolve(),s=(null===(r=t.variantChildren)||void 0===r?void 0:r.size)?(r=0)=>{const{delayChildren:i=0,staggerChildren:a,staggerDirection:s}=o;return function(t,e,n=0,r=0,i=1,o){const a=[],s=(t.variantChildren.size-1)*r,l=1===i?(t=0)=>t*r:(t=0)=>s-t*r;return Array.from(t.variantChildren).sort(vo).forEach(((t,r)=>{a.push(go(t,e,{...o,delay:n+l(r)}).then((()=>t.notify("AnimationComplete",e))))})),Promise.all(a)}(t,e,i+r,a,s,n)}:()=>Promise.resolve(),{when:l}=o;if(l){const[t,e]="beforeChildren"===l?[a,s]:[s,a];return t().then(e)}return Promise.all([a(),s(n.delay)])}function yo(t,e,{delay:n=0,transitionOverride:r,type:i}={}){var o;let{transition:a=t.getDefaultTransition(),transitionEnd:s,...l}=t.makeTargetAnimatable(e);const c=t.getValue("willChange");r&&(a=r);const u=[],h=i&&(null===(o=t.animationState)||void 0===o?void 0:o.getState()[i]);for(const e in l){const r=t.getValue(e),i=l[e];if(!r||void 0===i||h&&bo(h,e))continue;let o={delay:n,...a};t.shouldReduceMotion&&Se.has(e)&&(o={...o,type:!1,delay:0});let s=to(e,r,i,o);mo(c)&&(c.add(e),s=s.then((()=>c.remove(e)))),u.push(s)}return Promise.all(u).then((()=>{s&&function(t,e){const n=ho(t,e);let{transitionEnd:r={},transition:i={},...o}=n?t.makeTargetAnimatable(n,!1):{};o={...o,...r};for(const e in o)fo(t,e,bn(o[e]))}(t,s)}))}function vo(t,e){return t.sortNodePosition(e)}function bo({protectedKeys:t,needsAnimating:e},n){const r=t.hasOwnProperty(n)&&!0!==e[n];return e[n]=!1,r}const xo=[kn.Animate,kn.InView,kn.Focus,kn.Hover,kn.Tap,kn.Drag,kn.Exit],Ao=[...xo].reverse(),wo=xo.length;function Co(t){let e=function(t){return e=>Promise.all(e.map((({animation:e,options:n})=>function(t,e,n={}){let r;if(t.notify("AnimationStart",e),Array.isArray(e)){const i=e.map((e=>go(t,e,n)));r=Promise.all(i)}else if("string"==typeof e)r=go(t,e,n);else{const i="function"==typeof e?ho(t,e,n.custom):e;r=yo(t,i,n)}return r.then((()=>t.notify("AnimationComplete",e)))}(t,e,n))))}(t);const n={[kn.Animate]:_o(!0),[kn.InView]:_o(),[kn.Hover]:_o(),[kn.Tap]:_o(),[kn.Drag]:_o(),[kn.Focus]:_o(),[kn.Exit]:_o()};let r=!0;const i=(e,n)=>{const r=ho(t,n);if(r){const{transition:t,transitionEnd:n,...i}=r;e={...e,...i,...n}}return e};function o(o,a){var s;const l=t.getProps(),c=t.getVariantContext(!0)||{},u=[],h=new Set;let d={},f=1/0;for(let e=0;e<wo;e++){const g=Ao[e],y=n[g],v=null!==(s=l[g])&&void 0!==s?s:c[g],b=ie(v),x=g===a?y.isActive:null;!1===x&&(f=e);let A=v===c[g]&&v!==l[g]&&b;if(A&&r&&t.manuallyAnimateOnMount&&(A=!1),y.protectedKeys={...d},!y.isActive&&null===x||!v&&!y.prevProp||oe(v)||"boolean"==typeof v)continue;const w=(p=y.prevProp,"string"==typeof(m=v)?m!==p:!!Array.isArray(m)&&!lr(m,p));let C=w||g===a&&y.isActive&&!A&&b||e>f&&b;const _=Array.isArray(v)?v:[v];let k=_.reduce(i,{});!1===x&&(k={});const{prevResolvedValues:S={}}=y,E={...S,...k},M=t=>{C=!0,h.delete(t),y.needsAnimating[t]=!0};for(const t in E){const e=k[t],n=S[t];d.hasOwnProperty(t)||(e!==n?vn(e)&&vn(n)?!lr(e,n)||w?M(t):y.protectedKeys[t]=!0:void 0!==e?M(t):h.add(t):void 0!==e&&h.has(t)?M(t):y.protectedKeys[t]=!0)}y.prevProp=v,y.prevResolvedValues=k,y.isActive&&(d={...d,...k}),r&&t.blockInitialAnimation&&(C=!1),C&&!A&&u.push(..._.map((t=>({animation:t,options:{type:g,...o}}))))}var p,m;if(h.size){const e={};h.forEach((n=>{const r=t.getBaseTarget(n);void 0!==r&&(e[n]=r)})),u.push({animation:e})}let g=Boolean(u.length);return r&&!1===l.initial&&!t.manuallyAnimateOnMount&&(g=!1),r=!1,g?e(u):Promise.resolve()}return{animateChanges:o,setActive:function(e,r,i){var a;if(n[e].isActive===r)return Promise.resolve();null===(a=t.variantChildren)||void 0===a||a.forEach((t=>{var n;return null===(n=t.animationState)||void 0===n?void 0:n.setActive(e,r)})),n[e].isActive=r;const s=o(i,e);for(const t in n)n[t].protectedKeys={};return s},setAnimateFunction:function(n){e=n(t)},getState:()=>n}}function _o(t=!1){return{isActive:t,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}const ko={animation:or((({visualElement:t,animate:n})=>{t.animationState||(t.animationState=Co(t)),oe(n)&&(0,e.useEffect)((()=>n.subscribe(t)),[n])})),exit:or((t=>{const{custom:n,visualElement:r}=t,[i,o]=sr(),a=(0,e.useContext)(Zt);(0,e.useEffect)((()=>{r.isPresent=i;const t=r.animationState&&r.animationState.setActive(kn.Exit,!i,{custom:a&&a.custom||n});t&&!i&&t.then(o)}),[i])}))},So=(t,e)=>Math.abs(t-e);class Eo{constructor(t,e,{transformPagePoint:n}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=()=>{if(!this.lastMoveEvent||!this.lastMoveEventInfo)return;const t=To(this.lastMoveEventInfo,this.history),e=null!==this.startEvent,n=function(t,e){const n=So(t.x,e.x),r=So(t.y,e.y);return Math.sqrt(n**2+r**2)}(t.offset,{x:0,y:0})>=3;if(!e&&!n)return;const{point:r}=t,{timestamp:i}=vi();this.history.push({...r,timestamp:i});const{onStart:o,onMove:a}=this.handlers;e||(o&&o(this.lastMoveEvent,t),this.startEvent=this.lastMoveEvent),a&&a(this.lastMoveEvent,t)},this.handlePointerMove=(t,e)=>{this.lastMoveEvent=t,this.lastMoveEventInfo=Mo(e,this.transformPagePoint),Mn(t)&&0===t.buttons?this.handlePointerUp(t,e):bi.update(this.updatePoint,!0)},this.handlePointerUp=(t,e)=>{this.end();const{onEnd:n,onSessionEnd:r}=this.handlers,i=To(Mo(e,this.transformPagePoint),this.history);this.startEvent&&n&&n(t,i),r&&r(t,i)},Pn(t)&&t.touches.length>1)return;this.handlers=e,this.transformPagePoint=n;const r=Mo(Dn(t),this.transformPagePoint),{point:i}=r,{timestamp:o}=vi();this.history=[{...i,timestamp:o}];const{onSessionStart:a}=e;a&&a(t,To(r,this.history)),this.removeListeners=Qn(zn(window,"pointermove",this.handlePointerMove),zn(window,"pointerup",this.handlePointerUp),zn(window,"pointercancel",this.handlePointerUp))}updateHandlers(t){this.handlers=t}end(){this.removeListeners&&this.removeListeners(),fi.update(this.updatePoint)}}function Mo(t,e){return e?{point:e(t.point)}:t}function Po(t,e){return{x:t.x-e.x,y:t.y-e.y}}function To({point:t},e){return{point:t,delta:Po(t,Io(e)),offset:Po(t,Lo(e)),velocity:Do(e,.1)}}function Lo(t){return t[0]}function Io(t){return t[t.length-1]}function Do(t,e){if(t.length<2)return{x:0,y:0};let n=t.length-1,r=null;const i=Io(t);for(;n>=0&&(r=t[n],!(i.timestamp-r.timestamp>cr(e)));)n--;if(!r)return{x:0,y:0};const o=(i.timestamp-r.timestamp)/1e3;if(0===o)return{x:0,y:0};const a={x:(i.x-r.x)/o,y:(i.y-r.y)/o};return a.x===1/0&&(a.x=0),a.y===1/0&&(a.y=0),a}function Ro(t){return t.max-t.min}function Oo(t,e=0,n=.01){return Math.abs(t-e)<=n}function Bo(t,e,n,r=.5){t.origin=r,t.originPoint=wi(e.min,e.max,t.origin),t.scale=Ro(n)/Ro(e),(Oo(t.scale,1,1e-4)||isNaN(t.scale))&&(t.scale=1),t.translate=wi(n.min,n.max,t.origin)-t.originPoint,(Oo(t.translate)||isNaN(t.translate))&&(t.translate=0)}function No(t,e,n,r){Bo(t.x,e.x,n.x,null==r?void 0:r.originX),Bo(t.y,e.y,n.y,null==r?void 0:r.originY)}function zo(t,e,n){t.min=n.min+e.min,t.max=t.min+Ro(e)}function Fo(t,e,n){t.min=e.min-n.min,t.max=t.min+Ro(e)}function jo(t,e,n){Fo(t.x,e.x,n.x),Fo(t.y,e.y,n.y)}function Vo(t,e,n){return{min:void 0!==e?t.min+e:void 0,max:void 0!==n?t.max+n-(t.max-t.min):void 0}}function Uo(t,e){let n=e.min-t.min,r=e.max-t.max;return e.max-e.min<t.max-t.min&&([n,r]=[r,n]),{min:n,max:r}}const Wo=.35;function $o(t,e,n){return{min:Ho(t,e),max:Ho(t,n)}}function Ho(t,e){var n;return"number"==typeof t?t:null!==(n=t[e])&&void 0!==n?n:0}function Yo(t){return[t("x"),t("y")]}function qo({top:t,left:e,right:n,bottom:r}){return{x:{min:e,max:n},y:{min:t,max:r}}}function Go(t){return void 0===t||1===t}function Qo({scale:t,scaleX:e,scaleY:n}){return!Go(t)||!Go(e)||!Go(n)}function Jo(t){return Qo(t)||Xo(t)||t.z||t.rotate||t.rotateX||t.rotateY}function Xo(t){return Ko(t.x)||Ko(t.y)}function Ko(t){return t&&"0%"!==t}function Zo(t,e,n){return n+e*(t-n)}function ta(t,e,n,r,i){return void 0!==i&&(t=Zo(t,i,r)),Zo(t,n,r)+e}function ea(t,e=0,n=1,r,i){t.min=ta(t.min,e,n,r,i),t.max=ta(t.max,e,n,r,i)}function na(t,{x:e,y:n}){ea(t.x,e.translate,e.scale,e.originPoint),ea(t.y,n.translate,n.scale,n.originPoint)}function ra(t){return Number.isInteger(t)||t>1.0000000000001||t<.999999999999?t:1}function ia(t,e){t.min=t.min+e,t.max=t.max+e}function oa(t,e,[n,r,i]){const o=void 0!==e[i]?e[i]:.5,a=wi(t.min,t.max,o);ea(t,e[n],e[r],a,e.scale)}const aa=["x","scaleX","originX"],sa=["y","scaleY","originY"];function la(t,e){oa(t.x,e,aa),oa(t.y,e,sa)}function ca(t,e){return qo(function(t,e){if(!e)return t;const n=e({x:t.left,y:t.top}),r=e({x:t.right,y:t.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(t.getBoundingClientRect(),e))}const ua=new WeakMap;class ha{constructor(t){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=t}start(t,{snapToCursor:e=!1}={}){!1!==this.visualElement.isPresent&&(this.panSession=new Eo(t,{onSessionStart:t=>{this.stopAnimation(),e&&this.snapToCursor(Dn(t,"page").point)},onStart:(t,e)=>{var n;const{drag:r,dragPropagation:i,onDragStart:o}=this.getProps();(!r||i||(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Wn(r),this.openGlobalLock))&&(this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),Yo((t=>{var e,n;let r=this.getAxisMotionValue(t).get()||0;if(Ve.test(r)){const i=null===(n=null===(e=this.visualElement.projection)||void 0===e?void 0:e.layout)||void 0===n?void 0:n.layoutBox[t];i&&(r=Ro(i)*(parseFloat(r)/100))}this.originPoint[t]=r})),null==o||o(t,e),null===(n=this.visualElement.animationState)||void 0===n||n.setActive(kn.Drag,!0))},onMove:(t,e)=>{const{dragPropagation:n,dragDirectionLock:r,onDirectionLock:i,onDrag:o}=this.getProps();if(!n&&!this.openGlobalLock)return;const{offset:a}=e;if(r&&null===this.currentDirection)return this.currentDirection=function(t,e=10){let n=null;return Math.abs(t.y)>e?n="y":Math.abs(t.x)>e&&(n="x"),n}(a),void(null!==this.currentDirection&&(null==i||i(this.currentDirection)));this.updateAxis("x",e.point,a),this.updateAxis("y",e.point,a),this.visualElement.render(),null==o||o(t,e)},onSessionEnd:(t,e)=>this.stop(t,e)},{transformPagePoint:this.visualElement.getTransformPagePoint()}))}stop(t,e){const n=this.isDragging;if(this.cancel(),!n)return;const{velocity:r}=e;this.startAnimation(r);const{onDragEnd:i}=this.getProps();null==i||i(t,e)}cancel(){var t,e;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(t=this.panSession)||void 0===t||t.end(),this.panSession=void 0;const{dragPropagation:n}=this.getProps();!n&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(e=this.visualElement.animationState)||void 0===e||e.setActive(kn.Drag,!1)}updateAxis(t,e,n){const{drag:r}=this.getProps();if(!n||!da(t,r,this.currentDirection))return;const i=this.getAxisMotionValue(t);let o=this.originPoint[t]+n[t];this.constraints&&this.constraints[t]&&(o=function(t,{min:e,max:n},r){return void 0!==e&&t<e?t=r?wi(e,t,r.min):Math.max(t,e):void 0!==n&&t>n&&(t=r?wi(n,t,r.max):Math.min(t,n)),t}(o,this.constraints[t],this.elastic[t])),i.set(o)}resolveConstraints(){const{dragConstraints:t,dragElastic:e}=this.getProps(),{layout:n}=this.visualElement.projection||{},r=this.constraints;t&&re(t)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!t||!n)&&function(t,{top:e,left:n,bottom:r,right:i}){return{x:Vo(t.x,n,i),y:Vo(t.y,e,r)}}(n.layoutBox,t),this.elastic=function(t=Wo){return!1===t?t=0:!0===t&&(t=Wo),{x:$o(t,"left","right"),y:$o(t,"top","bottom")}}(e),r!==this.constraints&&n&&this.constraints&&!this.hasMutatedConstraints&&Yo((t=>{this.getAxisMotionValue(t)&&(this.constraints[t]=function(t,e){const n={};return void 0!==e.min&&(n.min=e.min-t.min),void 0!==e.max&&(n.max=e.max-t.min),n}(n.layoutBox[t],this.constraints[t]))}))}resolveRefConstraints(){const{dragConstraints:t,onMeasureDragConstraints:e}=this.getProps();if(!t||!re(t))return!1;const n=t.current,{projection:r}=this.visualElement;if(!r||!r.layout)return!1;const i=function(t,e,n){const r=ca(t,n),{scroll:i}=e;return i&&(ia(r.x,i.offset.x),ia(r.y,i.offset.y)),r}(n,r.root,this.visualElement.getTransformPagePoint());let o=function(t,e){return{x:Uo(t.x,e.x),y:Uo(t.y,e.y)}}(r.layout.layoutBox,i);if(e){const t=e(function({x:t,y:e}){return{top:e.min,right:t.max,bottom:e.max,left:t.min}}(o));this.hasMutatedConstraints=!!t,t&&(o=qo(t))}return o}startAnimation(t){const{drag:e,dragMomentum:n,dragElastic:r,dragTransition:i,dragSnapToOrigin:o,onDragTransitionEnd:a}=this.getProps(),s=this.constraints||{},l=Yo((a=>{var l;if(!da(a,e,this.currentDirection))return;let c=null!==(l=null==s?void 0:s[a])&&void 0!==l?l:{};o&&(c={min:0,max:0});const u=r?200:1e6,h=r?40:1e7,d={type:"inertia",velocity:n?t[a]:0,bounceStiffness:u,bounceDamping:h,timeConstant:750,restDelta:1,restSpeed:10,...i,...c};return this.startAxisValueAnimation(a,d)}));return Promise.all(l).then(a)}startAxisValueAnimation(t,e){return to(t,this.getAxisMotionValue(t),0,e)}stopAnimation(){Yo((t=>this.getAxisMotionValue(t).stop()))}getAxisMotionValue(t){var e,n;const r="_drag"+t.toUpperCase();return this.visualElement.getProps()[r]||this.visualElement.getValue(t,null!==(n=null===(e=this.visualElement.getProps().initial)||void 0===e?void 0:e[t])&&void 0!==n?n:0)}snapToCursor(t){Yo((e=>{const{drag:n}=this.getProps();if(!da(e,n,this.currentDirection))return;const{projection:r}=this.visualElement,i=this.getAxisMotionValue(e);if(r&&r.layout){const{min:n,max:o}=r.layout.layoutBox[e];i.set(t[e]-wi(n,o,.5))}}))}scalePositionWithinConstraints(){var t;if(!this.visualElement.current)return;const{drag:e,dragConstraints:n}=this.getProps(),{projection:r}=this.visualElement;if(!re(n)||!r||!this.constraints)return;this.stopAnimation();const i={x:0,y:0};Yo((t=>{const e=this.getAxisMotionValue(t);if(e){const n=e.get();i[t]=function(t,e){let n=.5;const r=Ro(t),i=Ro(e);return i>r?n=Di(e.min,e.max-r,t.min):r>i&&(n=Di(t.min,t.max-i,e.min)),Ai(0,1,n)}({min:n,max:n},this.constraints[t])}}));const{transformTemplate:o}=this.visualElement.getProps();this.visualElement.current.style.transform=o?o({},""):"none",null===(t=r.root)||void 0===t||t.updateScroll(),r.updateLayout(),this.resolveConstraints(),Yo((t=>{if(!da(t,e,null))return;const n=this.getAxisMotionValue(t),{min:r,max:o}=this.constraints[t];n.set(wi(r,o,i[t]))}))}addListeners(){var t;if(!this.visualElement.current)return;ua.set(this.visualElement,this);const e=zn(this.visualElement.current,"pointerdown",(t=>{const{drag:e,dragListener:n=!0}=this.getProps();e&&n&&this.start(t)})),n=()=>{const{dragConstraints:t}=this.getProps();re(t)&&(this.constraints=this.resolveRefConstraints())},{projection:r}=this.visualElement,i=r.addEventListener("measure",n);r&&!r.layout&&(null===(t=r.root)||void 0===t||t.updateScroll(),r.updateLayout()),n();const o=Sn(window,"resize",(()=>this.scalePositionWithinConstraints())),a=r.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e})=>{this.isDragging&&e&&(Yo((e=>{const n=this.getAxisMotionValue(e);n&&(this.originPoint[e]+=t[e].translate,n.set(n.get()+t[e].translate))})),this.visualElement.render())}));return()=>{o(),e(),i(),null==a||a()}}getProps(){const t=this.visualElement.getProps(),{drag:e=!1,dragDirectionLock:n=!1,dragPropagation:r=!1,dragConstraints:i=!1,dragElastic:o=Wo,dragMomentum:a=!0}=t;return{...t,drag:e,dragDirectionLock:n,dragPropagation:r,dragConstraints:i,dragElastic:o,dragMomentum:a}}}function da(t,e,n){return!(!0!==e&&e!==t||null!==n&&n!==t)}const fa={pan:or((function({onPan:t,onPanStart:n,onPanEnd:r,onPanSessionStart:i,visualElement:o}){const a=t||n||r||i,s=(0,e.useRef)(null),{transformPagePoint:l}=(0,e.useContext)(Xt),c={onSessionStart:i,onStart:n,onMove:t,onEnd:(t,e)=>{s.current=null,r&&r(t,e)}};(0,e.useEffect)((()=>{null!==s.current&&s.current.updateHandlers(c)})),Fn(o,"pointerdown",a&&function(t){s.current=new Eo(t,c,{transformPagePoint:l})}),qn((()=>s.current&&s.current.end()))})),drag:or((function(t){const{dragControls:n,visualElement:r}=t,i=de((()=>new ha(r)));(0,e.useEffect)((()=>n&&n.subscribe(i)),[i,n]),(0,e.useEffect)((()=>i.addListeners()),[i])}))};function pa(t){return"string"==typeof t&&t.startsWith("var(--")}const ma=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function ga(t,e,n=1){const[r,i]=function(t){const e=ma.exec(t);if(!e)return[,];const[,n,r]=e;return[n,r]}(t);if(!r)return;const o=window.getComputedStyle(e).getPropertyValue(r);return o?o.trim():pa(i)?ga(i,e,n+1):i}const ya=new Set(["width","height","top","left","right","bottom","x","y"]),va=t=>ya.has(t),ba=(t,e)=>{t.set(e,!1),t.set(e)},xa=t=>t===Ye||t===Ue;var Aa;!function(t){t.width="width",t.height="height",t.left="left",t.right="right",t.top="top",t.bottom="bottom"}(Aa||(Aa={}));const wa=(t,e)=>parseFloat(t.split(", ")[e]),Ca=(t,e)=>(n,{transform:r})=>{if("none"===r||!r)return 0;const i=r.match(/^matrix3d\((.+)\)$/);if(i)return wa(i[1],e);{const e=r.match(/^matrix\((.+)\)$/);return e?wa(e[1],t):0}},_a=new Set(["x","y","z"]),ka=ke.filter((t=>!_a.has(t))),Sa={width:({x:t},{paddingLeft:e="0",paddingRight:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),height:({y:t},{paddingTop:e="0",paddingBottom:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),top:(t,{top:e})=>parseFloat(e),left:(t,{left:e})=>parseFloat(e),bottom:({y:t},{top:e})=>parseFloat(e)+(t.max-t.min),right:({x:t},{left:e})=>parseFloat(e)+(t.max-t.min),x:Ca(4,13),y:Ca(5,14)};function Ea(t,e,n,r){return(t=>Object.keys(t).some(va))(e)?((t,e,n={},r={})=>{e={...e},r={...r};const i=Object.keys(e).filter(va);let o=[],a=!1;const s=[];if(i.forEach((i=>{const l=t.getValue(i);if(!t.hasValue(i))return;let c=n[i],u=lo(c);const h=e[i];let d;if(vn(h)){const t=h.length,e=null===h[0]?1:0;c=h[e],u=lo(c);for(let n=e;n<t;n++)d?lo(h[n]):(d=lo(h[n]),d===u||xa(u)&&xa(d))}else d=lo(h);if(u!==d)if(xa(u)&&xa(d)){const t=l.get();"string"==typeof t&&l.set(parseFloat(t)),"string"==typeof h?e[i]=parseFloat(h):Array.isArray(h)&&d===Ue&&(e[i]=h.map(parseFloat))}else(null==u?void 0:u.transform)&&(null==d?void 0:d.transform)&&(0===c||0===h)?0===c?l.set(d.transform(c)):e[i]=u.transform(h):(a||(o=function(t){const e=[];return ka.forEach((n=>{const r=t.getValue(n);void 0!==r&&(e.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),e.length&&t.render(),e}(t),a=!0),s.push(i),r[i]=void 0!==r[i]?r[i]:e[i],ba(l,h))})),s.length){const n=s.indexOf("height")>=0?window.pageYOffset:null,i=((t,e,n)=>{const r=e.measureViewportBox(),i=e.current,o=getComputedStyle(i),{display:a}=o,s={};"none"===a&&e.setStaticValue("display",t.display||"block"),n.forEach((t=>{s[t]=Sa[t](r,o)})),e.render();const l=e.measureViewportBox();return n.forEach((n=>{const r=e.getValue(n);ba(r,s[n]),t[n]=Sa[n](l,o)})),t})(e,t,s);return o.length&&o.forEach((([e,n])=>{t.getValue(e).set(n)})),t.render(),te&&null!==n&&window.scrollTo({top:n}),{target:i,transitionEnd:r}}return{target:e,transitionEnd:r}})(t,e,n,r):{target:e,transitionEnd:r}}const Ma={current:null},Pa={current:!1},Ta=Object.keys(he),La=Ta.length,Ia=["AnimationStart","AnimationComplete","Update","Unmount","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"];class Da{constructor({parent:t,props:e,reducedMotionConfig:n,visualState:r},i={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.isPresent=!0,this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>bi.render(this.render,!1,!0);const{latestValues:o,renderState:a}=r;this.latestValues=o,this.baseTarget={...o},this.initialValues=e.initial?{...o}:{},this.renderState=a,this.parent=t,this.props=e,this.depth=t?t.depth+1:0,this.reducedMotionConfig=n,this.options=i,this.isControllingVariants=se(e),this.isVariantNode=le(e),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=Boolean(t&&t.current);const{willChange:s,...l}=this.scrapeMotionValuesFromProps(e);for(const t in l){const e=l[t];void 0!==o[t]&&Me(e)&&(e.set(o[t],!1),mo(s)&&s.add(t))}}scrapeMotionValuesFromProps(t){return{}}mount(t){var e;this.current=t,this.projection&&this.projection.mount(t),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=null===(e=this.parent)||void 0===e?void 0:e.addVariantChild(this)),this.values.forEach(((t,e)=>this.bindToMotionValue(e,t))),Pa.current||function(){if(Pa.current=!0,te)if(window.matchMedia){const t=window.matchMedia("(prefers-reduced-motion)"),e=()=>Ma.current=t.matches;t.addListener(e),e()}else Ma.current=!1}(),this.shouldReduceMotion="never"!==this.reducedMotionConfig&&("always"===this.reducedMotionConfig||Ma.current),this.parent&&this.parent.children.add(this),this.setProps(this.props)}unmount(){var t,e,n;null===(t=this.projection)||void 0===t||t.unmount(),fi.update(this.notifyUpdate),fi.render(this.render),this.valueSubscriptions.forEach((t=>t())),null===(e=this.removeFromVariantTree)||void 0===e||e.call(this),null===(n=this.parent)||void 0===n||n.children.delete(this);for(const t in this.events)this.events[t].clear();this.current=null}bindToMotionValue(t,e){const n=Se.has(t),r=e.onChange((e=>{this.latestValues[t]=e,this.props.onUpdate&&bi.update(this.notifyUpdate,!1,!0),n&&this.projection&&(this.projection.isTransformDirty=!0)})),i=e.onRenderRequest(this.scheduleRender);this.valueSubscriptions.set(t,(()=>{r(),i()}))}sortNodePosition(t){return this.current&&this.sortInstanceNodePosition&&this.type===t.type?this.sortInstanceNodePosition(this.current,t.current):0}loadFeatures(t,n,r,i,o,a){const s=[];for(let n=0;n<La;n++){const r=Ta[n],{isEnabled:i,Component:o}=he[r];i(t)&&o&&s.push((0,e.createElement)(o,{key:r,...t,visualElement:this}))}if(!this.projection&&o){this.projection=new o(i,this.latestValues,this.parent&&this.parent.projection);const{layoutId:e,layout:n,drag:r,dragConstraints:s,layoutScroll:l}=t;this.projection.setOptions({layoutId:e,layout:n,alwaysMeasureLayout:Boolean(r)||s&&re(s),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:"string"==typeof n?n:"both",initialPromotionConfig:a,layoutScroll:l})}return s}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):{x:{min:0,max:0},y:{min:0,max:0}}}getStaticValue(t){return this.latestValues[t]}setStaticValue(t,e){this.latestValues[t]=e}makeTargetAnimatable(t,e=!0){return this.makeTargetAnimatableFromInstance(t,this.props,e)}setProps(t){(t.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.props=t;for(let e=0;e<Ia.length;e++){const n=Ia[e];this.propEventSubscriptions[n]&&(this.propEventSubscriptions[n](),delete this.propEventSubscriptions[n]);const r=t["on"+n];r&&(this.propEventSubscriptions[n]=this.on(n,r))}this.prevMotionValues=function(t,e,n){const{willChange:r}=e;for(const i in e){const o=e[i],a=n[i];if(Me(o))t.addValue(i,o),mo(r)&&r.add(i);else if(Me(a))t.addValue(i,oo(o)),mo(r)&&r.remove(i);else if(a!==o)if(t.hasValue(i)){const e=t.getValue(i);!e.hasAnimated&&e.set(o)}else{const e=t.getStaticValue(i);t.addValue(i,oo(void 0!==e?e:o))}}for(const r in n)void 0===e[r]&&t.removeValue(r);return e}(this,this.scrapeMotionValuesFromProps(t),this.prevMotionValues)}getProps(){return this.props}getVariant(t){var e;return null===(e=this.props.variants)||void 0===e?void 0:e[t]}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){var t;return this.isVariantNode?this:null===(t=this.parent)||void 0===t?void 0:t.getClosestVariantNode()}getVariantContext(t=!1){var e,n;if(t)return null===(e=this.parent)||void 0===e?void 0:e.getVariantContext();if(!this.isControllingVariants){const t=(null===(n=this.parent)||void 0===n?void 0:n.getVariantContext())||{};return void 0!==this.props.initial&&(t.initial=this.props.initial),t}const r={};for(let t=0;t<Oa;t++){const e=Ra[t],n=this.props[e];(ie(n)||!1===n)&&(r[e]=n)}return r}addVariantChild(t){var e;const n=this.getClosestVariantNode();if(n)return null===(e=n.variantChildren)||void 0===e||e.add(t),()=>n.variantChildren.delete(t)}addValue(t,e){this.hasValue(t)&&this.removeValue(t),this.values.set(t,e),this.latestValues[t]=e.get(),this.bindToMotionValue(t,e)}removeValue(t){var e;this.values.delete(t),null===(e=this.valueSubscriptions.get(t))||void 0===e||e(),this.valueSubscriptions.delete(t),delete this.latestValues[t],this.removeValueFromRenderState(t,this.renderState)}hasValue(t){return this.values.has(t)}getValue(t,e){if(this.props.values&&this.props.values[t])return this.props.values[t];let n=this.values.get(t);return void 0===n&&void 0!==e&&(n=oo(e),this.addValue(t,n)),n}readValue(t){return void 0===this.latestValues[t]&&this.current?this.readValueFromInstance(this.current,t,this.options):this.latestValues[t]}setBaseTarget(t,e){this.baseTarget[t]=e}getBaseTarget(t){var e;const{initial:n}=this.props,r="string"==typeof n||"object"==typeof n?null===(e=yn(this.props,n))||void 0===e?void 0:e[t]:void 0;if(n&&void 0!==r)return r;const i=this.getBaseTargetFromProps(this.props,t);return void 0===i||Me(i)?void 0!==this.initialValues[t]&&void 0===r?void 0:this.baseTarget[t]:i}on(t,e){return this.events[t]||(this.events[t]=new ro),this.events[t].add(e)}notify(t,...e){var n;null===(n=this.events[t])||void 0===n||n.notify(...e)}}const Ra=["initial",...xo],Oa=Ra.length;class Ba extends Da{sortInstanceNodePosition(t,e){return 2&t.compareDocumentPosition(e)?1:-1}getBaseTargetFromProps(t,e){var n;return null===(n=t.style)||void 0===n?void 0:n[e]}removeValueFromRenderState(t,{vars:e,style:n}){delete e[t],delete n[t]}makeTargetAnimatableFromInstance({transition:t,transitionEnd:e,...n},{transformValues:r},i){let o=function(t,e,n){var r;const i={};for(const o in t){const t=po(o,e);i[o]=void 0!==t?t:null===(r=n.getValue(o))||void 0===r?void 0:r.get()}return i}(n,t||{},this);if(r&&(e&&(e=r(e)),n&&(n=r(n)),o&&(o=r(o))),i){!function(t,e,n){var r,i;const o=Object.keys(e).filter((e=>!t.hasValue(e))),a=o.length;if(a)for(let s=0;s<a;s++){const a=o[s],l=e[a];let c=null;Array.isArray(l)&&(c=l[0]),null===c&&(c=null!==(i=null!==(r=n[a])&&void 0!==r?r:t.readValue(a))&&void 0!==i?i:e[a]),null!=c&&("string"==typeof c&&(/^\-?\d*\.?\d+$/.test(c)||/^0[^.\s]+$/.test(c))?c=parseFloat(c):!uo(c)&&Ur.test(l)&&(c=ni(a,l)),t.addValue(a,oo(c)),void 0===n[a]&&(n[a]=c),null!==c&&t.setBaseTarget(a,c))}}(this,n,o);const t=((t,e,n,r)=>{const i=function(t,{...e},n){const r=t.current;if(!(r instanceof Element))return{target:e,transitionEnd:n};n&&(n={...n}),t.values.forEach((t=>{const e=t.get();if(!pa(e))return;const n=ga(e,r);n&&t.set(n)}));for(const t in e){const i=e[t];if(!pa(i))continue;const o=ga(i,r);o&&(e[t]=o,n&&void 0===n[t]&&(n[t]=i))}return{target:e,transitionEnd:n}}(t,e,r);return Ea(t,e=i.target,n,r=i.transitionEnd)})(this,n,o,e);e=t.transitionEnd,n=t.target}return{transition:t,transitionEnd:e,...n}}}class Na extends Ba{readValueFromInstance(t,e){if(Se.has(e)){const t=ei(e);return t&&t.default||0}{const r=(n=t,window.getComputedStyle(n)),i=(Le(e)?r.getPropertyValue(e):r[e])||0;return"string"==typeof i?i.trim():i}var n}measureInstanceViewportBox(t,{transformPagePoint:e}){return ca(t,e)}build(t,e,n,r){Xe(t,e,n,r.transformTemplate)}scrapeMotionValuesFromProps(t){return mn(t)}renderInstance(t,e,n,r){dn(t,e,n,r)}}class za extends Ba{getBaseTargetFromProps(t,e){return t[e]}readValueFromInstance(t,e){var n;return Se.has(e)?(null===(n=ei(e))||void 0===n?void 0:n.default)||0:(e=fn.has(e)?e:hn(e),t.getAttribute(e))}measureInstanceViewportBox(){return{x:{min:0,max:0},y:{min:0,max:0}}}scrapeMotionValuesFromProps(t){return gn(t)}build(t,e,n,r){ln(t,e,n,r.transformTemplate)}renderInstance(t,e,n,r){pn(t,e,0,r)}}const Fa=(t,e)=>Ce(t)?new za(e,{enableHardwareAcceleration:!1}):new Na(e,{enableHardwareAcceleration:!0});function ja(t,e){return e.max===e.min?0:t/(e.max-e.min)*100}const Va={correct:(t,e)=>{if(!e.target)return t;if("string"==typeof t){if(!Ue.test(t))return t;t=parseFloat(t)}return`${ja(t,e.target.x)}% ${ja(t,e.target.y)}%`}},Ua="_$css",Wa={correct:(t,{treeScale:e,projectionDelta:n})=>{const r=t,i=t.includes("var("),o=[];i&&(t=t.replace(ma,(t=>(o.push(t),Ua))));const a=Ur.parse(t);if(a.length>5)return r;const s=Ur.createTransformer(t),l="number"!=typeof a[0]?1:0,c=n.x.scale*e.x,u=n.y.scale*e.y;a[0+l]/=c,a[1+l]/=u;const h=wi(c,u,.5);"number"==typeof a[2+l]&&(a[2+l]/=h),"number"==typeof a[3+l]&&(a[3+l]/=h);let d=s(a);if(i){let t=0;d=d.replace(Ua,(()=>{const e=o[t];return t++,e}))}return d}};class $a extends e.Component{componentDidMount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n,layoutId:r}=this.props,{projection:i}=t;var o;o=Ha,Object.assign(_e,o),i&&(e.group&&e.group.add(i),n&&n.register&&r&&n.register(i),i.root.didUpdate(),i.addEventListener("animationComplete",(()=>{this.safeToRemove()})),i.setOptions({...i.options,onExitComplete:()=>this.safeToRemove()})),fe.hasEverUpdated=!0}getSnapshotBeforeUpdate(t){const{layoutDependency:e,visualElement:n,drag:r,isPresent:i}=this.props,o=n.projection;return o?(o.isPresent=i,r||t.layoutDependency!==e||void 0===e?o.willUpdate():this.safeToRemove(),t.isPresent!==i&&(i?o.promote():o.relegate()||bi.postRender((()=>{var t;(null===(t=o.getStack())||void 0===t?void 0:t.members.length)||this.safeToRemove()}))),null):null}componentDidUpdate(){const{projection:t}=this.props.visualElement;t&&(t.root.didUpdate(),!t.currentAnimation&&t.isLead()&&this.safeToRemove())}componentWillUnmount(){const{visualElement:t,layoutGroup:e,switchLayoutGroup:n}=this.props,{projection:r}=t;r&&(r.scheduleCheckAfterUnmount(),(null==e?void 0:e.group)&&e.group.remove(r),(null==n?void 0:n.deregister)&&n.deregister(r))}safeToRemove(){const{safeToRemove:t}=this.props;null==t||t()}render(){return null}}const Ha={borderRadius:{...Va,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:Va,borderTopRightRadius:Va,borderBottomLeftRadius:Va,borderBottomRightRadius:Va,boxShadow:Wa},Ya={measureLayout:function(t){const[n,r]=sr(),i=(0,e.useContext)(me);return e.createElement($a,{...t,layoutGroup:i,switchLayoutGroup:(0,e.useContext)(ye),isPresent:n,safeToRemove:r})}},qa=["TopLeft","TopRight","BottomLeft","BottomRight"],Ga=qa.length,Qa=t=>"string"==typeof t?parseFloat(t):t,Ja=t=>"number"==typeof t||Ue.test(t);function Xa(t,e){var n;return null!==(n=t[e])&&void 0!==n?n:t.borderRadius}const Ka=ts(0,.5,br),Za=ts(.5,.95,ur);function ts(t,e,n){return r=>r<t?0:r>e?1:n(Di(t,e,r))}function es(t,e){t.min=e.min,t.max=e.max}function ns(t,e){es(t.x,e.x),es(t.y,e.y)}function rs(t,e,n,r,i){return t=Zo(t-=e,1/n,r),void 0!==i&&(t=Zo(t,1/i,r)),t}function is(t,e,[n,r,i],o,a){!function(t,e=0,n=1,r=.5,i,o=t,a=t){if(Ve.test(e)&&(e=parseFloat(e),e=wi(a.min,a.max,e/100)-a.min),"number"!=typeof e)return;let s=wi(o.min,o.max,r);t===o&&(s-=e),t.min=rs(t.min,e,n,s,i),t.max=rs(t.max,e,n,s,i)}(t,e[n],e[r],e[i],e.scale,o,a)}const os=["x","scaleX","originX"],as=["y","scaleY","originY"];function ss(t,e,n,r){is(t.x,e,os,null==n?void 0:n.x,null==r?void 0:r.x),is(t.y,e,as,null==n?void 0:n.y,null==r?void 0:r.y)}function ls(t){return 0===t.translate&&1===t.scale}function cs(t){return ls(t.x)&&ls(t.y)}function us(t,e){return t.x.min===e.x.min&&t.x.max===e.x.max&&t.y.min===e.y.min&&t.y.max===e.y.max}function hs(t){return Ro(t.x)/Ro(t.y)}class ds{constructor(){this.members=[]}add(t){eo(this.members,t),t.scheduleRender()}remove(t){if(no(this.members,t),t===this.prevLead&&(this.prevLead=void 0),t===this.lead){const t=this.members[this.members.length-1];t&&this.promote(t)}}relegate(t){const e=this.members.findIndex((e=>t===e));if(0===e)return!1;let n;for(let t=e;t>=0;t--){const e=this.members[t];if(!1!==e.isPresent){n=e;break}}return!!n&&(this.promote(n),!0)}promote(t,e){var n;const r=this.lead;if(t!==r&&(this.prevLead=r,this.lead=t,t.show(),r)){r.instance&&r.scheduleRender(),t.scheduleRender(),t.resumeFrom=r,e&&(t.resumeFrom.preserveOpacity=!0),r.snapshot&&(t.snapshot=r.snapshot,t.snapshot.latestValues=r.animationValues||r.latestValues),(null===(n=t.root)||void 0===n?void 0:n.isUpdating)&&(t.isLayoutDirty=!0);const{crossfade:i}=t.options;!1===i&&r.hide()}}exitAnimationComplete(){this.members.forEach((t=>{var e,n,r,i,o;null===(n=(e=t.options).onExitComplete)||void 0===n||n.call(e),null===(o=null===(r=t.resumingFrom)||void 0===r?void 0:(i=r.options).onExitComplete)||void 0===o||o.call(i)}))}scheduleRender(){this.members.forEach((t=>{t.instance&&t.scheduleRender(!1)}))}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function fs(t,e,n){let r="";const i=t.x.translate/e.x,o=t.y.translate/e.y;if((i||o)&&(r=`translate3d(${i}px, ${o}px, 0) `),1===e.x&&1===e.y||(r+=`scale(${1/e.x}, ${1/e.y}) `),n){const{rotate:t,rotateX:e,rotateY:i}=n;t&&(r+=`rotate(${t}deg) `),e&&(r+=`rotateX(${e}deg) `),i&&(r+=`rotateY(${i}deg) `)}const a=t.x.scale*e.x,s=t.y.scale*e.y;return 1===a&&1===s||(r+=`scale(${a}, ${s})`),r||"none"}const ps=(t,e)=>t.depth-e.depth;class ms{constructor(){this.children=[],this.isDirty=!1}add(t){eo(this.children,t),this.isDirty=!0}remove(t){no(this.children,t),this.isDirty=!0}forEach(t){this.isDirty&&this.children.sort(ps),this.isDirty=!1,this.children.forEach(t)}}const gs=["","X","Y","Z"];let ys=0;function vs({attachResizeListener:t,defaultParent:e,measureScroll:n,checkIsScrollRoot:r,resetTransform:i}){return class{constructor(t,n={},r=(null==e?void 0:e())){this.id=ys++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isTransformDirty=!1,this.isProjectionDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.nodes.forEach(As),this.nodes.forEach(Ss),this.nodes.forEach(Es)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.elementId=t,this.latestValues=n,this.root=r?r.root||r:this,this.path=r?[...r.path,r]:[],this.parent=r,this.depth=r?r.depth+1:0,t&&this.root.registerPotentialNode(t,this);for(let t=0;t<this.path.length;t++)this.path[t].shouldResetTransform=!0;this.root===this&&(this.nodes=new ms)}addEventListener(t,e){return this.eventHandlers.has(t)||this.eventHandlers.set(t,new ro),this.eventHandlers.get(t).add(e)}notifyListeners(t,...e){const n=this.eventHandlers.get(t);null==n||n.notify(...e)}hasListeners(t){return this.eventHandlers.has(t)}registerPotentialNode(t,e){this.potentialNodes.set(t,e)}mount(e,n=!1){var r;if(this.instance)return;this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;const{layoutId:i,layout:o,visualElement:a}=this.options;if(a&&!a.current&&a.mount(e),this.root.nodes.add(this),null===(r=this.parent)||void 0===r||r.children.add(this),this.elementId&&this.root.potentialNodes.delete(this.elementId),n&&(o||i)&&(this.isLayoutDirty=!0),t){let n;const r=()=>this.root.updateBlockedByResize=!1;t(e,(()=>{this.root.updateBlockedByResize=!0,n&&n(),n=xi(r,250),fe.hasAnimatedSinceResize&&(fe.hasAnimatedSinceResize=!1,this.nodes.forEach(ks))}))}i&&this.root.registerSharedNode(i,this),!1!==this.options.animate&&a&&(i||o)&&this.addEventListener("didUpdate",(({delta:t,hasLayoutChanged:e,hasRelativeTargetChanged:n,layout:r})=>{var i,o,s,l,c;if(this.isTreeAnimationBlocked())return this.target=void 0,void(this.relativeTarget=void 0);const u=null!==(o=null!==(i=this.options.transition)&&void 0!==i?i:a.getDefaultTransition())&&void 0!==o?o:Ds,{onLayoutAnimationStart:h,onLayoutAnimationComplete:d}=a.getProps(),f=!this.targetLayout||!us(this.targetLayout,r)||n,p=!e&&n;if((null===(s=this.resumeFrom)||void 0===s?void 0:s.instance)||p||e&&(f||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(t,p);const e={...Zi(u,"layout"),onPlay:h,onComplete:d};a.shouldReduceMotion&&(e.delay=0,e.type=!1),this.startAnimation(e)}else e||0!==this.animationProgress||ks(this),this.isLead()&&(null===(c=(l=this.options).onExitComplete)||void 0===c||c.call(l));this.targetLayout=r}))}unmount(){var t,e;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(t=this.getStack())||void 0===t||t.remove(this),null===(e=this.parent)||void 0===e||e.children.delete(this),this.instance=void 0,fi.preRender(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){var t;return this.isAnimationBlocked||(null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimationBlocked())||!1}startUpdate(){var t;this.isUpdateBlocked()||(this.isUpdating=!0,null===(t=this.nodes)||void 0===t||t.forEach(Ms),this.animationId++)}willUpdate(t=!0){var e,n,r;if(this.root.isUpdateBlocked())return void(null===(n=(e=this.options).onExitComplete)||void 0===n||n.call(e));if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let t=0;t<this.path.length;t++){const e=this.path[t];e.shouldResetTransform=!0,e.updateScroll("snapshot")}const{layoutId:i,layout:o}=this.options;if(void 0===i&&!o)return;const a=null===(r=this.options.visualElement)||void 0===r?void 0:r.getProps().transformTemplate;this.prevTransformTemplateValue=null==a?void 0:a(this.latestValues,""),this.updateSnapshot(),t&&this.notifyListeners("willUpdate")}didUpdate(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(Cs);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(Rs),this.potentialNodes.clear()),this.nodes.forEach(_s),this.nodes.forEach(bs),this.nodes.forEach(xs),this.clearAllSnapshots(),pi.update(),pi.preRender(),pi.render())}clearAllSnapshots(){this.nodes.forEach(ws),this.sharedNodes.forEach(Ps)}scheduleUpdateProjection(){bi.preRender(this.updateProjection,!1,!0)}scheduleCheckAfterUnmount(){bi.postRender((()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()}))}updateSnapshot(){!this.snapshot&&this.instance&&(this.snapshot=this.measure())}updateLayout(){var t;if(!this.instance)return;if(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let t=0;t<this.path.length;t++)this.path[t].updateScroll();const e=this.layout;this.layout=this.measure(!1),this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox),null===(t=this.options.visualElement)||void 0===t||t.notify("LayoutMeasure",this.layout.layoutBox,null==e?void 0:e.layoutBox)}updateScroll(t="measure"){let e=Boolean(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===t&&(e=!1),e&&(this.scroll={animationId:this.root.animationId,phase:t,isRoot:r(this.instance),offset:n(this.instance)})}resetTransform(){var t;if(!i)return;const e=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!cs(this.projectionDelta),r=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate,o=null==r?void 0:r(this.latestValues,""),a=o!==this.prevTransformTemplateValue;e&&(n||Jo(this.latestValues)||a)&&(i(this.instance,o),this.shouldResetTransform=!1,this.scheduleRender())}measure(t=!0){const e=this.measurePageBox();let n=this.removeElementScroll(e);var r;return t&&(n=this.removeTransform(n)),Os((r=n).x),Os(r.y),{animationId:this.root.animationId,measuredBox:e,layoutBox:n,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:t}=this.options;if(!t)return{x:{min:0,max:0},y:{min:0,max:0}};const e=t.measureViewportBox(),{scroll:n}=this.root;return n&&(ia(e.x,n.offset.x),ia(e.y,n.offset.y)),e}removeElementScroll(t){const e={x:{min:0,max:0},y:{min:0,max:0}};ns(e,t);for(let n=0;n<this.path.length;n++){const r=this.path[n],{scroll:i,options:o}=r;if(r!==this.root&&i&&o.layoutScroll){if(i.isRoot){ns(e,t);const{scroll:n}=this.root;n&&(ia(e.x,-n.offset.x),ia(e.y,-n.offset.y))}ia(e.x,i.offset.x),ia(e.y,i.offset.y)}}return e}applyTransform(t,e=!1){const n={x:{min:0,max:0},y:{min:0,max:0}};ns(n,t);for(let t=0;t<this.path.length;t++){const r=this.path[t];!e&&r.options.layoutScroll&&r.scroll&&r!==r.root&&la(n,{x:-r.scroll.offset.x,y:-r.scroll.offset.y}),Jo(r.latestValues)&&la(n,r.latestValues)}return Jo(this.latestValues)&&la(n,this.latestValues),n}removeTransform(t){var e;const n={x:{min:0,max:0},y:{min:0,max:0}};ns(n,t);for(let t=0;t<this.path.length;t++){const r=this.path[t];if(!r.instance)continue;if(!Jo(r.latestValues))continue;Qo(r.latestValues)&&r.updateSnapshot();const i={x:{min:0,max:0},y:{min:0,max:0}};ns(i,r.measurePageBox()),ss(n,r.latestValues,null===(e=r.snapshot)||void 0===e?void 0:e.layoutBox,i)}return Jo(this.latestValues)&&ss(n,this.latestValues),n}setTargetDelta(t){this.targetDelta=t,this.isProjectionDirty=!0,this.root.scheduleUpdateProjection()}setOptions(t){this.options={...this.options,...t,crossfade:void 0===t.crossfade||t.crossfade}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}resolveTargetDelta(){var t;const e=this.getLead();if(this.isProjectionDirty||(this.isProjectionDirty=e.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=e.isTransformDirty),!this.isProjectionDirty&&!this.attemptToResolveRelativeTarget)return;const{layout:n,layoutId:r}=this.options;if(this.layout&&(n||r)){if(!this.targetDelta&&!this.relativeTarget){const t=this.getClosestProjectingParent();t&&t.layout?(this.relativeParent=t,this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},jo(this.relativeTargetOrigin,this.layout.layoutBox,t.layout.layoutBox),ns(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}var i,o,a;if((this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(t=this.relativeParent)||void 0===t?void 0:t.target)?(i=this.target,o=this.relativeTarget,a=this.relativeParent.target,zo(i.x,o.x,a.x),zo(i.y,o.y,a.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.layoutBox):ns(this.target,this.layout.layoutBox),na(this.target,this.targetDelta)):ns(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget)){this.attemptToResolveRelativeTarget=!1;const t=this.getClosestProjectingParent();t&&Boolean(t.resumingFrom)===Boolean(this.resumingFrom)&&!t.options.layoutScroll&&t.target?(this.relativeParent=t,this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},jo(this.relativeTargetOrigin,this.target,t.target),ns(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}}}getClosestProjectingParent(){if(this.parent&&!Qo(this.parent.latestValues)&&!Xo(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()}calcProjection(){var t;const{isProjectionDirty:e,isTransformDirty:n}=this;this.isProjectionDirty=this.isTransformDirty=!1;const r=this.getLead(),i=Boolean(this.resumingFrom)||this!==r;let o=!0;if(e&&(o=!1),i&&n&&(o=!1),o)return;const{layout:a,layoutId:s}=this.options;if(this.isTreeAnimating=Boolean((null===(t=this.parent)||void 0===t?void 0:t.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!a&&!s)return;ns(this.layoutCorrected,this.layout.layoutBox),function(t,e,n,r=!1){var i,o;const a=n.length;if(!a)return;let s,l;e.x=e.y=1;for(let c=0;c<a;c++)s=n[c],l=s.projectionDelta,"contents"!==(null===(o=null===(i=s.instance)||void 0===i?void 0:i.style)||void 0===o?void 0:o.display)&&(r&&s.options.layoutScroll&&s.scroll&&s!==s.root&&la(t,{x:-s.scroll.offset.x,y:-s.scroll.offset.y}),l&&(e.x*=l.x.scale,e.y*=l.y.scale,na(t,l)),r&&Jo(s.latestValues)&&la(t,s.latestValues));e.x=ra(e.x),e.y=ra(e.y)}(this.layoutCorrected,this.treeScale,this.path,i);const{target:l}=r;if(!l)return;this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});const c=this.treeScale.x,u=this.treeScale.y,h=this.projectionTransform;No(this.projectionDelta,this.layoutCorrected,l,this.latestValues),this.projectionTransform=fs(this.projectionDelta,this.treeScale),this.projectionTransform===h&&this.treeScale.x===c&&this.treeScale.y===u||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",l))}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(t=!0){var e,n,r;null===(n=(e=this.options).scheduleRender)||void 0===n||n.call(e),t&&(null===(r=this.getStack())||void 0===r||r.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(t,e=!1){var n,r;const i=this.snapshot,o=(null==i?void 0:i.latestValues)||{},a={...this.latestValues},s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!e;const l={x:{min:0,max:0},y:{min:0,max:0}},c=(null==i?void 0:i.source)!==(null===(n=this.layout)||void 0===n?void 0:n.source),u=((null===(r=this.getStack())||void 0===r?void 0:r.members.length)||0)<=1,h=Boolean(c&&!u&&!0===this.options.crossfade&&!this.path.some(Is));this.animationProgress=0,this.mixTargetDelta=e=>{var n;const r=e/1e3;Ts(s.x,t.x,r),Ts(s.y,t.y,r),this.setTargetDelta(s),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&(null===(n=this.relativeParent)||void 0===n?void 0:n.layout)&&(jo(l,this.layout.layoutBox,this.relativeParent.layout.layoutBox),function(t,e,n,r){Ls(t.x,e.x,n.x,r),Ls(t.y,e.y,n.y,r)}(this.relativeTarget,this.relativeTargetOrigin,l,r)),c&&(this.animationValues=a,function(t,e,n,r,i,o){var a,s,l,c;i?(t.opacity=wi(0,null!==(a=n.opacity)&&void 0!==a?a:1,Ka(r)),t.opacityExit=wi(null!==(s=e.opacity)&&void 0!==s?s:1,0,Za(r))):o&&(t.opacity=wi(null!==(l=e.opacity)&&void 0!==l?l:1,null!==(c=n.opacity)&&void 0!==c?c:1,r));for(let i=0;i<Ga;i++){const o=`border${qa[i]}Radius`;let a=Xa(e,o),s=Xa(n,o);void 0===a&&void 0===s||(a||(a=0),s||(s=0),0===a||0===s||Ja(a)===Ja(s)?(t[o]=Math.max(wi(Qa(a),Qa(s),r),0),(Ve.test(s)||Ve.test(a))&&(t[o]+="%")):t[o]=s)}(e.rotate||n.rotate)&&(t.rotate=wi(e.rotate||0,n.rotate||0,r))}(a,o,this.latestValues,r,h,u)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=r},this.mixTargetDelta(0)}startAnimation(t){var e,n;this.notifyListeners("animationStart"),null===(e=this.currentAnimation)||void 0===e||e.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(fi.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=bi.update((()=>{fe.hasAnimatedSinceResize=!0,this.currentAnimation=function(t,e,n={}){const r=Me(t)?t:oo(t);return to("",r,e,n),{stop:()=>r.stop(),isAnimating:()=>r.isAnimating()}}(0,1e3,{...t,onUpdate:e=>{var n;this.mixTargetDelta(e),null===(n=t.onUpdate)||void 0===n||n.call(t,e)},onComplete:()=>{var e;null===(e=t.onComplete)||void 0===e||e.call(t),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0}))}completeAnimation(){var t;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(t=this.getStack())||void 0===t||t.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){var t;this.currentAnimation&&(null===(t=this.mixTargetDelta)||void 0===t||t.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const t=this.getLead();let{targetWithTransforms:e,target:n,layout:r,latestValues:i}=t;if(e&&n&&r){if(this!==t&&this.layout&&r&&Bs(this.options.animationType,this.layout.layoutBox,r.layoutBox)){n=this.target||{x:{min:0,max:0},y:{min:0,max:0}};const e=Ro(this.layout.layoutBox.x);n.x.min=t.target.x.min,n.x.max=n.x.min+e;const r=Ro(this.layout.layoutBox.y);n.y.min=t.target.y.min,n.y.max=n.y.min+r}ns(e,n),la(e,i),No(this.projectionDeltaWithTransform,this.layoutCorrected,e,i)}}registerSharedNode(t,e){var n,r,i;this.sharedNodes.has(t)||this.sharedNodes.set(t,new ds),this.sharedNodes.get(t).add(e),e.promote({transition:null===(n=e.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(i=null===(r=e.options.initialPromotionConfig)||void 0===r?void 0:r.shouldPreserveFollowOpacity)||void 0===i?void 0:i.call(r,e)})}isLead(){const t=this.getStack();return!t||t.lead===this}getLead(){var t;const{layoutId:e}=this.options;return e&&(null===(t=this.getStack())||void 0===t?void 0:t.lead)||this}getPrevLead(){var t;const{layoutId:e}=this.options;return e?null===(t=this.getStack())||void 0===t?void 0:t.prevLead:void 0}getStack(){const{layoutId:t}=this.options;if(t)return this.root.sharedNodes.get(t)}promote({needsReset:t,transition:e,preserveFollowOpacity:n}={}){const r=this.getStack();r&&r.promote(this,n),t&&(this.projectionDelta=void 0,this.needsReset=!0),e&&this.setOptions({transition:e})}relegate(){const t=this.getStack();return!!t&&t.relegate(this)}resetRotation(){const{visualElement:t}=this.options;if(!t)return;let e=!1;const{latestValues:n}=t;if((n.rotate||n.rotateX||n.rotateY||n.rotateZ)&&(e=!0),!e)return;const r={};for(let e=0;e<gs.length;e++){const i="rotate"+gs[e];n[i]&&(r[i]=n[i],t.setStaticValue(i,0))}null==t||t.render();for(const e in r)t.setStaticValue(e,r[e]);t.scheduleRender()}getProjectionStyles(t={}){var e,n,r;const i={};if(!this.instance||this.isSVG)return i;if(!this.isVisible)return{visibility:"hidden"};i.visibility="";const o=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,i.opacity="",i.pointerEvents=xn(t.pointerEvents)||"",i.transform=o?o(this.latestValues,""):"none",i;const a=this.getLead();if(!this.projectionDelta||!this.layout||!a.target){const e={};return this.options.layoutId&&(e.opacity=void 0!==this.latestValues.opacity?this.latestValues.opacity:1,e.pointerEvents=xn(t.pointerEvents)||""),this.hasProjected&&!Jo(this.latestValues)&&(e.transform=o?o({},""):"none",this.hasProjected=!1),e}const s=a.animationValues||a.latestValues;this.applyTransformsToTarget(),i.transform=fs(this.projectionDeltaWithTransform,this.treeScale,s),o&&(i.transform=o(s,i.transform));const{x:l,y:c}=this.projectionDelta;i.transformOrigin=`${100*l.origin}% ${100*c.origin}% 0`,a.animationValues?i.opacity=a===this?null!==(r=null!==(n=s.opacity)&&void 0!==n?n:this.latestValues.opacity)&&void 0!==r?r:1:this.preserveOpacity?this.latestValues.opacity:s.opacityExit:i.opacity=a===this?void 0!==s.opacity?s.opacity:"":void 0!==s.opacityExit?s.opacityExit:0;for(const t in _e){if(void 0===s[t])continue;const{correct:e,applyTo:n}=_e[t],r=e(s[t],a);if(n){const t=n.length;for(let e=0;e<t;e++)i[n[e]]=r}else i[t]=r}return this.options.layoutId&&(i.pointerEvents=a===this?xn(t.pointerEvents)||"":"none"),i}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach((t=>{var e;return null===(e=t.currentAnimation)||void 0===e?void 0:e.stop()})),this.root.nodes.forEach(Cs),this.root.sharedNodes.clear()}}}function bs(t){t.updateLayout()}function xs(t){var e,n,r;const i=(null===(e=t.resumeFrom)||void 0===e?void 0:e.snapshot)||t.snapshot;if(t.isLead()&&t.layout&&i&&t.hasListeners("didUpdate")){const{layoutBox:e,measuredBox:n}=t.layout,{animationType:r}=t.options,o=i.source!==t.layout.source;"size"===r?Yo((t=>{const n=o?i.measuredBox[t]:i.layoutBox[t],r=Ro(n);n.min=e[t].min,n.max=n.min+r})):Bs(r,i.layoutBox,e)&&Yo((t=>{const n=o?i.measuredBox[t]:i.layoutBox[t],r=Ro(e[t]);n.max=n.min+r}));const a={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};No(a,e,i.layoutBox);const s={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};o?No(s,t.applyTransform(n,!0),i.measuredBox):No(s,e,i.layoutBox);const l=!cs(a);let c=!1;if(!t.resumeFrom){const n=t.getClosestProjectingParent();if(n&&!n.resumeFrom){const{snapshot:t,layout:r}=n;if(t&&r){const n={x:{min:0,max:0},y:{min:0,max:0}};jo(n,i.layoutBox,t.layoutBox);const o={x:{min:0,max:0},y:{min:0,max:0}};jo(o,e,r.layoutBox),us(n,o)||(c=!0)}}}t.notifyListeners("didUpdate",{layout:e,snapshot:i,delta:s,layoutDelta:a,hasLayoutChanged:l,hasRelativeTargetChanged:c})}else t.isLead()&&(null===(r=(n=t.options).onExitComplete)||void 0===r||r.call(n));t.options.transition=void 0}function As(t){t.isProjectionDirty||(t.isProjectionDirty=Boolean(t.parent&&t.parent.isProjectionDirty)),t.isTransformDirty||(t.isTransformDirty=Boolean(t.parent&&t.parent.isTransformDirty))}function ws(t){t.clearSnapshot()}function Cs(t){t.clearMeasurements()}function _s(t){const{visualElement:e}=t.options;(null==e?void 0:e.getProps().onBeforeLayoutMeasure)&&e.notify("BeforeLayoutMeasure"),t.resetTransform()}function ks(t){t.finishAnimation(),t.targetDelta=t.relativeTarget=t.target=void 0}function Ss(t){t.resolveTargetDelta()}function Es(t){t.calcProjection()}function Ms(t){t.resetRotation()}function Ps(t){t.removeLeadSnapshot()}function Ts(t,e,n){t.translate=wi(e.translate,0,n),t.scale=wi(e.scale,1,n),t.origin=e.origin,t.originPoint=e.originPoint}function Ls(t,e,n,r){t.min=wi(e.min,n.min,r),t.max=wi(e.max,n.max,r)}function Is(t){return t.animationValues&&void 0!==t.animationValues.opacityExit}const Ds={duration:.45,ease:[.4,0,.1,1]};function Rs(t,e){let n=t.root;for(let e=t.path.length-1;e>=0;e--)if(Boolean(t.path[e].instance)){n=t.path[e];break}const r=(n&&n!==t.root?n.instance:document).querySelector(`[data-projection-id="${e}"]`);r&&t.mount(r,!0)}function Os(t){t.min=Math.round(t.min),t.max=Math.round(t.max)}function Bs(t,e,n){return"position"===t||"preserve-aspect"===t&&!Oo(hs(e),hs(n),.2)}const Ns=vs({attachResizeListener:(t,e)=>Sn(t,"resize",e),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),zs={current:void 0},Fs=vs({measureScroll:t=>({x:t.scrollLeft,y:t.scrollTop}),defaultParent:()=>{if(!zs.current){const t=new Ns(0,{});t.mount(window),t.setOptions({layoutScroll:!0}),zs.current=t}return zs.current},resetTransform:(t,e)=>{t.style.transform=void 0!==e?e:"none"},checkIsScrollRoot:t=>Boolean("fixed"===window.getComputedStyle(t).position)}),js={...ko,...ar,...fa,...Ya},Vs=Ae(((t,e)=>function(t,{forwardMotionProps:e=!1},n,r,i){return{...Ce(t)?Cn:_n,preloadedFeatures:n,useRender:un(e),createVisualElement:r,projectionNodeConstructor:i,Component:t}}(t,e,js,Fa,Fs)));var Us=i(379),Ws=i.n(Us),$s=i(795),Hs=i.n($s),Ys=i(569),qs=i.n(Ys),Gs=i(565),Qs=i.n(Gs),Js=i(216),Xs=i.n(Js),Ks=i(589),Zs=i.n(Ks),tl=i(43),el={};el.styleTagTransform=Zs(),el.setAttributes=Qs(),el.insert=qs().bind(null,"head"),el.domAPI=Hs(),el.insertStyleElement=Xs(),Ws()(tl.Z,el),tl.Z&&tl.Z.locals&&tl.Z.locals;var nl=i(740),rl={};rl.styleTagTransform=Zs(),rl.setAttributes=Qs(),rl.insert=qs().bind(null,"head"),rl.domAPI=Hs(),rl.insertStyleElement=Xs(),Ws()(nl.Z,rl),nl.Z&&nl.Z.locals&&nl.Z.locals;var il=i(34),ol=i(534),al=i(507);const sl=function(){return e.createElement("div",{id:"hero-layout"},e.createElement("div",{id:"hero"},e.createElement("aside",{id:"hero-left"},e.createElement("img",{alt:"",id:"lower-left",className:"hero-imgs",src:il.default})),e.createElement("section",{id:"main-info-section"},e.createElement(Vs.img,{id:"logo",whileHover:{scale:1.1},initial:{opacity:.6,scale:.8},animate:{opacity:1,scale:1},transition:{duration:1},src:al.default,alt:"LightQL Logo"}),e.createElement("h1",{id:"welcome-text",className:"text"},"This is LightQL."),e.createElement("p",{id:"description-text",className:"text"},"A lightspeed, lightweight client-side cache for GraphQL."),e.createElement("span",{id:"clipboard-docs"},e.createElement("section",{id:"copy-npm"},e.createElement("p",{id:"dollar-sign",className:"npm-text"},"$"),e.createElement("p",{id:"npm-link",className:"npm-text"},"npm install lightql-cache"),e.createElement("i",{class:"bi bi-clipboard",id:"clipboard-icon",onClick:function(){return navigator.clipboard.writeText("npm install lightql-cache")},sx:{color:"#323949"}})),e.createElement(Gt,{to:"/docs",id:"blue-docs-link"},e.createElement("button",{id:"blue-docs-button",className:"button-text"},"Read our docs"))),e.createElement(Gt,{to:"/aboutUs",id:"demo-link"},e.createElement("p",null,"Contact us"))),e.createElement("aside",{id:"hero-right"},e.createElement("img",{alt:"",id:"upper-right",className:"hero-imgs",src:ol.default}))))};var ll=i(716),cl={};cl.styleTagTransform=Zs(),cl.setAttributes=Qs(),cl.insert=qs().bind(null,"head"),cl.domAPI=Hs(),cl.insertStyleElement=Xs(),Ws()(ll.Z,cl),ll.Z&&ll.Z.locals&&ll.Z.locals;const ul=function(t){var n=t.icon,r=t.title,i=t.text;return e.createElement("div",{id:"one-box-layout"},n,e.createElement("h1",{id:"box-title",className:"text-color"},r),e.createElement("p",{id:"box-paragraph"},i))},hl=function(){var t=e.createElement("i",{class:"bi bi-lightning-charge",style:{fontSize:"2rem",color:"#323949"}}),n=e.createElement("i",{class:"bi bi-hand-thumbs-up",style:{fontSize:"2rem",color:"#323949"}}),r=e.createElement("i",{class:"bi bi-archive",style:{fontSize:"2rem",color:"#323949"}});return e.createElement("div",{id:"three-box-layout"},e.createElement(ul,{icon:n,title:"Easy to use",text:"Set-up in seconds, without additional costs or processes, and instantly implement the caching in your web app file with just a few of lines of code."}),e.createElement(ul,{icon:t,title:"Ultra-fast",text:"Extremely low latency speeds (as shown in our demo below) from our high cache hit-rate due to lazy loading implementation and O(1) look-up."}),e.createElement(ul,{icon:r,title:"Persistent cache",text:"Persistently cache data offline between sessions using localForage and IndexedDB - improving performance and saving backend resources."}))};var dl=i(391),fl={};fl.styleTagTransform=Zs(),fl.setAttributes=Qs(),fl.insert=qs().bind(null,"head"),fl.domAPI=Hs(),fl.insertStyleElement=Xs(),Ws()(dl.Z,fl),dl.Z&&dl.Z.locals&&dl.Z.locals;var pl=i(890),ml=i(686),gl=i(893),yl=i(579);const vl=function(){return e.createElement("div",{id:"descriptions"},e.createElement("section",{id:"info"},e.createElement("section",{id:"gql-info"},e.createElement("h1",{id:"gql-title",className:"desc-titles"},"Problem With Existing Solutions"),e.createElement("p",{className:"paragraph-text"},"Bloated NPM installs with 100+ dependencies and packages, pulling in 35MB+ of JS generates a bundle size that could lead to poor app performance in bandwith constrained apps. There is also a lack of support for other frameworks outside of React.")),e.createElement("section",{id:"gql-info"},e.createElement("h1",{id:"caching-title",className:"desc-titles"},"Who Is This For?"),e.createElement("p",{className:"paragraph-text"},"You want extremely low latency, client-side caching with persistent data storage. You want a high cache hit-rate from a lazy loading implementation to improve performance and save system resources. You want to set up ALL OF THIS in seconds."))),e.createElement("div",{id:"separating-line"}),e.createElement("section",{id:"tech-stack"},e.createElement("h1",{id:"tech-stack-title",className:"desc-titles"},"Tech Stack"),e.createElement("p",{id:"tech-stack-desc",className:"paragraph-text"},"In order to provide the developer with very efficient caching for their GraphQL queries, LightQL implements a modern tech stack. Cache your queries with us to leverage these technologies and improve your application performance!"),e.createElement("section",{id:"icon-section"},e.createElement("section",{id:"typescript",className:"logo-section"},e.createElement("img",{alt:"",className:"tech-stack-logos",src:ml.default}),e.createElement("p",{id:"ts-text",className:"icon-text"},"Typescript")),e.createElement("section",{id:"graphql",className:"logo-section"},e.createElement("img",{alt:"",className:"tech-stack-logos",src:gl.default}),e.createElement("p",{id:"graphql-text",className:"icon-text"},"GraphQL")),e.createElement("section",{id:"jest",className:"logo-section"},e.createElement("img",{alt:"",className:"tech-stack-logos",src:pl.default}),e.createElement("p",{id:"jest-text",className:"icon-text"},"Jest")),e.createElement("section",{id:"local-forage",className:"logo-section"},e.createElement("img",{alt:"",className:"tech-stack-logos",src:yl.default}),e.createElement("p",{id:"localforage-text",className:"icon-text"},"Local Forage")))))};var bl=i(76);function xl(){}const Al=(()=>{let t=0;return()=>t++})();function wl(t){return null==t}function Cl(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function _l(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function kl(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function Sl(t,e){return kl(t)?t:e}function El(t,e){return void 0===t?e:t}const Ml=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function Pl(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function Tl(t,e,n,r){let i,o,a;if(Cl(t))if(o=t.length,r)for(i=o-1;i>=0;i--)e.call(n,t[i],i);else for(i=0;i<o;i++)e.call(n,t[i],i);else if(_l(t))for(a=Object.keys(t),o=a.length,i=0;i<o;i++)e.call(n,t[a[i]],a[i])}function Ll(t,e){let n,r,i,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,r=t.length;n<r;++n)if(i=t[n],o=e[n],i.datasetIndex!==o.datasetIndex||i.index!==o.index)return!1;return!0}function Il(t){if(Cl(t))return t.map(Il);if(_l(t)){const e=Object.create(null),n=Object.keys(t),r=n.length;let i=0;for(;i<r;++i)e[n[i]]=Il(t[n[i]]);return e}return t}function Dl(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function Rl(t,e,n,r){if(!Dl(t))return;const i=e[t],o=n[t];_l(i)&&_l(o)?Ol(i,o,r):e[t]=Il(o)}function Ol(t,e,n){const r=Cl(e)?e:[e],i=r.length;if(!_l(t))return t;const o=(n=n||{}).merger||Rl;let a;for(let e=0;e<i;++e){if(a=r[e],!_l(a))continue;const i=Object.keys(a);for(let e=0,r=i.length;e<r;++e)o(i[e],t,a,n)}return t}function Bl(t,e){return Ol(t,e,{merger:Nl})}function Nl(t,e,n){if(!Dl(t))return;const r=e[t],i=n[t];_l(r)&&_l(i)?Bl(r,i):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=Il(i))}const zl={"":t=>t,x:t=>t.x,y:t=>t.y};function Fl(t,e){const n=zl[e]||(zl[e]=function(t){const e=function(t){const e=t.split("."),n=[];let r="";for(const t of e)r+=t,r.endsWith("\\")?r=r.slice(0,-1)+".":(n.push(r),r="");return n}(t);return t=>{for(const n of e){if(""===n)break;t=t&&t[n]}return t}}(e));return n(t)}function jl(t){return t.charAt(0).toUpperCase()+t.slice(1)}const Vl=t=>void 0!==t,Ul=t=>"function"==typeof t,Wl=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},$l=Math.PI,Hl=2*$l,Yl=Hl+$l,ql=Number.POSITIVE_INFINITY,Gl=$l/180,Ql=$l/2,Jl=$l/4,Xl=2*$l/3,Kl=Math.log10,Zl=Math.sign;function tc(t,e,n){return Math.abs(t-e)<n}function ec(t){const e=Math.round(t);t=tc(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(Kl(t))),r=t/n;return(r<=1?1:r<=2?2:r<=5?5:10)*n}function nc(t){return!isNaN(parseFloat(t))&&isFinite(t)}function rc(t,e,n){let r,i,o;for(r=0,i=t.length;r<i;r++)o=t[r][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function ic(t){return t*($l/180)}function oc(t){return t*(180/$l)}function ac(t){if(!kl(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function sc(t,e){const n=e.x-t.x,r=e.y-t.y,i=Math.sqrt(n*n+r*r);let o=Math.atan2(r,n);return o<-.5*$l&&(o+=Hl),{angle:o,distance:i}}function lc(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function cc(t,e){return(t-e+Yl)%Hl-$l}function uc(t){return(t%Hl+Hl)%Hl}function hc(t,e,n,r){const i=uc(t),o=uc(e),a=uc(n),s=uc(o-i),l=uc(a-i),c=uc(i-o),u=uc(i-a);return i===o||i===a||r&&o===a||s>l&&c<u}function dc(t,e,n){return Math.max(e,Math.min(n,t))}function fc(t,e,n,r=1e-6){return t>=Math.min(e,n)-r&&t<=Math.max(e,n)+r}function pc(t,e,n){n=n||(n=>t[n]<e);let r,i=t.length-1,o=0;for(;i-o>1;)r=o+i>>1,n(r)?o=r:i=r;return{lo:o,hi:i}}const mc=(t,e,n,r)=>pc(t,n,r?r=>{const i=t[r][e];return i<n||i===n&&t[r+1][e]===n}:r=>t[r][e]<n),gc=(t,e,n)=>pc(t,n,(r=>t[r][e]>=n)),yc=["push","pop","shift","splice","unshift"];function vc(t,e){const n=t._chartjs;if(!n)return;const r=n.listeners,i=r.indexOf(e);-1!==i&&r.splice(i,1),r.length>0||(yc.forEach((e=>{delete t[e]})),delete t._chartjs)}function bc(t){const e=new Set;let n,r;for(n=0,r=t.length;n<r;++n)e.add(t[n]);return e.size===r?t:Array.from(e)}const xc="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function Ac(t,e){let n=!1;return function(...r){n||(n=!0,xc.call(window,(()=>{n=!1,t.apply(e,r)})))}}const wc=t=>"start"===t?"left":"end"===t?"right":"center",Cc=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function _c(t,e,n){const r=e.length;let i=0,o=r;if(t._sorted){const{iScale:a,_parsed:s}=t,l=a.axis,{min:c,max:u,minDefined:h,maxDefined:d}=a.getUserBounds();h&&(i=dc(Math.min(mc(s,a.axis,c).lo,n?r:mc(e,l,a.getPixelForValue(c)).lo),0,r-1)),o=d?dc(Math.max(mc(s,a.axis,u,!0).hi+1,n?0:mc(e,l,a.getPixelForValue(u),!0).hi+1),i,r)-i:r-i}return{start:i,count:o}}function kc(t){const{xScale:e,yScale:n,_scaleRanges:r}=t,i={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!r)return t._scaleRanges=i,!0;const o=r.xmin!==e.min||r.xmax!==e.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,i),o}const Sc=t=>0===t||1===t,Ec=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Hl/n),Mc=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*Hl/n)+1,Pc={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Ql),easeOutSine:t=>Math.sin(t*Ql),easeInOutSine:t=>-.5*(Math.cos($l*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Sc(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Sc(t)?t:Ec(t,.075,.3),easeOutElastic:t=>Sc(t)?t:Mc(t,.075,.3),easeInOutElastic(t){const e=.1125;return Sc(t)?t:t<.5?.5*Ec(2*t,e,.45):.5+.5*Mc(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Pc.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*Pc.easeInBounce(2*t):.5*Pc.easeOutBounce(2*t-1)+.5};var Tc=Pc;function Lc(t){return t+.5|0}const Ic=(t,e,n)=>Math.max(Math.min(t,n),e);function Dc(t){return Ic(Lc(2.55*t),0,255)}function Rc(t){return Ic(Lc(255*t),0,255)}function Oc(t){return Ic(Lc(t/2.55)/100,0,1)}function Bc(t){return Ic(Lc(100*t),0,100)}const Nc={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},zc=[..."0123456789ABCDEF"],Fc=t=>zc[15&t],jc=t=>zc[(240&t)>>4]+zc[15&t],Vc=t=>(240&t)>>4==(15&t);const Uc=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Wc(t,e,n){const r=e*Math.min(n,1-n),i=(e,i=(e+t/30)%12)=>n-r*Math.max(Math.min(i-3,9-i,1),-1);return[i(0),i(8),i(4)]}function $c(t,e,n){const r=(r,i=(r+t/60)%6)=>n-n*e*Math.max(Math.min(i,4-i,1),0);return[r(5),r(3),r(1)]}function Hc(t,e,n){const r=Wc(t,1,.5);let i;for(e+n>1&&(i=1/(e+n),e*=i,n*=i),i=0;i<3;i++)r[i]*=1-e-n,r[i]+=e;return r}function Yc(t){const e=t.r/255,n=t.g/255,r=t.b/255,i=Math.max(e,n,r),o=Math.min(e,n,r),a=(i+o)/2;let s,l,c;return i!==o&&(c=i-o,l=a>.5?c/(2-i-o):c/(i+o),s=function(t,e,n,r,i){return t===i?(e-n)/r+(e<n?6:0):e===i?(n-t)/r+2:(t-e)/r+4}(e,n,r,c,i),s=60*s+.5),[0|s,l||0,a]}function qc(t,e,n,r){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,r)).map(Rc)}function Gc(t,e,n){return qc(Wc,t,e,n)}function Qc(t){return(t%360+360)%360}const Jc={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Xc={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Kc;const Zc=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,tu=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,eu=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function nu(t,e,n){if(t){let r=Yc(t);r[e]=Math.max(0,Math.min(r[e]+r[e]*n,0===e?360:1)),r=Gc(r),t.r=r[0],t.g=r[1],t.b=r[2]}}function ru(t,e){return t?Object.assign(e||{},t):t}function iu(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=Rc(t[3]))):(e=ru(t,{r:0,g:0,b:0,a:1})).a=Rc(e.a),e}function ou(t){return"r"===t.charAt(0)?function(t){const e=Zc.exec(t);let n,r,i,o=255;if(e){if(e[7]!==n){const t=+e[7];o=e[8]?Dc(t):Ic(255*t,0,255)}return n=+e[1],r=+e[3],i=+e[5],n=255&(e[2]?Dc(n):Ic(n,0,255)),r=255&(e[4]?Dc(r):Ic(r,0,255)),i=255&(e[6]?Dc(i):Ic(i,0,255)),{r:n,g:r,b:i,a:o}}}(t):function(t){const e=Uc.exec(t);let n,r=255;if(!e)return;e[5]!==n&&(r=e[6]?Dc(+e[5]):Rc(+e[5]));const i=Qc(+e[2]),o=+e[3]/100,a=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return qc(Hc,t,e,n)}(i,o,a):"hsv"===e[1]?function(t,e,n){return qc($c,t,e,n)}(i,o,a):Gc(i,o,a),{r:n[0],g:n[1],b:n[2],a:r}}(t)}class au{constructor(t){if(t instanceof au)return t;const e=typeof t;let n;var r,i,o;"object"===e?n=iu(t):"string"===e&&(o=(r=t).length,"#"===r[0]&&(4===o||5===o?i={r:255&17*Nc[r[1]],g:255&17*Nc[r[2]],b:255&17*Nc[r[3]],a:5===o?17*Nc[r[4]]:255}:7!==o&&9!==o||(i={r:Nc[r[1]]<<4|Nc[r[2]],g:Nc[r[3]]<<4|Nc[r[4]],b:Nc[r[5]]<<4|Nc[r[6]],a:9===o?Nc[r[7]]<<4|Nc[r[8]]:255})),n=i||function(t){Kc||(Kc=function(){const t={},e=Object.keys(Xc),n=Object.keys(Jc);let r,i,o,a,s;for(r=0;r<e.length;r++){for(a=s=e[r],i=0;i<n.length;i++)o=n[i],s=s.replace(o,Jc[o]);o=parseInt(Xc[a],16),t[s]=[o>>16&255,o>>8&255,255&o]}return t}(),Kc.transparent=[0,0,0,0]);const e=Kc[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||ou(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=ru(this._rgb);return t&&(t.a=Oc(t.a)),t}set rgb(t){this._rgb=iu(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${Oc(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>Vc(t.r)&&Vc(t.g)&&Vc(t.b)&&Vc(t.a))(t)?Fc:jc,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Yc(t),n=e[0],r=Bc(e[1]),i=Bc(e[2]);return t.a<255?`hsla(${n}, ${r}%, ${i}%, ${Oc(t.a)})`:`hsl(${n}, ${r}%, ${i}%)`}(this._rgb):void 0}mix(t,e){if(t){const n=this.rgb,r=t.rgb;let i;const o=e===i?.5:e,a=2*o-1,s=n.a-r.a,l=((a*s==-1?a:(a+s)/(1+a*s))+1)/2;i=1-l,n.r=255&l*n.r+i*r.r+.5,n.g=255&l*n.g+i*r.g+.5,n.b=255&l*n.b+i*r.b+.5,n.a=o*n.a+(1-o)*r.a,this.rgb=n}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,n){const r=eu(Oc(t.r)),i=eu(Oc(t.g)),o=eu(Oc(t.b));return{r:Rc(tu(r+n*(eu(Oc(e.r))-r))),g:Rc(tu(i+n*(eu(Oc(e.g))-i))),b:Rc(tu(o+n*(eu(Oc(e.b))-o))),a:t.a+n*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new au(this.rgb)}alpha(t){return this._rgb.a=Rc(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=Lc(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return nu(this._rgb,2,t),this}darken(t){return nu(this._rgb,2,-t),this}saturate(t){return nu(this._rgb,1,t),this}desaturate(t){return nu(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=Yc(t);n[0]=Qc(n[0]+e),n=Gc(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function su(t){return new au(t)}function lu(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function cu(t){return lu(t)?t:su(t)}function uu(t){return lu(t)?t:su(t).saturate(.5).darken(.1).hexString()}const hu=["x","y","borderWidth","radius","tension"],du=["color","borderColor","backgroundColor"],fu=new Map;function pu(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let r=fu.get(n);return r||(r=new Intl.NumberFormat(t,e),fu.set(n,r)),r}(e,n).format(t)}const mu={values:t=>Cl(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const r=this.chart.options.locale;let i,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(i="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const a=Kl(Math.abs(o)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:i,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),pu(t,r,l)},logarithmic(t,e,n){if(0===t)return"0";const r=n[e].significand||t/Math.pow(10,Math.floor(Kl(t)));return[1,2,3,5,10,15].includes(r)||e>.8*n.length?mu.numeric.call(this,t,e,n):""}};var gu={formatters:mu};const yu=Object.create(null),vu=Object.create(null);function bu(t,e){if(!e)return t;const n=e.split(".");for(let e=0,r=n.length;e<r;++e){const r=n[e];t=t[r]||(t[r]=Object.create(null))}return t}function xu(t,e,n){return"string"==typeof e?Ol(bu(t,e),n):Ol(bu(t,""),e)}class Au{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>uu(e.backgroundColor),this.hoverBorderColor=(t,e)=>uu(e.borderColor),this.hoverColor=(t,e)=>uu(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return xu(this,t,e)}get(t){return bu(this,t)}describe(t,e){return xu(vu,t,e)}override(t,e){return xu(yu,t,e)}route(t,e,n,r){const i=bu(this,t),o=bu(this,n),a="_"+e;Object.defineProperties(i,{[a]:{value:i[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[r];return _l(t)?Object.assign({},e,t):El(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var wu=new Au({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:du},numbers:{type:"number",properties:hu}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:gu.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Cu(t,e,n,r,i){let o=e[i];return o||(o=e[i]=t.measureText(i).width,n.push(i)),o>r&&(r=o),r}function _u(t,e,n,r){let i=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==e&&(i=r.data={},o=r.garbageCollect=[],r.font=e),t.save(),t.font=e;let a=0;const s=n.length;let l,c,u,h,d;for(l=0;l<s;l++)if(h=n[l],null!=h&&!0!==Cl(h))a=Cu(t,i,o,a,h);else if(Cl(h))for(c=0,u=h.length;c<u;c++)d=h[c],null==d||Cl(d)||(a=Cu(t,i,o,a,d));t.restore();const f=o.length/2;if(f>n.length){for(l=0;l<f;l++)delete i[o[l]];o.splice(0,f)}return a}function ku(t,e,n){const r=t.currentDevicePixelRatio,i=0!==n?Math.max(n/2,.5):0;return Math.round((e-i)*r)/r+i}function Su(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Eu(t,e,n,r){Mu(t,e,n,r,null)}function Mu(t,e,n,r,i){let o,a,s,l,c,u,h,d;const f=e.pointStyle,p=e.rotation,m=e.radius;let g=(p||0)*Gl;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(n,r),t.rotate(g),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(m)||m<=0)){switch(t.beginPath(),f){default:i?t.ellipse(n,r,i/2,m,0,0,Hl):t.arc(n,r,m,0,Hl),t.closePath();break;case"triangle":u=i?i/2:m,t.moveTo(n+Math.sin(g)*u,r-Math.cos(g)*m),g+=Xl,t.lineTo(n+Math.sin(g)*u,r-Math.cos(g)*m),g+=Xl,t.lineTo(n+Math.sin(g)*u,r-Math.cos(g)*m),t.closePath();break;case"rectRounded":c=.516*m,l=m-c,a=Math.cos(g+Jl)*l,h=Math.cos(g+Jl)*(i?i/2-c:l),s=Math.sin(g+Jl)*l,d=Math.sin(g+Jl)*(i?i/2-c:l),t.arc(n-h,r-s,c,g-$l,g-Ql),t.arc(n+d,r-a,c,g-Ql,g),t.arc(n+h,r+s,c,g,g+Ql),t.arc(n-d,r+a,c,g+Ql,g+$l),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*m,u=i?i/2:l,t.rect(n-u,r-l,2*u,2*l);break}g+=Jl;case"rectRot":h=Math.cos(g)*(i?i/2:m),a=Math.cos(g)*m,s=Math.sin(g)*m,d=Math.sin(g)*(i?i/2:m),t.moveTo(n-h,r-s),t.lineTo(n+d,r-a),t.lineTo(n+h,r+s),t.lineTo(n-d,r+a),t.closePath();break;case"crossRot":g+=Jl;case"cross":h=Math.cos(g)*(i?i/2:m),a=Math.cos(g)*m,s=Math.sin(g)*m,d=Math.sin(g)*(i?i/2:m),t.moveTo(n-h,r-s),t.lineTo(n+h,r+s),t.moveTo(n+d,r-a),t.lineTo(n-d,r+a);break;case"star":h=Math.cos(g)*(i?i/2:m),a=Math.cos(g)*m,s=Math.sin(g)*m,d=Math.sin(g)*(i?i/2:m),t.moveTo(n-h,r-s),t.lineTo(n+h,r+s),t.moveTo(n+d,r-a),t.lineTo(n-d,r+a),g+=Jl,h=Math.cos(g)*(i?i/2:m),a=Math.cos(g)*m,s=Math.sin(g)*m,d=Math.sin(g)*(i?i/2:m),t.moveTo(n-h,r-s),t.lineTo(n+h,r+s),t.moveTo(n+d,r-a),t.lineTo(n-d,r+a);break;case"line":a=i?i/2:Math.cos(g)*m,s=Math.sin(g)*m,t.moveTo(n-a,r-s),t.lineTo(n+a,r+s);break;case"dash":t.moveTo(n,r),t.lineTo(n+Math.cos(g)*(i?i/2:m),r+Math.sin(g)*m)}t.fill(),e.borderWidth>0&&t.stroke()}}function Pu(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function Tu(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Lu(t){t.restore()}function Iu(t,e,n,r,i){if(!e)return t.lineTo(n.x,n.y);if("middle"===i){const r=(e.x+n.x)/2;t.lineTo(r,e.y),t.lineTo(r,n.y)}else"after"===i!=!!r?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function Du(t,e,n,r){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(r?e.cp1x:e.cp2x,r?e.cp1y:e.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)}function Ru(t,e,n,r,i,o={}){const a=Cl(e)?e:[e],s=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=i.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),wl(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)c=a[l],o.backdrop&&Bu(t,o.backdrop),s&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),wl(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,n,r,o.maxWidth)),t.fillText(c,n,r,o.maxWidth),Ou(t,n,r,c,o),r+=i.lineHeight;t.restore()}function Ou(t,e,n,r,i){if(i.strikethrough||i.underline){const o=t.measureText(r),a=e-o.actualBoundingBoxLeft,s=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=i.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=i.decorationWidth||2,t.moveTo(a,u),t.lineTo(s,u),t.stroke()}}function Bu(t,e){const n=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=n}function Nu(t,e){const{x:n,y:r,w:i,h:o,radius:a}=e;t.arc(n+a.topLeft,r+a.topLeft,a.topLeft,-Ql,$l,!0),t.lineTo(n,r+o-a.bottomLeft),t.arc(n+a.bottomLeft,r+o-a.bottomLeft,a.bottomLeft,$l,Ql,!0),t.lineTo(n+i-a.bottomRight,r+o),t.arc(n+i-a.bottomRight,r+o-a.bottomRight,a.bottomRight,Ql,0,!0),t.lineTo(n+i,r+a.topRight),t.arc(n+i-a.topRight,r+a.topRight,a.topRight,0,-Ql,!0),t.lineTo(n+a.topLeft,r)}const zu=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Fu=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ju(t,e){const n=(""+t).match(zu);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function Vu(t,e){const n={},r=_l(e),i=r?Object.keys(e):e,o=_l(t)?r?n=>El(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of i)n[t]=+o(t)||0;return n}function Uu(t){return Vu(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Wu(t){return Vu(t,["topLeft","topRight","bottomLeft","bottomRight"])}function $u(t){const e=Uu(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Hu(t,e){t=t||{},e=e||wu.font;let n=El(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let r=El(t.style,e.style);r&&!(""+r).match(Fu)&&(console.warn('Invalid font style specified: "'+r+'"'),r=void 0);const i={family:El(t.family,e.family),lineHeight:ju(El(t.lineHeight,e.lineHeight),n),size:n,style:r,weight:El(t.weight,e.weight),string:""};return i.string=function(t){return!t||wl(t.size)||wl(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(i),i}function Yu(t,e,n,r){let i,o,a,s=!0;for(i=0,o=t.length;i<o;++i)if(a=t[i],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),s=!1),void 0!==n&&Cl(a)&&(a=a[n%a.length],s=!1),void 0!==a))return r&&!s&&(r.cacheable=!1),a}function qu(t,e){return Object.assign(Object.create(t),e)}function Gu(t,e=[""],n=t,r,i=(()=>t[0])){Vl(r)||(r=oh("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:n,_fallback:r,_getTarget:i,override:i=>Gu([i,...t],e,n,r)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,r)=>Zu(n,r,(()=>function(t,e,n,r){let i;for(const o of e)if(i=oh(Xu(o,t),n),Vl(i))return Ku(t,i)?rh(n,r,t,i):i}(r,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>ah(t).includes(e),ownKeys:t=>ah(t),set(t,e,n){const r=t._storage||(t._storage=i());return t[e]=r[e]=n,delete t._keys,!0}})}function Qu(t,e,n,r){const i={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:Ju(t,r),setContext:e=>Qu(t,e,n,r),override:i=>Qu(t.override(i),e,n,r)};return new Proxy(i,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>Zu(t,e,(()=>function(t,e,n){const{_proxy:r,_context:i,_subProxy:o,_descriptors:a}=t;let s=r[e];return Ul(s)&&a.isScriptable(e)&&(s=function(t,e,n,r){const{_proxy:i,_context:o,_subProxy:a,_stack:s}=n;if(s.has(t))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+t);return s.add(t),e=e(o,a||r),s.delete(t),Ku(t,e)&&(e=rh(i._scopes,i,t,e)),e}(e,s,t,n)),Cl(s)&&s.length&&(s=function(t,e,n,r){const{_proxy:i,_context:o,_subProxy:a,_descriptors:s}=n;if(Vl(o.index)&&r(t))e=e[o.index%e.length];else if(_l(e[0])){const n=e,r=i._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=rh(r,i,t,l);e.push(Qu(n,o,a&&a[t],s))}}return e}(e,s,t,a.isIndexable)),Ku(e,s)&&(s=Qu(s,i,o&&o[e],a)),s}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,r)=>(t[n]=r,delete e[n],!0)})}function Ju(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:r=e.indexable,_allKeys:i=e.allKeys}=t;return{allKeys:i,scriptable:n,indexable:r,isScriptable:Ul(n)?n:()=>n,isIndexable:Ul(r)?r:()=>r}}const Xu=(t,e)=>t?t+jl(e):e,Ku=(t,e)=>_l(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Zu(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const r=n();return t[e]=r,r}function th(t,e,n){return Ul(t)?t(e,n):t}const eh=(t,e)=>!0===t?e:"string"==typeof t?Fl(e,t):void 0;function nh(t,e,n,r,i){for(const o of e){const e=eh(n,o);if(e){t.add(e);const o=th(e._fallback,n,i);if(Vl(o)&&o!==n&&o!==r)return o}else if(!1===e&&Vl(r)&&n!==r)return null}return!1}function rh(t,e,n,r){const i=e._rootScopes,o=th(e._fallback,n,r),a=[...t,...i],s=new Set;s.add(r);let l=ih(s,a,n,o||n,r);return null!==l&&(!Vl(o)||o===n||(l=ih(s,a,o,l,r),null!==l))&&Gu(Array.from(s),[""],i,o,(()=>function(t,e,n){const r=t._getTarget();e in r||(r[e]={});const i=r[e];return Cl(i)&&_l(n)?n:i||{}}(e,n,r)))}function ih(t,e,n,r,i){for(;n;)n=nh(t,e,n,r,i);return n}function oh(t,e){for(const n of e){if(!n)continue;const e=n[t];if(Vl(e))return e}}function ah(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function sh(t,e,n,r){const{iScale:i}=t,{key:o="r"}=this._parsing,a=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=e[c],a[s]={r:i.parse(Fl(u,o),c)};return a}const lh=Number.EPSILON||1e-14,ch=(t,e)=>e<t.length&&!t[e].skip&&t[e],uh=t=>"x"===t?"y":"x";function hh(t,e,n,r){const i=t.skip?e:t,o=e,a=n.skip?e:n,s=lc(o,i),l=lc(a,o);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const h=r*c,d=r*u;return{previous:{x:o.x-h*(a.x-i.x),y:o.y-h*(a.y-i.y)},next:{x:o.x+d*(a.x-i.x),y:o.y+d*(a.y-i.y)}}}function dh(t,e,n){return Math.max(Math.min(t,n),e)}function fh(t,e,n,r,i){let o,a,s,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=uh(e),r=t.length,i=Array(r).fill(0),o=Array(r);let a,s,l,c=ch(t,0);for(a=0;a<r;++a)if(s=l,l=c,c=ch(t,a+1),l){if(c){const t=c[e]-l[e];i[a]=0!==t?(c[n]-l[n])/t:0}o[a]=s?c?Zl(i[a-1])!==Zl(i[a])?0:(i[a-1]+i[a])/2:i[a-1]:i[a]}!function(t,e,n){const r=t.length;let i,o,a,s,l,c=ch(t,0);for(let u=0;u<r-1;++u)l=c,c=ch(t,u+1),l&&c&&(tc(e[u],0,lh)?n[u]=n[u+1]=0:(i=n[u]/e[u],o=n[u+1]/e[u],s=Math.pow(i,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[u]=i*a*e[u],n[u+1]=o*a*e[u])))}(t,i,o),function(t,e,n="x"){const r=uh(n),i=t.length;let o,a,s,l=ch(t,0);for(let c=0;c<i;++c){if(a=s,s=l,l=ch(t,c+1),!s)continue;const i=s[n],u=s[r];a&&(o=(i-a[n])/3,s[`cp1${n}`]=i-o,s[`cp1${r}`]=u-o*e[c]),l&&(o=(l[n]-i)/3,s[`cp2${n}`]=i+o,s[`cp2${r}`]=u+o*e[c])}}(t,o,e)}(t,i);else{let n=r?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)s=t[o],l=hh(n,s,t[Math.min(o+1,a-(r?0:1))%a],e.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}e.capBezierPoints&&function(t,e){let n,r,i,o,a,s=Pu(t[0],e);for(n=0,r=t.length;n<r;++n)a=o,o=s,s=n<r-1&&Pu(t[n+1],e),o&&(i=t[n],a&&(i.cp1x=dh(i.cp1x,e.left,e.right),i.cp1y=dh(i.cp1y,e.top,e.bottom)),s&&(i.cp2x=dh(i.cp2x,e.left,e.right),i.cp2y=dh(i.cp2y,e.top,e.bottom)))}(t,n)}function ph(){return"undefined"!=typeof window&&"undefined"!=typeof document}function mh(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function gh(t,e,n){let r;return"string"==typeof t?(r=parseInt(t,10),-1!==t.indexOf("%")&&(r=r/100*e.parentNode[n])):r=t,r}const yh=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),vh=["top","right","bottom","left"];function bh(t,e,n){const r={};n=n?"-"+n:"";for(let i=0;i<4;i++){const o=vh[i];r[o]=parseFloat(t[e+"-"+o+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}function xh(t,e){if("native"in t)return t;const{canvas:n,currentDevicePixelRatio:r}=e,i=yh(n),o="border-box"===i.boxSizing,a=bh(i,"padding"),s=bh(i,"border","width"),{x:l,y:c,box:u}=function(t,e){const n=t.touches,r=n&&n.length?n[0]:t,{offsetX:i,offsetY:o}=r;let a,s,l=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(i,o,t.target))a=i,s=o;else{const t=e.getBoundingClientRect();a=r.clientX-t.left,s=r.clientY-t.top,l=!0}return{x:a,y:s,box:l}}(t,n),h=a.left+(u&&s.left),d=a.top+(u&&s.top);let{width:f,height:p}=e;return o&&(f-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-h)/f*n.width/r),y:Math.round((c-d)/p*n.height/r)}}const Ah=t=>Math.round(10*t)/10;function wh(t,e,n){const r=e||1,i=Math.floor(t.height*r),o=Math.floor(t.width*r);t.height=i/r,t.width=o/r;const a=t.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==r||a.height!==i||a.width!==o)&&(t.currentDevicePixelRatio=r,a.height=i,a.width=o,t.ctx.setTransform(r,0,0,r,0,0),!0)}const Ch=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function _h(t,e){const n=function(t,e){return yh(t).getPropertyValue(e)}(t,e),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0}function kh(t,e,n,r){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function Sh(t,e,n,r){return{x:t.x+n*(e.x-t.x),y:"middle"===r?n<.5?t.y:e.y:"after"===r?n<1?t.y:e.y:n>0?e.y:t.y}}function Eh(t,e,n,r){const i={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=kh(t,i,n),s=kh(i,o,n),l=kh(o,e,n),c=kh(a,s,n),u=kh(s,l,n);return kh(c,u,n)}function Mh(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ph(t,e){let n,r;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=r)}function Th(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Lh(t){return"angle"===t?{between:hc,compare:cc,normalize:uc}:{between:fc,compare:(t,e)=>t-e,normalize:t=>t}}function Ih({start:t,end:e,count:n,loop:r,style:i}){return{start:t%n,end:e%n,loop:r&&(e-t+1)%n==0,style:i}}function Dh(t,e,n){if(!n)return[t];const{property:r,start:i,end:o}=n,a=e.length,{compare:s,between:l,normalize:c}=Lh(r),{start:u,end:h,loop:d,style:f}=function(t,e,n){const{property:r,start:i,end:o}=n,{between:a,normalize:s}=Lh(r),l=e.length;let c,u,{start:h,end:d,loop:f}=t;if(f){for(h+=l,d+=l,c=0,u=l;c<u&&a(s(e[h%l][r]),i,o);++c)h--,d--;h%=l,d%=l}return d<h&&(d+=l),{start:h,end:d,loop:f,style:t.style}}(t,e,n),p=[];let m,g,y,v=!1,b=null;for(let t=u,n=u;t<=h;++t)g=e[t%a],g.skip||(m=c(g[r]),m!==y&&(v=l(m,i,o),null===b&&(v||l(i,y,m)&&0!==s(i,y))&&(b=0===s(m,i)?t:n),null!==b&&(!v||0===s(o,m)||l(o,y,m))&&(p.push(Ih({start:b,end:t,loop:d,count:a,style:f})),b=null),n=t,y=m));return null!==b&&p.push(Ih({start:b,end:h,loop:d,count:a,style:f})),p}function Rh(t,e){const n=[],r=t.segments;for(let i=0;i<r.length;i++){const o=Dh(r[i],t.points,e);o.length&&n.push(...o)}return n}function Oh(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Bh(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}class Nh{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,r){const i=e.listeners[r],o=e.duration;i.forEach((r=>r({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=xc.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,r)=>{if(!n.running||!n.items.length)return;const i=n.items;let o,a=i.length-1,s=!1;for(;a>=0;--a)o=i[a],o._active?(o._total>n.duration&&(n.duration=o._total),o.tick(t),s=!0):(i[a]=i[i.length-1],i.pop());s&&(r.draw(),this._notify(r,n,t,"progress")),i.length||(n.running=!1,this._notify(r,n,t,"complete"),n.initial=!1),e+=i.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var zh=new Nh;const Fh="transparent",jh={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const r=cu(t||Fh),i=r.valid&&cu(e||Fh);return i&&i.valid?i.mix(r,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class Vh{constructor(t,e,n,r){const i=e[n];r=Yu([t.to,r,i,t.from]);const o=Yu([t.from,i,r]);this._active=!0,this._fn=t.fn||jh[t.type||typeof o],this._easing=Tc[t.easing]||Tc.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=r,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const r=this._target[this._prop],i=n-this._start,o=this._duration-i;this._start=n,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=i,this._loop=!!t.loop,this._to=Yu([t.to,e,r,t.from]),this._from=Yu([t.from,r,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,r=this._prop,i=this._from,o=this._loop,a=this._to;let s;if(this._active=i!==a&&(o||e<n),!this._active)return this._target[r]=a,void this._notify(!0);e<0?this._target[r]=i:(s=e/n%2,s=o&&s>1?2-s:s,s=this._easing(Math.min(1,Math.max(0,s))),this._target[r]=this._fn(i,a,s))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}class Uh{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!_l(t))return;const e=Object.keys(wu.animation),n=this._properties;Object.getOwnPropertyNames(t).forEach((r=>{const i=t[r];if(!_l(i))return;const o={};for(const t of e)o[t]=i[t];(Cl(i.properties)&&i.properties||[r]).forEach((t=>{t!==r&&n.has(t)||n.set(t,o)}))}))}_animateOptions(t,e){const n=e.options,r=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!r)return[];const i=this._createAnimations(r,n);return n.$shared&&function(t,e){const n=[],r=Object.keys(e);for(let e=0;e<r.length;e++){const i=t[r[e]];i&&i.active()&&n.push(i.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),i}_createAnimations(t,e){const n=this._properties,r=[],i=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let s;for(s=o.length-1;s>=0;--s){const l=o[s];if("$"===l.charAt(0))continue;if("options"===l){r.push(...this._animateOptions(t,e));continue}const c=e[l];let u=i[l];const h=n.get(l);if(u){if(h&&u.active()){u.update(h,c,a);continue}u.cancel()}h&&h.duration?(i[l]=u=new Vh(h,t,l,c),r.push(u)):t[l]=c}return r}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(zh.add(this._chart,n),!0):void 0}}function Wh(t,e){const n=t&&t.options||{},r=n.reverse,i=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:r?o:i,end:r?i:o}}function $h(t,e){const n=[],r=t._getSortedDatasetMetas(e);let i,o;for(i=0,o=r.length;i<o;++i)n.push(r[i].index);return n}function Hh(t,e,n,r={}){const i=t.keys,o="single"===r.mode;let a,s,l,c;if(null!==e){for(a=0,s=i.length;a<s;++a){if(l=+i[a],l===n){if(r.all)continue;break}c=t.values[l],kl(c)&&(o||0===e||Zl(e)===Zl(c))&&(e+=c)}return e}}function Yh(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function qh(t,e,n){const r=t[e]||(t[e]={});return r[n]||(r[n]={})}function Gh(t,e,n,r){for(const i of e.getMatchingVisibleMetas(r).reverse()){const e=t[i.index];if(n&&e>0||!n&&e<0)return i.index}return null}function Qh(t,e){const{chart:n,_cachedMeta:r}=t,i=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=r,l=o.axis,c=a.axis,u=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,a,r),h=e.length;let d;for(let t=0;t<h;++t){const n=e[t],{[l]:o,[c]:h}=n;d=(n._stacks||(n._stacks={}))[c]=qh(i,u,o),d[s]=h,d._top=Gh(d,a,!0,r.type),d._bottom=Gh(d,a,!1,r.type)}}function Jh(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function Xh(t,e){const n=t.controller.index,r=t.vScale&&t.vScale.axis;if(r){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[r]||void 0===e[r][n])return;delete e[r][n]}}}const Kh=t=>"reset"===t||"none"===t,Zh=(t,e)=>e?t:Object.assign({},t);class td{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Yh(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Xh(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),r=(t,e,n,r)=>"x"===t?e:"r"===t?r:n,i=e.xAxisID=El(n.xAxisID,Jh(t,"x")),o=e.yAxisID=El(n.yAxisID,Jh(t,"y")),a=e.rAxisID=El(n.rAxisID,Jh(t,"r")),s=e.indexAxis,l=e.iAxisID=r(s,i,o,a),c=e.vAxisID=r(s,o,i,a);e.xScale=this.getScaleForId(i),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&vc(this._data,this),t._stacked&&Xh(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(_l(e))this._data=function(t){const e=Object.keys(t),n=new Array(e.length);let r,i,o;for(r=0,i=e.length;r<i;++r)o=e[r],n[r]={x:o,y:t[o]};return n}(e);else if(n!==e){if(n){vc(n,this);const t=this._cachedMeta;Xh(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(r=e)._chartjs?r._chartjs.listeners.push(this):(Object.defineProperty(r,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),yc.forEach((t=>{const e="_onData"+jl(t),n=r[t];Object.defineProperty(r,t,{configurable:!0,enumerable:!1,value(...t){const i=n.apply(this,t);return r._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),i}})})))),this._syncList=[],this._data=e}var r}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let r=!1;this._dataCheck();const i=e._stacked;e._stacked=Yh(e.vScale,e),e.stack!==n.stack&&(r=!0,Xh(e),e.stack=n.stack),this._resyncElements(t),(r||i!==e._stacked)&&Qh(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:r}=this,{iScale:i,_stacked:o}=n,a=i.axis;let s,l,c,u=0===t&&e===r.length||n._sorted,h=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=r,n._sorted=!0,c=r;else{c=Cl(r[t])?this.parseArrayData(n,r,t,e):_l(r[t])?this.parseObjectData(n,r,t,e):this.parsePrimitiveData(n,r,t,e);const i=()=>null===l[a]||h&&l[a]<h[a];for(s=0;s<e;++s)n._parsed[s+t]=l=c[s],u&&(i()&&(u=!1),h=l);n._sorted=u}o&&Qh(this,c)}parsePrimitiveData(t,e,n,r){const{iScale:i,vScale:o}=t,a=i.axis,s=o.axis,l=i.getLabels(),c=i===o,u=new Array(r);let h,d,f;for(h=0,d=r;h<d;++h)f=h+n,u[h]={[a]:c||i.parse(l[f],f),[s]:o.parse(e[f],f)};return u}parseArrayData(t,e,n,r){const{xScale:i,yScale:o}=t,a=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=e[c],a[s]={x:i.parse(u[0],c),y:o.parse(u[1],c)};return a}parseObjectData(t,e,n,r){const{xScale:i,yScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(r);let c,u,h,d;for(c=0,u=r;c<u;++c)h=c+n,d=e[h],l[c]={x:i.parse(Fl(d,a),h),y:o.parse(Fl(d,s),h)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const r=this.chart,i=this._cachedMeta,o=e[t.axis];return Hh({keys:$h(r,!0),values:e._stacks[t.axis]},o,i.index,{mode:n})}updateRangeFromParsed(t,e,n,r){const i=n[e.axis];let o=null===i?NaN:i;const a=r&&n._stacks[e.axis];r&&a&&(r.values=a,o=Hh(r,i,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this._cachedMeta,r=n._parsed,i=n._sorted&&t===n.iScale,o=r.length,a=this._getOtherScale(t),s=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:$h(n,!0),values:null})(e,n,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:u}=function(t){const{min:e,max:n,minDefined:r,maxDefined:i}=t.getUserBounds();return{min:r?e:Number.NEGATIVE_INFINITY,max:i?n:Number.POSITIVE_INFINITY}}(a);let h,d;function f(){d=r[h];const e=d[a.axis];return!kl(d[t.axis])||c>e||u<e}for(h=0;h<o&&(f()||(this.updateRangeFromParsed(l,t,d,s),!i));++h);if(i)for(h=o-1;h>=0;--h)if(!f()){this.updateRangeFromParsed(l,t,d,s);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let r,i,o;for(r=0,i=e.length;r<i;++r)o=e[r][t.axis],kl(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,r=e.vScale,i=this.getParsed(t);return{label:n?""+n.getLabelForValue(i[n.axis]):"",value:r?""+r.getLabelForValue(i[r.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,r,i;return _l(t)?(e=t.top,n=t.right,r=t.bottom,i=t.left):e=n=r=i=t,{top:e,right:n,bottom:r,left:i,disabled:!1===t}}(El(this.options.clip,function(t,e,n){if(!1===n)return!1;const r=Wh(t,n),i=Wh(e,n);return{top:i.end,right:r.end,bottom:i.start,left:r.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,r=n.data||[],i=e.chartArea,o=[],a=this._drawStart||0,s=this._drawCount||r.length-a,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,i,a,s),c=a;c<a+s;++c){const e=r[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,i))}for(c=0;c<o.length;++c)o[c].draw(t,i)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const r=this.getDataset();let i;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];i=e.$context||(e.$context=function(t,e,n){return qu(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),i.parsed=this.getParsed(t),i.raw=r.data[t],i.index=i.dataIndex=t}else i=this.$context||(this.$context=function(t,e){return qu(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),i.dataset=r,i.index=i.datasetIndex=this.index;return i.active=!!e,i.mode=n,i}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const r="active"===e,i=this._cachedDataOpts,o=t+"-"+e,a=i[o],s=this.enableOptionSharing&&Vl(n);if(a)return Zh(a,s);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),u=r?[`${t}Hover`,"hover",t,""]:[t,""],h=l.getOptionScopes(this.getDataset(),c),d=Object.keys(wu.elements[t]),f=l.resolveNamedOptions(h,d,(()=>this.getContext(n,r)),u);return f.$shared&&(f.$shared=s,i[o]=Object.freeze(Zh(f,s))),f}_resolveAnimations(t,e,n){const r=this.chart,i=this._cachedDataOpts,o=`animation-${e}`,a=i[o];if(a)return a;let s;if(!1!==r.options.animation){const r=this.chart.config,i=r.datasetAnimationScopeKeys(this._type,e),o=r.getOptionScopes(this.getDataset(),i);s=r.createResolver(o,this.getContext(t,n,e))}const l=new Uh(r,s&&s.animations);return s&&s._cacheable&&(i[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Kh(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const n=this.resolveDataElementOptions(t,e),r=this._sharedOptions,i=this.getSharedOptions(n),o=this.includeOptions(e,i)||i!==r;return this.updateSharedOptions(i,e,n),{sharedOptions:i,includeOptions:o}}updateElement(t,e,n,r){Kh(r)?Object.assign(t,n):this._resolveAnimations(e,r).update(t,n)}updateSharedOptions(t,e,n){t&&!Kh(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,r){t.active=r;const i=this.getStyle(e,r);this._resolveAnimations(e,n,r).update(t,{options:!r&&this.getSharedOptions(i)||i})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const r=n.length,i=e.length,o=Math.min(i,r);o&&this.parse(0,o),i>r?this._insertElements(r,i-r,t):i<r&&this._removeElements(i,r-i)}_insertElements(t,e,n=!0){const r=this._cachedMeta,i=r.data,o=t+e;let a;const s=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(s(i),a=t;a<o;++a)i[a]=new this.dataElementType;this._parsing&&s(r._parsed),this.parse(t,e),n&&this.updateElements(i,t,e,"reset")}updateElements(t,e,n,r){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(t,e);n._stacked&&Xh(n,r)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,r]=t;this[e](n,r)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function ed(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let r=[];for(let e=0,i=n.length;e<i;e++)r=r.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=bc(r.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let r,i,o,a,s=e._length;const l=()=>{32767!==o&&-32768!==o&&(Vl(a)&&(s=Math.min(s,Math.abs(o-a)||s)),a=o)};for(r=0,i=n.length;r<i;++r)o=e.getPixelForValue(n[r]),l();for(a=void 0,r=0,i=e.ticks.length;r<i;++r)o=e.getPixelForTick(r),l();return s}function nd(t,e,n,r){return Cl(t)?function(t,e,n,r){const i=n.parse(t[0],r),o=n.parse(t[1],r),a=Math.min(i,o),s=Math.max(i,o);let l=a,c=s;Math.abs(a)>Math.abs(s)&&(l=s,c=a),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:i,end:o,min:a,max:s}}(t,e,n,r):e[n.axis]=n.parse(t,r),e}function rd(t,e,n,r){const i=t.iScale,o=t.vScale,a=i.getLabels(),s=i===o,l=[];let c,u,h,d;for(c=n,u=n+r;c<u;++c)d=e[c],h={},h[i.axis]=s||i.parse(a[c],c),l.push(nd(d,h,o,c));return l}function id(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function od(t,e,n,r){let i=e.borderSkipped;const o={};if(!i)return void(t.borderSkipped=o);if(!0===i)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:s,reverse:l,top:c,bottom:u}=function(t){let e,n,r,i,o;return t.horizontal?(e=t.base>t.x,n="left",r="right"):(e=t.base<t.y,n="bottom",r="top"),e?(i="end",o="start"):(i="start",o="end"),{start:n,end:r,reverse:e,top:i,bottom:o}}(t);"middle"===i&&n&&(t.enableBorderRadius=!0,(n._top||0)===r?i=c:(n._bottom||0)===r?i=u:(o[ad(u,a,s,l)]=!0,i=c)),o[ad(i,a,s,l)]=!0,t.borderSkipped=o}function ad(t,e,n,r){var i,o,a;return r?(a=n,t=sd(t=(i=t)===(o=e)?a:i===a?o:i,n,e)):t=sd(t,e,n),t}function sd(t,e,n){return"start"===t?e:"end"===t?n:t}function ld(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}class cd extends td{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n,color:r}}=t.legend.options;return e.labels.map(((e,i)=>{const o=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:r,lineWidth:o.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,r=this._cachedMeta;if(!1===this._parsing)r._parsed=n;else{let i,o,a=t=>+n[t];if(_l(n[t])){const{key:t="value"}=this._parsing;a=e=>+Fl(n[e],t)}for(i=t,o=t+e;i<o;++i)r._parsed[i]=a(i)}}_getRotation(){return ic(this.options.rotation-90)}_getCircumference(){return ic(this.options.circumference)}_getRotationExtents(){let t=Hl,e=-Hl;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)&&this.chart.getDatasetMeta(n).type===this._type){const r=this.chart.getDatasetMeta(n).controller,i=r._getRotation(),o=r._getCircumference();t=Math.min(t,i),e=Math.max(e,i+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:n}=e,r=this._cachedMeta,i=r.data,o=this.getMaxBorderWidth()+this.getMaxOffset(i)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-o)/2,0),s=Math.min((c=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/c),1);var l,c;const u=this._getRingWeight(this.index),{circumference:h,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:m,offsetY:g}=function(t,e,n){let r=1,i=1,o=0,a=0;if(e<Hl){const s=t,l=s+e,c=Math.cos(s),u=Math.sin(s),h=Math.cos(l),d=Math.sin(l),f=(t,e,r)=>hc(t,s,l,!0)?1:Math.max(e,e*n,r,r*n),p=(t,e,r)=>hc(t,s,l,!0)?-1:Math.min(e,e*n,r,r*n),m=f(0,c,h),g=f(Ql,u,d),y=p($l,c,h),v=p($l+Ql,u,d);r=(m-y)/2,i=(g-v)/2,o=-(m+y)/2,a=-(g+v)/2}return{ratioX:r,ratioY:i,offsetX:o,offsetY:a}}(d,h,s),y=(n.width-o)/f,v=(n.height-o)/p,b=Math.max(Math.min(y,v)/2,0),x=Ml(this.options.radius,b),A=(x-Math.max(x*s,0))/this._getVisibleDatasetWeightTotal();this.offsetX=m*x,this.offsetY=g*x,r.total=this.calculateTotal(),this.outerRadius=x-A*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-A*u,0),this.updateElements(i,0,i.length,t)}_circumference(t,e){const n=this.options,r=this._cachedMeta,i=this._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===r._parsed[t]||r.data[t].hidden?0:this.calculateCircumference(r._parsed[t]*i/Hl)}updateElements(t,e,n,r){const i="reset"===r,o=this.chart,a=o.chartArea,s=o.options.animation,l=(a.left+a.right)/2,c=(a.top+a.bottom)/2,u=i&&s.animateScale,h=u?0:this.innerRadius,d=u?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,r);let m,g=this._getRotation();for(m=0;m<e;++m)g+=this._circumference(m,i);for(m=e;m<e+n;++m){const e=this._circumference(m,i),n=t[m],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:g,endAngle:g+e,circumference:e,outerRadius:d,innerRadius:h};p&&(o.options=f||this.resolveDataElementOptions(m,n.active?"active":r)),g+=e,this.updateElement(n,m,o,r)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,r=0;for(n=0;n<e.length;n++){const i=t._parsed[n];null===i||isNaN(i)||!this.chart.getDataVisibility(n)||e[n].hidden||(r+=Math.abs(i))}return r}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Hl*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=pu(e._parsed[t],n.options.locale);return{label:r[t]||"",value:i}}getMaxBorderWidth(t){let e=0;const n=this.chart;let r,i,o,a,s;if(!t)for(r=0,i=n.data.datasets.length;r<i;++r)if(n.isDatasetVisible(r)){o=n.getDatasetMeta(r),t=o.data,a=o.controller;break}if(!t)return 0;for(r=0,i=t.length;r<i;++r)s=a.resolveDataElementOptions(r),"inner"!==s.borderAlign&&(e=Math.max(e,s.borderWidth||0,s.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let n=0,r=t.length;n<r;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(El(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class ud extends td{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:n,data:r=[],_dataset:i}=e,o=this.chart._animationsDisabled;let{start:a,count:s}=_c(e,r,o);this._drawStart=a,this._drawCount=s,kc(e)&&(a=0,s=r.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!i._decimated,n.points=r;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(n,void 0,{animated:!o,options:l},t),this.updateElements(r,a,s,t)}updateElements(t,e,n,r){const i="reset"===r,{iScale:o,vScale:a,_stacked:s,_dataset:l}=this._cachedMeta,{sharedOptions:c,includeOptions:u}=this._getSharedOptions(e,r),h=o.axis,d=a.axis,{spanGaps:f,segment:p}=this.options,m=nc(f)?f:Number.POSITIVE_INFINITY,g=this.chart._animationsDisabled||i||"none"===r,y=e+n,v=t.length;let b=e>0&&this.getParsed(e-1);for(let n=0;n<v;++n){const f=t[n],v=g?f:{};if(n<e||n>=y){v.skip=!0;continue}const x=this.getParsed(n),A=wl(x[d]),w=v[h]=o.getPixelForValue(x[h],n),C=v[d]=i||A?a.getBasePixel():a.getPixelForValue(s?this.applyStack(a,x,s):x[d],n);v.skip=isNaN(w)||isNaN(C)||A,v.stop=n>0&&Math.abs(x[h]-b[h])>m,p&&(v.parsed=x,v.raw=l.data[n]),u&&(v.options=c||this.resolveDataElementOptions(n,f.active?"active":r)),g||this.updateElement(f,n,v,r),b=x}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,n=e.options&&e.options.borderWidth||0,r=t.data||[];if(!r.length)return n;const i=r[0].size(this.resolveDataElementOptions(0)),o=r[r.length-1].size(this.resolveDataElementOptions(r.length-1));return Math.max(n,i,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}var hd=Object.freeze({__proto__:null,BarController:class extends td{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,n,r){return rd(t,e,n,r)}parseArrayData(t,e,n,r){return rd(t,e,n,r)}parseObjectData(t,e,n,r){const{iScale:i,vScale:o}=t,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===i.axis?a:s,c="x"===o.axis?a:s,u=[];let h,d,f,p;for(h=n,d=n+r;h<d;++h)p=e[h],f={},f[i.axis]=i.parse(Fl(p,l),h),u.push(nd(Fl(p,c),f,o,h));return u}updateRangeFromParsed(t,e,n,r){super.updateRangeFromParsed(t,e,n,r);const i=n._custom;i&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,i.min),t.max=Math.max(t.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:r}=e,i=this.getParsed(t),o=i._custom,a=id(o)?"["+o.start+", "+o.end+"]":""+r.getLabelForValue(i[r.axis]);return{label:""+n.getLabelForValue(i[n.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,r){const i="reset"===r,{index:o,_cachedMeta:{vScale:a}}=this,s=a.getBasePixel(),l=a.isHorizontal(),c=this._getRuler(),{sharedOptions:u,includeOptions:h}=this._getSharedOptions(e,r);for(let d=e;d<e+n;d++){const e=this.getParsed(d),n=i||wl(e[a.axis])?{base:s,head:s}:this._calculateBarValuePixels(d),f=this._calculateBarIndexPixels(d,c),p=(e._stacks||{})[a.axis],m={horizontal:l,base:n.base,enableBorderRadius:!p||id(e._custom)||o===p._top||o===p._bottom,x:l?n.head:f.center,y:l?f.center:n.head,height:l?f.size:Math.abs(n.size),width:l?Math.abs(n.size):f.size};h&&(m.options=u||this.resolveDataElementOptions(d,t[d].active?"active":r));const g=m.options||t[d].options;od(m,g,p,o),ld(m,g,c.ratio),this.updateElement(t[d],d,m,r)}}_getStacks(t,e){const{iScale:n}=this._cachedMeta,r=n.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),i=n.options.stacked,o=[],a=t=>{const n=t.controller.getParsed(e),r=n&&n[t.vScale.axis];if(wl(r)||isNaN(r))return!0};for(const n of r)if((void 0===e||!a(n))&&((!1===i||-1===o.indexOf(n.stack)||void 0===i&&void 0===n.stack)&&o.push(n.stack),n.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const r=this._getStacks(t,n),i=void 0!==e?r.indexOf(e):-1;return-1===i?r.length-1:i}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,r=[];let i,o;for(i=0,o=e.data.length;i<o;++i)r.push(n.getPixelForValue(this.getParsed(i)[n.axis],i));const a=t.barThickness;return{min:a||ed(e),pixels:r,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n},options:{base:r,minBarLength:i}}=this,o=r||0,a=this.getParsed(t),s=a._custom,l=id(s);let c,u,h=a[e.axis],d=0,f=n?this.applyStack(e,a,n):h;f!==h&&(d=f-h,f=h),l&&(h=s.barStart,f=s.barEnd-s.barStart,0!==h&&Zl(h)!==Zl(s.barEnd)&&(d=0),d+=h);const p=wl(r)||l?d:r;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(d+f):m,u=c-m,Math.abs(u)<i){u=function(t,e,n){return 0!==t?Zl(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(u,e,o)*i,h===o&&(m-=u/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),r=Math.min(t,n),a=Math.max(t,n);m=Math.max(Math.min(m,a),r),c=m+u}if(m===e.getPixelForValue(o)){const t=Zl(u)*e.getLineWidthForValue(o)/2;m+=t,u-=t}return{size:u,base:m,head:c,center:c+u/2}}_calculateBarIndexPixels(t,e){const n=e.scale,r=this.options,i=r.skipNull,o=El(r.maxBarThickness,1/0);let a,s;if(e.grouped){const n=i?this._getStackCount(t):e.stackCount,l="flex"===r.barThickness?function(t,e,n,r){const i=e.pixels,o=i[t];let a=t>0?i[t-1]:null,s=t<i.length-1?i[t+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?e.end-e.start:s-o)),null===s&&(s=o+o-a);const c=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/r,ratio:n.barPercentage,start:c}}(t,e,r,n):function(t,e,n,r){const i=n.barThickness;let o,a;return wl(i)?(o=e.min*n.categoryPercentage,a=n.barPercentage):(o=i*r,a=1),{chunk:o/r,ratio:a,start:e.pixels[t]-o/2}}(t,e,r,n),c=this._getStackIndex(this.index,this._cachedMeta.stack,i?t:void 0);a=l.start+l.chunk*c+l.chunk/2,s=Math.min(o,l.chunk*l.ratio)}else a=n.getPixelForValue(this.getParsed(t)[n.axis],t),s=Math.min(o,e.min*e.ratio);return{base:a-s/2,head:a+s/2,center:a,size:s}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,r=n.length;let i=0;for(;i<r;++i)null!==this.getParsed(i)[e.axis]&&n[i].draw(this._ctx)}},BubbleController:class extends td{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,n,r){const i=super.parsePrimitiveData(t,e,n,r);for(let t=0;t<i.length;t++)i[t]._custom=this.resolveDataElementOptions(t+n).radius;return i}parseArrayData(t,e,n,r){const i=super.parseArrayData(t,e,n,r);for(let t=0;t<i.length;t++){const r=e[n+t];i[t]._custom=El(r[2],this.resolveDataElementOptions(t+n).radius)}return i}parseObjectData(t,e,n,r){const i=super.parseObjectData(t,e,n,r);for(let t=0;t<i.length;t++){const r=e[n+t];i[t]._custom=El(r&&r.r&&+r.r,this.resolveDataElementOptions(t+n).radius)}return i}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart.data.labels||[],{xScale:r,yScale:i}=e,o=this.getParsed(t),a=r.getLabelForValue(o.x),s=i.getLabelForValue(o.y),l=o._custom;return{label:n[t]||"",value:"("+a+", "+s+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,r){const i="reset"===r,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:s,includeOptions:l}=this._getSharedOptions(e,r),c=o.axis,u=a.axis;for(let h=e;h<e+n;h++){const e=t[h],n=!i&&this.getParsed(h),d={},f=d[c]=i?o.getPixelForDecimal(.5):o.getPixelForValue(n[c]),p=d[u]=i?a.getBasePixel():a.getPixelForValue(n[u]);d.skip=isNaN(f)||isNaN(p),l&&(d.options=s||this.resolveDataElementOptions(h,e.active?"active":r),i&&(d.options.radius=0)),this.updateElement(e,h,d,r)}}resolveDataElementOptions(t,e){const n=this.getParsed(t);let r=super.resolveDataElementOptions(t,e);r.$shared&&(r=Object.assign({},r,{$shared:!1}));const i=r.radius;return"active"!==e&&(r.radius=0),r.radius+=El(n&&n._custom,i),r}},DoughnutController:cd,LineController:ud,PolarAreaController:class extends td{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n,color:r}}=t.legend.options;return e.labels.map(((e,i)=>{const o=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:r,lineWidth:o.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=pu(e._parsed[t].r,n.options.locale);return{label:r[t]||"",value:i}}parseObjectData(t,e,n,r){return sh.bind(this)(t,e,n,r)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,n)=>{const r=this.getParsed(n).r;!isNaN(r)&&this.chart.getDataVisibility(n)&&(r<e.min&&(e.min=r),r>e.max&&(e.max=r))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,n=t.options,r=Math.min(e.right-e.left,e.bottom-e.top),i=Math.max(r/2,0),o=(i-Math.max(n.cutoutPercentage?i/100*n.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=i-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,n,r){const i="reset"===r,o=this.chart,a=o.options.animation,s=this._cachedMeta.rScale,l=s.xCenter,c=s.yCenter,u=s.getIndexAngle(0)-.5*$l;let h,d=u;const f=360/this.countVisibleElements();for(h=0;h<e;++h)d+=this._computeAngle(h,r,f);for(h=e;h<e+n;h++){const e=t[h];let n=d,p=d+this._computeAngle(h,r,f),m=o.getDataVisibility(h)?s.getDistanceFromCenterForValue(this.getParsed(h).r):0;d=p,i&&(a.animateScale&&(m=0),a.animateRotate&&(n=p=u));const g={x:l,y:c,innerRadius:0,outerRadius:m,startAngle:n,endAngle:p,options:this.resolveDataElementOptions(h,e.active?"active":r)};this.updateElement(e,h,g,r)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&e++})),e}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?ic(this.resolveDataElementOptions(t,e).angle||n):0}},PieController:class extends cd{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},RadarController:class extends td{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}parseObjectData(t,e,n,r){return sh.bind(this)(t,e,n,r)}update(t){const e=this._cachedMeta,n=e.dataset,r=e.data||[],i=e.iScale.getLabels();if(n.points=r,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:i.length===r.length,options:e};this.updateElement(n,void 0,o,t)}this.updateElements(r,0,r.length,t)}updateElements(t,e,n,r){const i=this._cachedMeta.rScale,o="reset"===r;for(let a=e;a<e+n;a++){const e=t[a],n=this.resolveDataElementOptions(a,e.active?"active":r),s=i.getPointPositionForValue(a,this.getParsed(a).r),l=o?i.xCenter:s.x,c=o?i.yCenter:s.y,u={x:l,y:c,angle:s.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(e,a,u,r)}}},ScatterController:class extends td{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,n=this.chart.data.labels||[],{xScale:r,yScale:i}=e,o=this.getParsed(t),a=r.getLabelForValue(o.x),s=i.getLabelForValue(o.y);return{label:n[t]||"",value:"("+a+", "+s+")"}}update(t){const e=this._cachedMeta,{data:n=[]}=e,r=this.chart._animationsDisabled;let{start:i,count:o}=_c(e,n,r);if(this._drawStart=i,this._drawCount=o,kc(e)&&(i=0,o=n.length),this.options.showLine){const{dataset:i,_dataset:o}=e;i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!o._decimated,i.points=n;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(i,void 0,{animated:!r,options:a},t)}this.updateElements(n,i,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,n,r){const i="reset"===r,{iScale:o,vScale:a,_stacked:s,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,r),u=this.getSharedOptions(c),h=this.includeOptions(r,u),d=o.axis,f=a.axis,{spanGaps:p,segment:m}=this.options,g=nc(p)?p:Number.POSITIVE_INFINITY,y=this.chart._animationsDisabled||i||"none"===r;let v=e>0&&this.getParsed(e-1);for(let c=e;c<e+n;++c){const e=t[c],n=this.getParsed(c),p=y?e:{},b=wl(n[f]),x=p[d]=o.getPixelForValue(n[d],c),A=p[f]=i||b?a.getBasePixel():a.getPixelForValue(s?this.applyStack(a,n,s):n[f],c);p.skip=isNaN(x)||isNaN(A)||b,p.stop=c>0&&Math.abs(n[d]-v[d])>g,m&&(p.parsed=n,p.raw=l.data[c]),h&&(p.options=u||this.resolveDataElementOptions(c,e.active?"active":r)),y||this.updateElement(e,c,p,r),v=n}this.updateSharedOptions(u,r,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}const n=t.dataset,r=n.options&&n.options.borderWidth||0;if(!e.length)return r;const i=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(r,i,o)/2}}});function dd(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class fd{static override(t){Object.assign(fd.prototype,t)}constructor(t){this.options=t||{}}init(){}formats(){return dd()}parse(){return dd()}format(){return dd()}add(){return dd()}diff(){return dd()}startOf(){return dd()}endOf(){return dd()}}var pd=fd;function md(t,e,n,r){const{controller:i,data:o,_sorted:a}=t,s=i._cachedMeta.iScale;if(s&&e===s.axis&&"r"!==e&&a&&o.length){const t=s._reversePixels?gc:mc;if(!r)return t(o,e,n);if(i._sharedOptions){const r=o[0],i="function"==typeof r.getRange&&r.getRange(e);if(i){const r=t(o,e,n-i),a=t(o,e,n+i);return{lo:r.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function gd(t,e,n,r,i){const o=t.getSortedVisibleDatasetMetas(),a=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:s}=o[t],{lo:l,hi:c}=md(o[t],e,a,i);for(let t=l;t<=c;++t){const e=s[t];e.skip||r(e,n,t)}}}function yd(t,e,n,r,i){const o=[];return i||t.isPointInArea(e)?(gd(t,n,e,(function(n,a,s){(i||Pu(n,t.chartArea,0))&&n.inRange(e.x,e.y,r)&&o.push({element:n,datasetIndex:a,index:s})}),!0),o):o}function vd(t,e,n,r,i,o){return o||t.isPointInArea(e)?"r"!==n||r?function(t,e,n,r,i,o){let a=[];const s=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,r){const i=e?Math.abs(t.x-r.x):0,o=n?Math.abs(t.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}(n);let l=Number.POSITIVE_INFINITY;return gd(t,n,e,(function(n,c,u){const h=n.inRange(e.x,e.y,i);if(r&&!h)return;const d=n.getCenterPoint(i);if(!o&&!t.isPointInArea(d)&&!h)return;const f=s(e,d);f<l?(a=[{element:n,datasetIndex:c,index:u}],l=f):f===l&&a.push({element:n,datasetIndex:c,index:u})})),a}(t,e,n,r,i,o):function(t,e,n,r){let i=[];return gd(t,n,e,(function(t,n,o){const{startAngle:a,endAngle:s}=t.getProps(["startAngle","endAngle"],r),{angle:l}=sc(t,{x:e.x,y:e.y});hc(l,a,s)&&i.push({element:t,datasetIndex:n,index:o})})),i}(t,e,n,i):[]}function bd(t,e,n,r,i){const o=[],a="x"===n?"inXRange":"inYRange";let s=!1;return gd(t,n,e,((t,r,l)=>{t[a](e[n],i)&&(o.push({element:t,datasetIndex:r,index:l}),s=s||t.inRange(e.x,e.y,i))})),r&&!s?[]:o}var xd={evaluateInteractionItems:gd,modes:{index(t,e,n,r){const i=xh(e,t),o=n.axis||"x",a=n.includeInvisible||!1,s=n.intersect?yd(t,i,o,r,a):vd(t,i,o,!1,r,a),l=[];return s.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=s[0].index,n=t.data[e];n&&!n.skip&&l.push({element:n,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,n,r){const i=xh(e,t),o=n.axis||"xy",a=n.includeInvisible||!1;let s=n.intersect?yd(t,i,o,r,a):vd(t,i,o,!1,r,a);if(s.length>0){const e=s[0].datasetIndex,n=t.getDatasetMeta(e).data;s=[];for(let t=0;t<n.length;++t)s.push({element:n[t],datasetIndex:e,index:t})}return s},point:(t,e,n,r)=>yd(t,xh(e,t),n.axis||"xy",r,n.includeInvisible||!1),nearest(t,e,n,r){const i=xh(e,t),o=n.axis||"xy",a=n.includeInvisible||!1;return vd(t,i,o,n.intersect,r,a)},x:(t,e,n,r)=>bd(t,xh(e,t),"x",n.intersect,r),y:(t,e,n,r)=>bd(t,xh(e,t),"y",n.intersect,r)}};const Ad=["left","top","right","bottom"];function wd(t,e){return t.filter((t=>t.pos===e))}function Cd(t,e){return t.filter((t=>-1===Ad.indexOf(t.pos)&&t.box.axis===e))}function _d(t,e){return t.sort(((t,n)=>{const r=e?n:t,i=e?t:n;return r.weight===i.weight?r.index-i.index:r.weight-i.weight}))}function kd(t,e,n,r){return Math.max(t[n],e[n])+Math.max(t[r],e[r])}function Sd(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Ed(t,e,n,r){const{pos:i,box:o}=n,a=t.maxPadding;if(!_l(i)){n.size&&(t[i]-=n.size);const e=r[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[i]+=n.size}o.getPadding&&Sd(a,o.getPadding());const s=Math.max(0,e.outerWidth-kd(a,t,"left","right")),l=Math.max(0,e.outerHeight-kd(a,t,"top","bottom")),c=s!==t.w,u=l!==t.h;return t.w=s,t.h=l,n.horizontal?{same:c,other:u}:{same:u,other:c}}function Md(t,e){const n=e.maxPadding;return function(t){const r={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{r[t]=Math.max(e[t],n[t])})),r}(t?["left","right"]:["top","bottom"])}function Pd(t,e,n,r){const i=[];let o,a,s,l,c,u;for(o=0,a=t.length,c=0;o<a;++o){s=t[o],l=s.box,l.update(s.width||e.w,s.height||e.h,Md(s.horizontal,e));const{same:a,other:h}=Ed(e,n,s,r);c|=a&&i.length,u=u||h,l.fullSize||i.push(s)}return c&&Pd(i,e,n,r)||u}function Td(t,e,n,r,i){t.top=n,t.left=e,t.right=e+r,t.bottom=n+i,t.width=r,t.height=i}function Ld(t,e,n,r){const i=n.padding;let{x:o,y:a}=e;for(const s of t){const t=s.box,l=r[s.stack]||{count:1,placed:0,weight:1},c=s.stackWeight/l.weight||1;if(s.horizontal){const r=e.w*c,o=l.size||t.height;Vl(l.start)&&(a=l.start),t.fullSize?Td(t,i.left,a,n.outerWidth-i.right-i.left,o):Td(t,e.left+l.placed,a,r,o),l.start=a,l.placed+=r,a=t.bottom}else{const r=e.h*c,a=l.size||t.width;Vl(l.start)&&(o=l.start),t.fullSize?Td(t,o,i.top,a,n.outerHeight-i.bottom-i.top):Td(t,o,e.top+l.placed,a,r),l.start=o,l.placed+=r,o=t.right}}e.x=o,e.y=a}var Id={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,r){if(!t)return;const i=$u(t.options.layout.padding),o=Math.max(e-i.width,0),a=Math.max(n-i.height,0),s=function(t){const e=function(t){const e=[];let n,r,i,o,a,s;for(n=0,r=(t||[]).length;n<r;++n)i=t[n],({position:o,options:{stack:a,stackWeight:s=1}}=i),e.push({index:n,box:i,pos:o,horizontal:i.isHorizontal(),weight:i.weight,stack:a&&o+a,stackWeight:s});return e}(t),n=_d(e.filter((t=>t.box.fullSize)),!0),r=_d(wd(e,"left"),!0),i=_d(wd(e,"right")),o=_d(wd(e,"top"),!0),a=_d(wd(e,"bottom")),s=Cd(e,"x"),l=Cd(e,"y");return{fullSize:n,leftAndTop:r.concat(o),rightAndBottom:i.concat(l).concat(a).concat(s),chartArea:wd(e,"chartArea"),vertical:r.concat(i).concat(l),horizontal:o.concat(a).concat(s)}}(t.boxes),l=s.vertical,c=s.horizontal;Tl(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,h=Object.freeze({outerWidth:e,outerHeight:n,padding:i,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/u,hBoxMaxHeight:a/2}),d=Object.assign({},i);Sd(d,$u(r));const f=Object.assign({maxPadding:d,w:o,h:a,x:i.left,y:i.top},i),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:r,stackWeight:i}=n;if(!t||!Ad.includes(r))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=i}return e}(t),{vBoxMaxWidth:r,hBoxMaxHeight:i}=e;let o,a,s;for(o=0,a=t.length;o<a;++o){s=t[o];const{fullSize:a}=s.box,l=n[s.stack],c=l&&s.stackWeight/l.weight;s.horizontal?(s.width=c?c*r:a&&e.availableWidth,s.height=i):(s.width=r,s.height=c?c*i:a&&e.availableHeight)}return n}(l.concat(c),h);Pd(s.fullSize,f,h,p),Pd(l,f,h,p),Pd(c,f,h,p)&&Pd(l,f,h,p),function(t){const e=t.maxPadding;function n(n){const r=Math.max(e[n]-t[n],0);return t[n]+=r,r}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(f),Ld(s.leftAndTop,f,h,p),f.x+=f.w,f.y+=f.h,Ld(s.rightAndBottom,f,h,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},Tl(s.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Dd{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,r){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,r?Math.floor(e/r):n)}}isAttached(t){return!0}updateConfig(t){}}class Rd extends Dd{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Od={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Bd=t=>null===t||""===t,Nd=!!Ch&&{passive:!0};function zd(t,e,n){t.canvas.removeEventListener(e,n,Nd)}function Fd(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function jd(t,e,n){const r=t.canvas,i=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Fd(n.addedNodes,r),e=e&&!Fd(n.removedNodes,r);e&&n()}));return i.observe(document,{childList:!0,subtree:!0}),i}function Vd(t,e,n){const r=t.canvas,i=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Fd(n.removedNodes,r),e=e&&!Fd(n.addedNodes,r);e&&n()}));return i.observe(document,{childList:!0,subtree:!0}),i}const Ud=new Map;let Wd=0;function $d(){const t=window.devicePixelRatio;t!==Wd&&(Wd=t,Ud.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function Hd(t,e,n){const r=t.canvas,i=r&&mh(r);if(!i)return;const o=Ac(((t,e)=>{const r=i.clientWidth;n(t,e),r<i.clientWidth&&n()}),window),a=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,r=e.contentRect.height;0===n&&0===r||o(n,r)}));return a.observe(i),function(t,e){Ud.size||window.addEventListener("resize",$d),Ud.set(t,e)}(t,o),a}function Yd(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Ud.delete(t),Ud.size||window.removeEventListener("resize",$d)}(t)}function qd(t,e,n){const r=t.canvas,i=Ac((e=>{null!==t.ctx&&n(function(t,e){const n=Od[t.type]||t.type,{x:r,y:i}=xh(t,e);return{type:n,chart:e,native:t,x:void 0!==r?r:null,y:void 0!==i?i:null}}(e,t))}),t);return function(t,e,n){t.addEventListener(e,n,Nd)}(r,e,i),i}class Gd extends Dd{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,r=t.getAttribute("height"),i=t.getAttribute("width");if(t.$chartjs={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",Bd(i)){const e=_h(t,"width");void 0!==e&&(t.width=e)}if(Bd(r))if(""===t.style.height)t.height=t.width/(e||2);else{const e=_h(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const n=e.$chartjs.initial;["height","width"].forEach((t=>{const r=n[t];wl(r)?e.removeAttribute(t):e.setAttribute(t,r)}));const r=n.style||{};return Object.keys(r).forEach((t=>{e.style[t]=r[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,n){this.removeEventListener(t,e);const r=t.$proxies||(t.$proxies={}),i={attach:jd,detach:Vd,resize:Hd}[e]||qd;r[e]=i(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),r=n[e];r&&(({attach:Yd,detach:Yd,resize:Yd}[e]||zd)(t,e,r),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,r){return function(t,e,n,r){const i=yh(t),o=bh(i,"margin"),a=gh(i.maxWidth,t,"clientWidth")||ql,s=gh(i.maxHeight,t,"clientHeight")||ql,l=function(t,e,n){let r,i;if(void 0===e||void 0===n){const o=mh(t);if(o){const t=o.getBoundingClientRect(),a=yh(o),s=bh(a,"border","width"),l=bh(a,"padding");e=t.width-l.width-s.width,n=t.height-l.height-s.height,r=gh(a.maxWidth,o,"clientWidth"),i=gh(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:r||ql,maxHeight:i||ql}}(t,e,n);let{width:c,height:u}=l;if("content-box"===i.boxSizing){const t=bh(i,"border","width"),e=bh(i,"padding");c-=e.width+t.width,u-=e.height+t.height}return c=Math.max(0,c-o.width),u=Math.max(0,r?Math.floor(c/r):u-o.height),c=Ah(Math.min(c,a,l.maxWidth)),u=Ah(Math.min(u,s,l.maxHeight)),c&&!u&&(u=Ah(c/2)),(void 0!==e||void 0!==n)&&r&&l.height&&u>l.height&&(u=l.height,c=Ah(Math.floor(u*r))),{width:c,height:u}}(t,e,n,r)}isAttached(t){const e=mh(t);return!(!e||!e.isConnected)}}class Qd{static defaults={};static defaultRoutes=void 0;active=!1;tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return nc(this.x)&&nc(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const r={};return t.forEach((t=>{r[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),r}}function Jd(t,e,n,r,i){const o=El(r,0),a=Math.min(El(i,t.length),t.length);let s,l,c,u=0;for(n=Math.ceil(n),i&&(s=i-r,n=s/Math.floor(s/n)),c=o;c<0;)u++,c=Math.round(o+u*n);for(l=Math.max(o,0);l<a;l++)l===c&&(e.push(t[l]),u++,c=Math.round(o+u*n))}const Xd=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n;function Kd(t,e){const n=[],r=t.length/e,i=t.length;let o=0;for(;o<i;o+=r)n.push(t[Math.floor(o)]);return n}function Zd(t,e,n){const r=t.ticks.length,i=Math.min(e,r-1),o=t._startPixel,a=t._endPixel,s=1e-6;let l,c=t.getPixelForTick(i);if(!(n&&(l=1===r?Math.max(c-o,a-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(i-1))/2,c+=i<e?l:-l,c<o-s||c>a+s)))return c}function tf(t){return t.drawTicks?t.tickLength:0}function ef(t,e){if(!t.display)return 0;const n=Hu(t.font,e),r=$u(t.padding);return(Cl(t.text)?t.text.length:1)*n.lineHeight+r.height}function nf(t,e,n){let r=wc(t);return(n&&"right"!==e||!n&&"right"===e)&&(r=(t=>"left"===t?"right":"right"===t?"left":t)(r)),r}class rf extends Qd{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:r}=this;return t=Sl(t,Number.POSITIVE_INFINITY),e=Sl(e,Number.NEGATIVE_INFINITY),n=Sl(n,Number.POSITIVE_INFINITY),r=Sl(r,Number.NEGATIVE_INFINITY),{min:Sl(t,n),max:Sl(e,r),minDefined:kl(t),maxDefined:kl(e)}}getMinMax(t){let e,{min:n,max:r,minDefined:i,maxDefined:o}=this.getUserBounds();if(i&&o)return{min:n,max:r};const a=this.getMatchingVisibleMetas();for(let s=0,l=a.length;s<l;++s)e=a[s].controller.getMinMax(this,t),i||(n=Math.min(n,e.min)),o||(r=Math.max(r,e.max));return n=o&&n>r?r:n,r=i&&n>r?n:r,{min:Sl(n,Sl(r,n)),max:Sl(r,Sl(n,r))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){Pl(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:r,grace:i,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,n){const{min:r,max:i}=t,o=Ml(e,(i-r)/2),a=(t,e)=>n&&0===t?0:t+e;return{min:a(r,-Math.abs(o)),max:a(i,o)}}(this,i,r),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const s=a<this.ticks.length;this._convertTicksToLabels(s?Kd(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const n=t.options.ticks,r=function(t){const e=t.options.offset,n=t._tickSize(),r=t._length/n+(e?0:1),i=t._maxLength/n;return Math.floor(Math.min(r,i))}(t),i=Math.min(n.maxTicksLimit||r,r),o=n.major.enabled?function(t){const e=[];let n,r;for(n=0,r=t.length;n<r;n++)t[n].major&&e.push(n);return e}(e):[],a=o.length,s=o[0],l=o[a-1],c=[];if(a>i)return function(t,e,n,r){let i,o=0,a=n[0];for(r=Math.ceil(r),i=0;i<t.length;i++)i===a&&(e.push(t[i]),o++,a=n[o*r])}(e,c,o,a/i),c;const u=function(t,e,n){const r=function(t){const e=t.length;let n,r;if(e<2)return!1;for(r=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==r)return!1;return r}(t),i=e.length/n;if(!r)return Math.max(i,1);const o=function(t){const e=[],n=Math.sqrt(t);let r;for(r=1;r<n;r++)t%r==0&&(e.push(r),e.push(t/r));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(r);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>i)return e}return Math.max(i,1)}(o,e,i);if(a>0){let t,n;const r=a>1?Math.round((l-s)/(a-1)):null;for(Jd(e,c,u,wl(r)?0:s-r,s),t=0,n=a-1;t<n;t++)Jd(e,c,u,o[t],o[t+1]);return Jd(e,c,u,l,wl(r)?e.length:l+r),c}return Jd(e,c,u),c}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),s&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){Pl(this.options.afterUpdate,[this])}beforeSetDimensions(){Pl(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){Pl(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),Pl(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){Pl(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,r,i;for(n=0,r=t.length;n<r;n++)i=t[n],i.label=Pl(e.callback,[i.value,n,t],this)}afterTickToLabelConversion(){Pl(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){Pl(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=this.ticks.length,r=e.minRotation||0,i=e.maxRotation;let o,a,s,l=r;if(!this._isVisible()||!e.display||r>=i||n<=1||!this.isHorizontal())return void(this.labelRotation=r);const c=this._getLabelSizes(),u=c.widest.width,h=c.highest.height,d=dc(this.chart.width-u,0,this.maxWidth);o=t.offset?this.maxWidth/n:d/(n-1),u+6>o&&(o=d/(n-(t.offset?.5:1)),a=this.maxHeight-tf(t.grid)-e.padding-ef(t.title,this.chart.options.font),s=Math.sqrt(u*u+h*h),l=oc(Math.min(Math.asin(dc((c.highest.height+6)/o,-1,1)),Math.asin(dc(a/s,-1,1))-Math.asin(dc(h/s,-1,1)))),l=Math.max(r,Math.min(i,l))),this.labelRotation=l}afterCalculateLabelRotation(){Pl(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){Pl(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:r,grid:i}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=ef(r,e.options.font);if(a?(t.width=this.maxWidth,t.height=tf(i)+o):(t.height=this.maxHeight,t.width=tf(i)+o),n.display&&this.ticks.length){const{first:e,last:r,widest:i,highest:o}=this._getLabelSizes(),s=2*n.padding,l=ic(this.labelRotation),c=Math.cos(l),u=Math.sin(l);if(a){const e=n.mirror?0:u*i.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+s)}else{const e=n.mirror?0:c*i.width+u*o.height;t.width=Math.min(this.maxWidth,t.width+e+s)}this._calculatePadding(e,r,u,c)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,r){const{ticks:{align:i,padding:o},position:a}=this.options,s=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,h=0;s?l?(u=r*t.width,h=n*e.height):(u=n*t.height,h=r*e.width):"start"===i?h=e.width:"end"===i?u=t.width:"inner"!==i&&(u=t.width/2,h=e.width/2),this.paddingLeft=Math.max((u-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((h-c+o)*this.width/(this.width-c),0)}else{let n=e.height/2,r=t.height/2;"start"===i?(n=0,r=t.height):"end"===i&&(n=e.height,r=0),this.paddingTop=n+o,this.paddingBottom=r+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){Pl(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)wl(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=Kd(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length)}return t}_computeLabelSizes(t,e){const{ctx:n,_longestTextCache:r}=this,i=[],o=[];let a,s,l,c,u,h,d,f,p,m,g,y=0,v=0;for(a=0;a<e;++a){if(c=t[a].label,u=this._resolveTickFontOptions(a),n.font=h=u.string,d=r[h]=r[h]||{data:{},gc:[]},f=u.lineHeight,p=m=0,wl(c)||Cl(c)){if(Cl(c))for(s=0,l=c.length;s<l;++s)g=c[s],wl(g)||Cl(g)||(p=Cu(n,d.data,d.gc,p,g),m+=f)}else p=Cu(n,d.data,d.gc,p,c),m=f;i.push(p),o.push(m),y=Math.max(p,y),v=Math.max(m,v)}!function(t,e){Tl(t,(t=>{const n=t.gc,r=n.length/2;let i;if(r>e){for(i=0;i<r;++i)delete t.data[n[i]];n.splice(0,r)}}))}(r,e);const b=i.indexOf(y),x=o.indexOf(v),A=t=>({width:i[t]||0,height:o[t]||0});return{first:A(0),last:A(e-1),widest:A(b),highest:A(x),widths:i,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return dc(this._alignToPixels?ku(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return qu(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=function(t,e){return qu(t,{scale:e,type:"scale"})}(this.chart.getContext(),this))}_tickSize(){const t=this.options.ticks,e=ic(this.labelRotation),n=Math.abs(Math.cos(e)),r=Math.abs(Math.sin(e)),i=this._getLabelSizes(),o=t.autoSkipPadding||0,a=i?i.widest.width+o:0,s=i?i.highest.height+o:0;return this.isHorizontal()?s*n>a*r?a/n:s/r:s*r<a*n?s/n:a/r}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,r=this.options,{grid:i,position:o,border:a}=r,s=i.offset,l=this.isHorizontal(),c=this.ticks.length+(s?1:0),u=tf(i),h=[],d=a.setContext(this.getContext()),f=d.display?d.width:0,p=f/2,m=function(t){return ku(n,t,f)};let g,y,v,b,x,A,w,C,_,k,S,E;if("top"===o)g=m(this.bottom),A=this.bottom-u,C=g-p,k=m(t.top)+p,E=t.bottom;else if("bottom"===o)g=m(this.top),k=t.top,E=m(t.bottom)-p,A=g+p,C=this.top+u;else if("left"===o)g=m(this.right),x=this.right-u,w=g-p,_=m(t.left)+p,S=t.right;else if("right"===o)g=m(this.left),_=t.left,S=m(t.right)-p,x=g+p,w=this.left+u;else if("x"===e){if("center"===o)g=m((t.top+t.bottom)/2+.5);else if(_l(o)){const t=Object.keys(o)[0],e=o[t];g=m(this.chart.scales[t].getPixelForValue(e))}k=t.top,E=t.bottom,A=g+p,C=A+u}else if("y"===e){if("center"===o)g=m((t.left+t.right)/2);else if(_l(o)){const t=Object.keys(o)[0],e=o[t];g=m(this.chart.scales[t].getPixelForValue(e))}x=g-p,w=x-u,_=t.left,S=t.right}const M=El(r.ticks.maxTicksLimit,c),P=Math.max(1,Math.ceil(c/M));for(y=0;y<c;y+=P){const t=this.getContext(y),e=i.setContext(t),r=a.setContext(t),o=e.lineWidth,c=e.color,u=r.dash||[],d=r.dashOffset,f=e.tickWidth,p=e.tickColor,m=e.tickBorderDash||[],g=e.tickBorderDashOffset;v=Zd(this,y,s),void 0!==v&&(b=ku(n,v,o),l?x=w=_=S=b:A=C=k=E=b,h.push({tx1:x,ty1:A,tx2:w,ty2:C,x1:_,y1:k,x2:S,y2:E,width:o,color:c,borderDash:u,borderDashOffset:d,tickWidth:f,tickColor:p,tickBorderDash:m,tickBorderDashOffset:g}))}return this._ticksLength=c,this._borderValue=g,h}_computeLabelItems(t){const e=this.axis,n=this.options,{position:r,ticks:i}=n,o=this.isHorizontal(),a=this.ticks,{align:s,crossAlign:l,padding:c,mirror:u}=i,h=tf(n.grid),d=h+c,f=u?-c:d,p=-ic(this.labelRotation),m=[];let g,y,v,b,x,A,w,C,_,k,S,E,M="middle";if("top"===r)A=this.bottom-f,w=this._getXAxisLabelAlignment();else if("bottom"===r)A=this.top+f,w=this._getXAxisLabelAlignment();else if("left"===r){const t=this._getYAxisLabelAlignment(h);w=t.textAlign,x=t.x}else if("right"===r){const t=this._getYAxisLabelAlignment(h);w=t.textAlign,x=t.x}else if("x"===e){if("center"===r)A=(t.top+t.bottom)/2+d;else if(_l(r)){const t=Object.keys(r)[0],e=r[t];A=this.chart.scales[t].getPixelForValue(e)+d}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===r)x=(t.left+t.right)/2-d;else if(_l(r)){const t=Object.keys(r)[0],e=r[t];x=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(h).textAlign}"y"===e&&("start"===s?M="top":"end"===s&&(M="bottom"));const P=this._getLabelSizes();for(g=0,y=a.length;g<y;++g){v=a[g],b=v.label;const t=i.setContext(this.getContext(g));C=this.getPixelForTick(g)+i.labelOffset,_=this._resolveTickFontOptions(g),k=_.lineHeight,S=Cl(b)?b.length:1;const e=S/2,n=t.color,s=t.textStrokeColor,c=t.textStrokeWidth;let h,d=w;if(o?(x=C,"inner"===w&&(d=g===y-1?this.options.reverse?"left":"right":0===g?this.options.reverse?"right":"left":"center"),E="top"===r?"near"===l||0!==p?-S*k+k/2:"center"===l?-P.highest.height/2-e*k+k:-P.highest.height+k/2:"near"===l||0!==p?k/2:"center"===l?P.highest.height/2-e*k:P.highest.height-S*k,u&&(E*=-1),0===p||t.showLabelBackdrop||(x+=k/2*Math.sin(p))):(A=C,E=(1-S)*k/2),t.showLabelBackdrop){const e=$u(t.backdropPadding),n=P.heights[g],r=P.widths[g];let i=E-e.top,o=0-e.left;switch(M){case"middle":i-=n/2;break;case"bottom":i-=n}switch(w){case"center":o-=r/2;break;case"right":o-=r}h={left:o,top:i,width:r+e.width,height:n+e.height,color:t.backdropColor}}m.push({rotation:p,label:b,font:_,color:n,strokeColor:s,strokeWidth:c,textOffset:E,textAlign:d,textBaseline:M,translation:[x,A],backdrop:h})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-ic(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align?n="right":"inner"===e.align&&(n="inner"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:r,padding:i}}=this.options,o=t+i,a=this._getLabelSizes().widest.width;let s,l;return"left"===e?r?(l=this.right+i,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l+=a)):(l=this.right-o,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l=this.left)):"right"===e?r?(l=this.left+i,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l-=a)):(l=this.left+o,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l=this.right)):s="right",{textAlign:s,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:r,width:i,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,r,i,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,r=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let i,o;const a=(t,e,r)=>{r.width&&r.color&&(n.save(),n.lineWidth=r.width,n.strokeStyle=r.color,n.setLineDash(r.borderDash||[]),n.lineDashOffset=r.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(i=0,o=r.length;i<o;++i){const t=r[i];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:n,grid:r}}=this,i=n.setContext(this.getContext()),o=n.display?i.width:0;if(!o)return;const a=r.setContext(this.getContext(0)).lineWidth,s=this._borderValue;let l,c,u,h;this.isHorizontal()?(l=ku(t,this.left,o)-o/2,c=ku(t,this.right,a)+a/2,u=h=s):(u=ku(t,this.top,o)-o/2,h=ku(t,this.bottom,a)+a/2,l=c=s),e.save(),e.lineWidth=i.width,e.strokeStyle=i.color,e.beginPath(),e.moveTo(l,u),e.lineTo(c,h),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&Tu(e,n);const r=this._labelItems||(this._labelItems=this._computeLabelItems(t));let i,o;for(i=0,o=r.length;i<o;++i){const t=r[i],n=t.font;Ru(e,t.label,0,t.textOffset,n,t)}n&&Lu(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:r}}=this;if(!n.display)return;const i=Hu(n.font),o=$u(n.padding),a=n.align;let s=i.lineHeight/2;"bottom"===e||"center"===e||_l(e)?(s+=o.bottom,Cl(n.text)&&(s+=i.lineHeight*(n.text.length-1))):s+=o.top;const{titleX:l,titleY:c,maxWidth:u,rotation:h}=function(t,e,n,r){const{top:i,left:o,bottom:a,right:s,chart:l}=t,{chartArea:c,scales:u}=l;let h,d,f,p=0;const m=a-i,g=s-o;if(t.isHorizontal()){if(d=Cc(r,o,s),_l(n)){const t=Object.keys(n)[0],r=n[t];f=u[t].getPixelForValue(r)+m-e}else f="center"===n?(c.bottom+c.top)/2+m-e:Xd(t,n,e);h=s-o}else{if(_l(n)){const t=Object.keys(n)[0],r=n[t];d=u[t].getPixelForValue(r)-g+e}else d="center"===n?(c.left+c.right)/2-g+e:Xd(t,n,e);f=Cc(r,a,i),p="left"===n?-Ql:Ql}return{titleX:d,titleY:f,maxWidth:h,rotation:p}}(this,s,e,a);Ru(t,n.text,0,0,i,{color:n.color,maxWidth:u,rotation:h,textAlign:nf(a,e,r),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=El(t.grid&&t.grid.z,-1),r=El(t.border&&t.border.z,0);return this._isVisible()&&this.draw===rf.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:r,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",r=[];let i,o;for(i=0,o=e.length;i<o;++i){const o=e[i];o[n]!==this.id||t&&o.type!==t||r.push(o)}return r}_resolveTickFontOptions(t){return Hu(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class of{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const r=this.items,i=t.id,o=this.scope+"."+i;if(!i)throw new Error("class does not have id: "+t);return i in r||(r[i]=t,function(t,e,n){const r=Ol(Object.create(null),[n?wu.get(n):{},wu.get(e),t.defaults]);wu.set(e,r),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const r=n.split("."),i=r.pop(),o=[t].concat(r).join("."),a=e[n].split("."),s=a.pop(),l=a.join(".");wu.route(o,i,l,s)}))}(e,t.defaultRoutes),t.descriptors&&wu.describe(e,t.descriptors)}(t,o,n),this.override&&wu.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,r=this.scope;n in e&&delete e[n],r&&n in wu[r]&&(delete wu[r][n],this.override&&delete yu[n])}}class af{constructor(){this.controllers=new of(td,"datasets",!0),this.elements=new of(Qd,"elements"),this.plugins=new of(Object,"plugins"),this.scales=new of(rf,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const r=n||this._getRegistryForType(e);n||r.isForType(e)||r===this.plugins&&e.id?this._exec(t,r,e):Tl(e,(e=>{const r=n||this._getRegistryForType(e);this._exec(t,r,e)}))}))}_exec(t,e,n){const r=jl(t);Pl(n["before"+r],[],n),e[t](n),Pl(n["after"+r],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const r=e.get(t);if(void 0===r)throw new Error('"'+t+'" is not a registered '+n+".");return r}}var sf=new af;class lf{constructor(){this._init=[]}notify(t,e,n,r){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const i=r?this._descriptors(t).filter(r):this._descriptors(t),o=this._notify(i,t,e,n);return"afterDestroy"===e&&(this._notify(i,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,n,r){r=r||{};for(const i of t){const t=i.plugin;if(!1===Pl(t[n],[e,r,i.options],t)&&r.cancelable)return!1}return!0}invalidate(){wl(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,r=El(n.options&&n.options.plugins,{}),i=function(t){const e={},n=[],r=Object.keys(sf.plugins.items);for(let t=0;t<r.length;t++)n.push(sf.getPlugin(r[t]));const i=t.plugins||[];for(let t=0;t<i.length;t++){const r=i[t];-1===n.indexOf(r)&&(n.push(r),e[r.id]=!0)}return{plugins:n,localIds:e}}(n);return!1!==r||e?function(t,{plugins:e,localIds:n},r,i){const o=[],a=t.getContext();for(const s of e){const e=s.id,l=cf(r[e],i);null!==l&&o.push({plugin:s,options:uf(t.config,{plugin:s,local:n[e]},l,a)})}return o}(t,i,r,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,r=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(r(e,n),t,"stop"),this._notify(r(n,e),t,"start")}}function cf(t,e){return e||!1!==t?!0===t?{}:t:null}function uf(t,{plugin:e,local:n},r,i){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(r,o);return n&&e.defaults&&a.push(e.defaults),t.createResolver(a,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function hf(t,e){const n=wu.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function df(t,e){if("x"===t||"y"===t||"r"===t)return t;var n;if(t=e.axis||("top"===(n=e.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.length>1&&df(t[0].toLowerCase(),e))return t;throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`)}function ff(t){const e=t.options||(t.options={});e.plugins=El(e.plugins,{}),e.scales=function(t,e){const n=yu[t.type]||{scales:{}},r=e.scales||{},i=hf(t.type,e),o=Object.create(null);return Object.keys(r).forEach((t=>{const e=r[t];if(!_l(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const a=df(t,e),s=function(t,e){return t===e?"_index_":"_value_"}(a,i),l=n.scales||{};o[t]=Bl(Object.create(null),[{axis:a},e,l[a],l[s]])})),t.data.datasets.forEach((n=>{const i=n.type||t.type,a=n.indexAxis||hf(i,e),s=(yu[i]||{}).scales||{};Object.keys(s).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,a),i=n[e+"AxisID"]||e;o[i]=o[i]||Object.create(null),Bl(o[i],[{axis:e},r[i],s[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];Bl(e,[wu.scales[e.type],wu.scale])})),o}(t,e)}function pf(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const mf=new Map,gf=new Set;function yf(t,e){let n=mf.get(t);return n||(n=e(),mf.set(t,n),gf.add(n)),n}const vf=(t,e,n)=>{const r=Fl(e,n);void 0!==r&&t.add(r)};class bf{constructor(t){this._config=function(t){return(t=t||{}).data=pf(t.data),ff(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=pf(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),ff(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return yf(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return yf(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return yf(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return yf(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let r=n.get(t);return r&&!e||(r=new Map,n.set(t,r)),r}getOptionScopes(t,e,n){const{options:r,type:i}=this,o=this._cachedScopes(t,n),a=o.get(e);if(a)return a;const s=new Set;e.forEach((e=>{t&&(s.add(t),e.forEach((e=>vf(s,t,e)))),e.forEach((t=>vf(s,r,t))),e.forEach((t=>vf(s,yu[i]||{},t))),e.forEach((t=>vf(s,wu,t))),e.forEach((t=>vf(s,vu,t)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),gf.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,yu[e]||{},wu.datasets[e]||{},{type:e},wu,vu]}resolveNamedOptions(t,e,n,r=[""]){const i={$shared:!0},{resolver:o,subPrefixes:a}=xf(this._resolverCache,t,r);let s=o;(function(t,e){const{isScriptable:n,isIndexable:r}=Ju(t);for(const i of e){const e=n(i),o=r(i),a=(o||e)&&t[i];if(e&&(Ul(a)||Af(a))||o&&Cl(a))return!0}return!1})(o,e)&&(i.$shared=!1,s=Qu(o,n=Ul(n)?n():n,this.createResolver(t,n,a)));for(const t of e)i[t]=s[t];return i}createResolver(t,e,n=[""],r){const{resolver:i}=xf(this._resolverCache,t,n);return _l(e)?Qu(i,e,void 0,r):i}}function xf(t,e,n){let r=t.get(e);r||(r=new Map,t.set(e,r));const i=n.join();let o=r.get(i);return o||(o={resolver:Gu(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},r.set(i,o)),o}const Af=t=>_l(t)&&Object.getOwnPropertyNames(t).reduce(((e,n)=>e||Ul(t[n])),!1),wf=["top","bottom","left","right","chartArea"];function Cf(t,e){return"top"===t||"bottom"===t||-1===wf.indexOf(t)&&"x"===e}function _f(t,e){return function(n,r){return n[t]===r[t]?n[e]-r[e]:n[t]-r[t]}}function kf(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),Pl(n&&n.onComplete,[t],e)}function Sf(t){const e=t.chart,n=e.options.animation;Pl(n&&n.onProgress,[t],e)}function Ef(t){return ph()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Mf={},Pf=t=>{const e=Ef(t);return Object.values(Mf).filter((t=>t.canvas===e)).pop()};function Tf(t,e,n){const r=Object.keys(t);for(const i of r){const r=+i;if(r>=e){const o=t[i];delete t[i],(n>0||r>e)&&(t[r+n]=o)}}}class Lf{static defaults=wu;static instances=Mf;static overrides=yu;static registry=sf;static version="4.0.1";static getChart=Pf;static register(...t){sf.add(...t),If()}static unregister(...t){sf.remove(...t),If()}constructor(t,e){const n=this.config=new bf(e),r=Ef(t),i=Pf(r);if(i)throw new Error("Canvas is already in use. Chart with ID '"+i.id+"' must be destroyed before the canvas with ID '"+i.canvas.id+"' can be reused.");const o=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||function(t){return!ph()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Rd:Gd}(r)),this.platform.updateConfig(n);const a=this.platform.acquireContext(r,o.aspectRatio),s=a&&a.canvas,l=s&&s.height,c=s&&s.width;this.id=Al(),this.ctx=a,this.canvas=s,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new lf,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(...r){return e?(clearTimeout(n),n=setTimeout(t,e,r)):t.apply(this,r),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Mf[this.id]=this,a&&s?(zh.listen(this,"complete",kf),zh.listen(this,"progress",Sf),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:r,_aspectRatio:i}=this;return wl(t)?e&&i?i:r?n/r:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return sf}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():wh(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Su(this.canvas,this.ctx),this}stop(){return zh.stop(this),this}resize(t,e){zh.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,r=this.canvas,i=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(r,t,e,i),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),s=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,wh(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),Pl(n.onResize,[this,o],this),this.attached&&this._doResize(s)&&this.render())}ensureScalesHaveIDs(){Tl(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,r=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let i=[];e&&(i=i.concat(Object.keys(e).map((t=>{const n=e[t],r=df(t,n),i="r"===r,o="x"===r;return{options:n,dposition:i?"chartArea":o?"bottom":"left",dtype:i?"radialLinear":o?"category":"linear"}})))),Tl(i,(e=>{const i=e.options,o=i.id,a=df(o,i),s=El(i.type,e.dtype);void 0!==i.position&&Cf(i.position,a)===Cf(e.dposition)||(i.position=e.dposition),r[o]=!0;let l=null;o in n&&n[o].type===s?l=n[o]:(l=new(sf.getScale(s))({id:o,type:s,ctx:this.ctx,chart:this}),n[l.id]=l),l.init(i,t)})),Tl(r,((t,e)=>{t||delete n[e]})),Tl(n,(t=>{Id.configure(this,t,t.options),Id.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(_f("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,r;for(this._removeUnreferencedMetasets(),n=0,r=e.length;n<r;n++){const r=e[n];let i=this.getDatasetMeta(n);const o=r.type||this.config.type;if(i.type&&i.type!==o&&(this._destroyDatasetMeta(n),i=this.getDatasetMeta(n)),i.type=o,i.indexAxis=r.indexAxis||hf(o,this.options),i.order=r.order||0,i.index=n,i.label=""+r.label,i.visible=this.isDatasetVisible(n),i.controller)i.controller.updateIndex(n),i.controller.linkScales();else{const e=sf.getController(o),{datasetElementType:r,dataElementType:a}=wu.datasets[o];Object.assign(e,{dataElementType:sf.getElement(a),datasetElementType:r&&sf.getElement(r)}),i.controller=new e(this,n),t.push(i.controller)}}return this._updateMetasets(),t}_resetElements(){Tl(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),r=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const i=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!r&&-1===i.indexOf(e);e.buildOrUpdateElements(n),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),r||Tl(i,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(_f("z","_idx"));const{_active:a,_lastEvent:s}=this;s?this._eventHandler(s,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){Tl(this.scales,(t=>{Id.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);Wl(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:r,count:i}of e)Tf(t,r,"_removeElements"===n?-i:i)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),r=n(0);for(let t=1;t<e;t++)if(!Wl(r,n(t)))return;return Array.from(r).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Id.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],Tl(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,Ul(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),r={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",r)&&(n.controller._update(e),r.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",r))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(zh.has(this)?this.attached&&!zh.running(this)&&zh.start(this):(this.draw(),kf({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let r,i;for(r=0,i=e.length;r<i;++r){const i=e[r];t&&!i.visible||n.push(i)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n=t._clip,r=!n.disabled,i=function(t){const{xScale:e,yScale:n}=t;if(e&&n)return{left:e.left,right:e.right,top:n.top,bottom:n.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(r&&Tu(e,{left:!1===n.left?0:i.left-n.left,right:!1===n.right?this.width:i.right+n.right,top:!1===n.top?0:i.top-n.top,bottom:!1===n.bottom?this.height:i.bottom+n.bottom}),t.controller.draw(),r&&Lu(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return Pu(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,n,r){const i=xd.modes[e];return"function"==typeof i?i(this,t,n,r):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let r=n.filter((t=>t&&t._dataset===e)).pop();return r||(r={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(r)),r}getContext(){return this.$context||(this.$context=qu(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const r=n?"show":"hide",i=this.getDatasetMeta(t),o=i.controller._resolveAnimations(void 0,r);Vl(e)?(i.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),o.update(i,{visible:n}),this.update((e=>e.datasetIndex===t?r:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),zh.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Su(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Mf[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,r)=>{e.addEventListener(this,n,r),t[n]=r},r=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};Tl(this.options.events,(t=>n(t,r)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,r)=>{e.addEventListener(this,n,r),t[n]=r},r=(n,r)=>{t[n]&&(e.removeEventListener(this,n,r),delete t[n])},i=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{r("attach",a),this.attached=!0,this.resize(),n("resize",i),n("detach",o)};o=()=>{this.attached=!1,r("resize",i),this._stop(),this._resize(0,0),n("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){Tl(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},Tl(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const r=n?"set":"remove";let i,o,a,s;for("dataset"===e&&(i=this.getDatasetMeta(t[0].datasetIndex),i.controller["_"+r+"DatasetHoverStyle"]()),a=0,s=t.length;a<s;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[r+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!Ll(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,n){const r=this.options.hover,i=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=i(e,t),a=n?t:i(t,e);o.length&&this.updateHoverStyle(o,r.mode,!1),a.length&&r.mode&&this.updateHoverStyle(a,r.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},r=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,r))return;const i=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,r),(i||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:r=[],options:i}=this,o=e,a=this._getActiveElements(t,r,n,o),s=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,n,r){return n&&"mouseout"!==t.type?r?e:t:null}(t,this._lastEvent,n,s);n&&(this._lastEvent=null,Pl(i.onHover,[t,a,this],this),s&&Pl(i.onClick,[t,a,this],this));const c=!Ll(a,r);return(c||e)&&(this._active=a,this._updateHoverStyles(a,r,e)),this._lastEvent=l,c}_getActiveElements(t,e,n,r){if("mouseout"===t.type)return[];if(!n)return e;const i=this.options.hover;return this.getElementsAtEventForMode(t,i.mode,i,r)}}function If(){return Tl(Lf.instances,(t=>t._plugins.invalidate()))}var Df=Lf;function Rf(t,e,n,r){return{x:n+t*Math.cos(e),y:r+t*Math.sin(e)}}function Of(t,e,n,r,i,o){const{x:a,y:s,startAngle:l,pixelMargin:c,innerRadius:u}=e,h=Math.max(e.outerRadius+r+n-c,0),d=u>0?u+r+n+c:0;let f=0;const p=i-l;if(r){const t=((u>0?u-r:0)+(h>0?h-r:0))/2;f=(p-(0!==t?p*t/(t+r):p))/2}const m=(p-Math.max(.001,p*h-n/$l)/h)/2,g=l+m+f,y=i-m-f,{outerStart:v,outerEnd:b,innerStart:x,innerEnd:A}=function(t,e,n,r){const i=Vu(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-e)/2,a=Math.min(o,r*e/2),s=t=>{const e=(n-Math.min(o,t))*r/2;return dc(t,0,Math.min(o,e))};return{outerStart:s(i.outerStart),outerEnd:s(i.outerEnd),innerStart:dc(i.innerStart,0,a),innerEnd:dc(i.innerEnd,0,a)}}(e,d,h,y-g),w=h-v,C=h-b,_=g+v/w,k=y-b/C,S=d+x,E=d+A,M=g+x/S,P=y-A/E;if(t.beginPath(),o){const e=(_+k)/2;if(t.arc(a,s,h,_,e),t.arc(a,s,h,e,k),b>0){const e=Rf(C,k,a,s);t.arc(e.x,e.y,b,k,y+Ql)}const n=Rf(E,y,a,s);if(t.lineTo(n.x,n.y),A>0){const e=Rf(E,P,a,s);t.arc(e.x,e.y,A,y+Ql,P+Math.PI)}const r=(y-A/d+(g+x/d))/2;if(t.arc(a,s,d,y-A/d,r,!0),t.arc(a,s,d,r,g+x/d,!0),x>0){const e=Rf(S,M,a,s);t.arc(e.x,e.y,x,M+Math.PI,g-Ql)}const i=Rf(w,g,a,s);if(t.lineTo(i.x,i.y),v>0){const e=Rf(w,_,a,s);t.arc(e.x,e.y,v,g-Ql,_)}}else{t.moveTo(a,s);const e=Math.cos(_)*h+a,n=Math.sin(_)*h+s;t.lineTo(e,n);const r=Math.cos(k)*h+a,i=Math.sin(k)*h+s;t.lineTo(r,i)}t.closePath()}function Bf(t,e,n=e){t.lineCap=El(n.borderCapStyle,e.borderCapStyle),t.setLineDash(El(n.borderDash,e.borderDash)),t.lineDashOffset=El(n.borderDashOffset,e.borderDashOffset),t.lineJoin=El(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=El(n.borderWidth,e.borderWidth),t.strokeStyle=El(n.borderColor,e.borderColor)}function Nf(t,e,n){t.lineTo(n.x,n.y)}function zf(t,e,n={}){const r=t.length,{start:i=0,end:o=r-1}=n,{start:a,end:s}=e,l=Math.max(i,a),c=Math.min(o,s),u=i<a&&o<a||i>s&&o>s;return{count:r,start:l,loop:e.loop,ilen:c<l&&!u?r+c-l:c-l}}function Ff(t,e,n,r){const{points:i,options:o}=e,{count:a,start:s,loop:l,ilen:c}=zf(i,n,r),u=function(t){return t.stepped?Iu:t.tension||"monotone"===t.cubicInterpolationMode?Du:Nf}(o);let h,d,f,{move:p=!0,reverse:m}=r||{};for(h=0;h<=c;++h)d=i[(s+(m?c-h:h))%a],d.skip||(p?(t.moveTo(d.x,d.y),p=!1):u(t,f,d,m,o.stepped),f=d);return l&&(d=i[(s+(m?c:0))%a],u(t,f,d,m,o.stepped)),!!l}function jf(t,e,n,r){const i=e.points,{count:o,start:a,ilen:s}=zf(i,n,r),{move:l=!0,reverse:c}=r||{};let u,h,d,f,p,m,g=0,y=0;const v=t=>(a+(c?s-t:t))%o,b=()=>{f!==p&&(t.lineTo(g,p),t.lineTo(g,f),t.lineTo(g,m))};for(l&&(h=i[v(0)],t.moveTo(h.x,h.y)),u=0;u<=s;++u){if(h=i[v(u)],h.skip)continue;const e=h.x,n=h.y,r=0|e;r===d?(n<f?f=n:n>p&&(p=n),g=(y*g+e)/++y):(b(),t.lineTo(e,n),d=r,y=0,f=p=n),m=n}b()}function Vf(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?Ff:jf}const Uf="function"==typeof Path2D;class Wf extends Qd{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const r=n.spanGaps?this._loop:this._fullLoop;fh(this._points,n,t,r,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,r=t.options.spanGaps,i=n.length;if(!i)return[];const o=!!t._loop,{start:a,end:s}=function(t,e,n,r){let i=0,o=e-1;if(n&&!r)for(;i<e&&!t[i].skip;)i++;for(;i<e&&t[i].skip;)i++;for(i%=e,n&&(o+=i);o>i&&t[o%e].skip;)o--;return o%=e,{start:i,end:o}}(n,i,o,r);return function(t,e,n,r){return r&&r.setContext&&n?function(t,e,n,r){const i=t._chart.getContext(),o=Oh(t.options),{_datasetIndex:a,options:{spanGaps:s}}=t,l=n.length,c=[];let u=o,h=e[0].start,d=h;function f(t,e,r,i){const o=s?-1:1;if(t!==e){for(t+=l;n[t%l].skip;)t-=o;for(;n[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:r,style:i}),u=i,h=e%l)}}for(const t of e){h=s?h:t.start;let e,o=n[h%l];for(d=h+1;d<=t.end;d++){const s=n[d%l];e=Oh(r.setContext(qu(i,{type:"segment",p0:o,p1:s,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:a}))),Bh(e,u)&&f(h,d-1,t.loop,u),o=s,u=e}h<d-1&&f(h,d-1,t.loop,u)}return c}(t,e,n,r):e}(t,!0===r?[{start:a,end:s,loop:o}]:function(t,e,n,r){const i=t.length,o=[];let a,s=e,l=t[e];for(a=e+1;a<=n;++a){const n=t[a%i];n.skip||n.stop?l.skip||(r=!1,o.push({start:e%i,end:(a-1)%i,loop:r}),e=s=n.stop?a:null):(s=a,l.skip&&(e=a)),l=n}return null!==s&&o.push({start:e%i,end:s%i,loop:r}),o}(n,a,s<a?s+i:s,!!t._fullLoop&&0===a&&s===i-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this.options,r=t[e],i=this.points,o=Rh(this,{property:e,start:r,end:r});if(!o.length)return;const a=[],s=function(t){return t.stepped?Sh:t.tension||"monotone"===t.cubicInterpolationMode?Eh:kh}(n);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:u}=o[l],h=i[c],d=i[u];if(h===d){a.push(h);continue}const f=s(h,d,Math.abs((r-h[e])/(d[e]-h[e])),n.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,n){return Vf(this)(t,this,e,n)}path(t,e,n){const r=this.segments,i=Vf(this);let o=this._loop;e=e||0,n=n||this.points.length-e;for(const a of r)o&=i(t,this,a,{start:e,end:e+n-1});return!!o}draw(t,e,n,r){const i=this.options||{};(this.points||[]).length&&i.borderWidth&&(t.save(),function(t,e,n,r){Uf&&!e.options.segment?function(t,e,n,r){let i=e._path;i||(i=e._path=new Path2D,e.path(i,n,r)&&i.closePath()),Bf(t,e.options),t.stroke(i)}(t,e,n,r):function(t,e,n,r){const{segments:i,options:o}=e,a=Vf(e);for(const s of i)Bf(t,o,s.style),t.beginPath(),a(t,e,s,{start:n,end:n+r-1})&&t.closePath(),t.stroke()}(t,e,n,r)}(t,this,n,r),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function $f(t,e,n,r){const i=t.options,{[n]:o}=t.getProps([n],r);return Math.abs(e-o)<i.radius+i.hitRadius}class Hf extends Qd{static id="point";static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const r=this.options,{x:i,y:o}=this.getProps(["x","y"],n);return Math.pow(t-i,2)+Math.pow(e-o,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(t,e){return $f(this,t,"x",e)}inYRange(t,e){return $f(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this.options;this.skip||n.radius<.1||!Pu(this,e,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,Eu(t,n,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Yf(t,e){const{x:n,y:r,base:i,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let s,l,c,u,h;return t.horizontal?(h=a/2,s=Math.min(n,i),l=Math.max(n,i),c=r-h,u=r+h):(h=o/2,s=n-h,l=n+h,c=Math.min(r,i),u=Math.max(r,i)),{left:s,top:c,right:l,bottom:u}}function qf(t,e,n,r){return t?0:dc(e,n,r)}function Gf(t,e,n,r){const i=null===e,o=null===n,a=t&&!(i&&o)&&Yf(t,r);return a&&(i||fc(e,a.left,a.right))&&(o||fc(n,a.top,a.bottom))}function Qf(t,e){t.rect(e.x,e.y,e.w,e.h)}function Jf(t,e,n={}){const r=t.x!==n.x?-e:0,i=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-r,a=(t.y+t.h!==n.y+n.h?e:0)-i;return{x:t.x+r,y:t.y+i,w:t.w+o,h:t.h+a,radius:t.radius}}var Xf=Object.freeze({__proto__:null,ArcElement:class extends Qd{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const r=this.getProps(["x","y"],n),{angle:i,distance:o}=sc(r,{x:t,y:e}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=this.options.spacing/2,d=El(u,s-a)>=Hl||hc(i,a,s),f=fc(o,l+h,c+h);return d&&f}getCenterPoint(t){const{x:e,y:n,startAngle:r,endAngle:i,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:s,spacing:l}=this.options,c=(r+i)/2,u=(o+a+l+s)/2;return{x:e+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:n}=this,r=(e.offset||0)/4,i=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=n>Hl?Math.floor(n/Hl):0,0===n||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*r,Math.sin(a)*r);const s=r*(1-Math.sin(Math.min($l,n||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,n,r,i){const{fullCircles:o,startAngle:a,circumference:s}=e;let l=e.endAngle;if(o){Of(t,e,n,r,l,i);for(let e=0;e<o;++e)t.fill();isNaN(s)||(l=a+(s%Hl||Hl))}Of(t,e,n,r,l,i),t.fill()}(t,this,s,i,o),function(t,e,n,r,i){const{fullCircles:o,startAngle:a,circumference:s,options:l}=e,{borderWidth:c,borderJoinStyle:u}=l,h="inner"===l.borderAlign;if(!c)return;h?(t.lineWidth=2*c,t.lineJoin=u||"round"):(t.lineWidth=c,t.lineJoin=u||"bevel");let d=e.endAngle;if(o){Of(t,e,n,r,d,i);for(let e=0;e<o;++e)t.stroke();isNaN(s)||(d=a+(s%Hl||Hl))}h&&function(t,e,n){const{startAngle:r,pixelMargin:i,x:o,y:a,outerRadius:s,innerRadius:l}=e;let c=i/s;t.beginPath(),t.arc(o,a,s,r-c,n+c),l>i?(c=i/l,t.arc(o,a,l,n+c,r-c,!0)):t.arc(o,a,i,n+Ql,r-Ql),t.closePath(),t.clip()}(t,e,d),o||(Of(t,e,n,r,d,i),t.stroke())}(t,this,s,i,o),t.restore()}},LineElement:Wf,PointElement:Hf,BarElement:class extends Qd{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:r}}=this,{inner:i,outer:o}=function(t){const e=Yf(t),n=e.right-e.left,r=e.bottom-e.top,i=function(t,e,n){const r=t.options.borderWidth,i=t.borderSkipped,o=Uu(r);return{t:qf(i.top,o.top,0,n),r:qf(i.right,o.right,0,e),b:qf(i.bottom,o.bottom,0,n),l:qf(i.left,o.left,0,e)}}(t,n/2,r/2),o=function(t,e,n){const{enableBorderRadius:r}=t.getProps(["enableBorderRadius"]),i=t.options.borderRadius,o=Wu(i),a=Math.min(e,n),s=t.borderSkipped,l=r||_l(i);return{topLeft:qf(!l||s.top||s.left,o.topLeft,0,a),topRight:qf(!l||s.top||s.right,o.topRight,0,a),bottomLeft:qf(!l||s.bottom||s.left,o.bottomLeft,0,a),bottomRight:qf(!l||s.bottom||s.right,o.bottomRight,0,a)}}(t,n/2,r/2);return{outer:{x:e.left,y:e.top,w:n,h:r,radius:o},inner:{x:e.left+i.l,y:e.top+i.t,w:n-i.l-i.r,h:r-i.t-i.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(i.t,i.l)),topRight:Math.max(0,o.topRight-Math.max(i.t,i.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(i.b,i.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(i.b,i.r))}}}}(this),a=(s=o.radius).topLeft||s.topRight||s.bottomLeft||s.bottomRight?Nu:Qf;var s;t.save(),o.w===i.w&&o.h===i.h||(t.beginPath(),a(t,Jf(o,e,i)),t.clip(),a(t,Jf(i,-e,o)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),a(t,Jf(i,e)),t.fillStyle=r,t.fill(),t.restore()}inRange(t,e,n){return Gf(this,t,e,n)}inXRange(t,e){return Gf(this,t,null,e)}inYRange(t,e){return Gf(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:r,horizontal:i}=this.getProps(["x","y","base","horizontal"],t);return{x:i?(e+r)/2:e,y:i?n:(n+r)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}});const Kf=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Zf=Kf.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function tp(t){return Kf[t%Kf.length]}function ep(t){return Zf[t%Zf.length]}function np(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var rp={id:"colors",defaults:{enabled:!0},beforeLayout(t,e,n){if(!n.enabled)return;const{type:r,options:{elements:i},data:{datasets:o}}=t.config;if(np(o)||i&&np(i))return;const a=function(t){return"doughnut"===t||"pie"===t?function(){let t=0;return e=>{e.backgroundColor=e.data.map((()=>tp(t++)))}}():"polarArea"===t?function(){let t=0;return e=>{e.backgroundColor=e.data.map((()=>ep(t++)))}}():(t,e)=>{t.borderColor=tp(e),t.backgroundColor=ep(e)}}(r);o.forEach(a)}};function ip(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function op(t){t.data.datasets.forEach((t=>{ip(t)}))}var ap={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,n)=>{if(!n.enabled)return void op(t);const r=t.width;t.data.datasets.forEach(((e,i)=>{const{_data:o,indexAxis:a}=e,s=t.getDatasetMeta(i),l=o||e.data;if("y"===Yu([a,t.options.indexAxis]))return;if(!s.controller.supportsDecimation)return;const c=t.scales[s.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let u,{start:h,count:d}=function(t,e){const n=e.length;let r,i=0;const{iScale:o}=t,{min:a,max:s,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(i=dc(mc(e,o.axis,a).lo,0,n-1)),r=c?dc(mc(e,o.axis,s).hi+1,i,n)-i:n-i,{start:i,count:r}}(s,l);if(d<=(n.threshold||4*r))ip(e);else{switch(wl(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),n.algorithm){case"lttb":u=function(t,e,n,r,i){const o=i.samples||r;if(o>=n)return t.slice(e,e+n);const a=[],s=(n-2)/(o-2);let l=0;const c=e+n-1;let u,h,d,f,p,m=e;for(a[l++]=t[m],u=0;u<o-2;u++){let r,i=0,o=0;const c=Math.floor((u+1)*s)+1+e,g=Math.min(Math.floor((u+2)*s)+1,n)+e,y=g-c;for(r=c;r<g;r++)i+=t[r].x,o+=t[r].y;i/=y,o/=y;const v=Math.floor(u*s)+1+e,b=Math.min(Math.floor((u+1)*s)+1,n)+e,{x,y:A}=t[m];for(d=f=-1,r=v;r<b;r++)f=.5*Math.abs((x-i)*(t[r].y-A)-(x-t[r].x)*(o-A)),f>d&&(d=f,h=t[r],p=r);a[l++]=h,m=p}return a[l++]=t[c],a}(l,h,d,r,n);break;case"min-max":u=function(t,e,n,r){let i,o,a,s,l,c,u,h,d,f,p=0,m=0;const g=[],y=e+n-1,v=t[e].x,b=t[y].x-v;for(i=e;i<e+n;++i){o=t[i],a=(o.x-v)/b*r,s=o.y;const e=0|a;if(e===l)s<d?(d=s,c=i):s>f&&(f=s,u=i),p=(m*p+o.x)/++m;else{const n=i-1;if(!wl(c)&&!wl(u)){const e=Math.min(c,u),r=Math.max(c,u);e!==h&&e!==n&&g.push({...t[e],x:p}),r!==h&&r!==n&&g.push({...t[r],x:p})}i>0&&n!==h&&g.push(t[n]),g.push(o),l=e,m=0,d=f=s,c=u=h=i}}return g}(l,h,d,r);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}e._decimated=u}}))},destroy(t){op(t)}};function sp(t,e,n,r){if(r)return;let i=e[t],o=n[t];return"angle"===t&&(i=uc(i),o=uc(o)),{property:t,start:i,end:o}}function lp(t,e,n){for(;e>t;e--){const t=n[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function cp(t,e,n,r){return t&&e?r(t[n],e[n]):t?t[n]:e?e[n]:0}function up(t,e){let n=[],r=!1;return Cl(t)?(r=!0,n=t):n=function(t,e){const{x:n=null,y:r=null}=t||{},i=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=lp(t,e,i);const a=i[t],s=i[e];null!==r?(o.push({x:a.x,y:r}),o.push({x:s.x,y:r})):null!==n&&(o.push({x:n,y:a.y}),o.push({x:n,y:s.y}))})),o}(t,e),n.length?new Wf({points:n,options:{tension:0},_loop:r,_fullLoop:r}):null}function hp(t){return t&&!1!==t.fill}function dp(t,e,n){let r=t[e].fill;const i=[e];let o;if(!n)return r;for(;!1!==r&&-1===i.indexOf(r);){if(!kl(r))return r;if(o=t[r],!o)return!1;if(o.visible)return r;i.push(r),r=o.fill}return!1}function fp(t,e,n){const r=function(t){const e=t.options,n=e.fill;let r=El(n&&n.target,n);return void 0===r&&(r=!!e.backgroundColor),!1!==r&&null!==r&&(!0===r?"origin":r)}(t);if(_l(r))return!isNaN(r.value)&&r;let i=parseFloat(r);return kl(i)&&Math.floor(i)===i?function(t,e,n,r){return"-"!==t&&"+"!==t||(n=e+n),!(n===e||n<0||n>=r)&&n}(r[0],e,i,n):["origin","start","end","stack","shape"].indexOf(r)>=0&&r}function pp(t,e,n){const r=[];for(let i=0;i<n.length;i++){const o=n[i],{first:a,last:s,point:l}=mp(o,e,"x");if(!(!l||a&&s))if(a)r.unshift(l);else if(t.push(l),!s)break}t.push(...r)}function mp(t,e,n){const r=t.interpolate(e,n);if(!r)return{};const i=r[n],o=t.segments,a=t.points;let s=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],r=a[e.start][n],c=a[e.end][n];if(fc(i,r,c)){s=i===r,l=i===c;break}}return{first:s,last:l,point:r}}class gp{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,n){const{x:r,y:i,radius:o}=this;return e=e||{start:0,end:Hl},t.arc(r,i,o,e.end,e.start,!0),!n.bounds}interpolate(t){const{x:e,y:n,radius:r}=this,i=t.angle;return{x:e+Math.cos(i)*r,y:n+Math.sin(i)*r,angle:i}}}function yp(t,e,n){const r=function(t){const{chart:e,fill:n,line:r}=t;if(kl(n))return function(t,e){const n=t.getDatasetMeta(e);return n&&t.isDatasetVisible(e)?n.dataset:null}(e,n);if("stack"===n)return function(t){const{scale:e,index:n,line:r}=t,i=[],o=r.segments,a=r.points,s=function(t,e){const n=[],r=t.getMatchingVisibleMetas("line");for(let t=0;t<r.length;t++){const i=r[t];if(i.index===e)break;i.hidden||n.unshift(i.dataset)}return n}(e,n);s.push(up({x:null,y:e.bottom},r));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)pp(i,a[t],s)}return new Wf({points:i,options:{}})}(t);if("shape"===n)return!0;const i=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:n}=t,r=e.options,i=e.getLabels().length,o=r.reverse?e.max:e.min,a=function(t,e,n){let r;return r="start"===t?n:"end"===t?e.options.reverse?e.min:e.max:_l(t)?t.value:e.getBaseValue(),r}(n,e,o),s=[];if(r.grid.circular){const t=e.getPointPositionForValue(0,o);return new gp({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<i;++t)s.push(e.getPointPositionForValue(t,a));return s}(t):function(t){const{scale:e={},fill:n}=t,r=function(t,e){let n=null;return"start"===t?n=e.bottom:"end"===t?n=e.top:_l(t)?n=e.getPixelForValue(t.value):e.getBasePixel&&(n=e.getBasePixel()),n}(n,e);if(kl(r)){const t=e.isHorizontal();return{x:t?r:null,y:t?null:r}}return null}(t)}(t);return i instanceof gp?i:up(i,r)}(e),{line:i,scale:o,axis:a}=e,s=i.options,l=s.fill,c=s.backgroundColor,{above:u=c,below:h=c}=l||{};r&&i.points.length&&(Tu(t,n),function(t,e){const{line:n,target:r,above:i,below:o,area:a,scale:s}=e,l=n._loop?"angle":e.axis;t.save(),"x"===l&&o!==i&&(vp(t,r,a.top),bp(t,{line:n,target:r,color:i,scale:s,property:l}),t.restore(),t.save(),vp(t,r,a.bottom)),bp(t,{line:n,target:r,color:o,scale:s,property:l}),t.restore()}(t,{line:i,target:r,above:u,below:h,area:n,scale:o,axis:a}),Lu(t))}function vp(t,e,n){const{segments:r,points:i}=e;let o=!0,a=!1;t.beginPath();for(const s of r){const{start:r,end:l}=s,c=i[r],u=i[lp(r,l,i)];o?(t.moveTo(c.x,c.y),o=!1):(t.lineTo(c.x,n),t.lineTo(c.x,c.y)),a=!!e.pathSegment(t,s,{move:a}),a?t.closePath():t.lineTo(u.x,n)}t.lineTo(e.first().x,n),t.closePath(),t.clip()}function bp(t,e){const{line:n,target:r,property:i,color:o,scale:a}=e,s=function(t,e,n){const r=t.segments,i=t.points,o=e.points,a=[];for(const t of r){let{start:r,end:s}=t;s=lp(r,s,i);const l=sp(n,i[r],i[s],t.loop);if(!e.segments){a.push({source:t,target:l,start:i[r],end:i[s]});continue}const c=Rh(e,l);for(const e of c){const r=sp(n,o[e.start],o[e.end],e.loop),s=Dh(t,i,r);for(const t of s)a.push({source:t,target:e,start:{[n]:cp(l,r,"start",Math.max)},end:{[n]:cp(l,r,"end",Math.min)}})}}return a}(n,r,i);for(const{source:e,target:l,start:c,end:u}of s){const{style:{backgroundColor:s=o}={}}=e,h=!0!==r;t.save(),t.fillStyle=s,xp(t,a,h&&sp(i,c,u)),t.beginPath();const d=!!n.pathSegment(t,e);let f;if(h){d?t.closePath():Ap(t,r,u,i);const e=!!r.pathSegment(t,l,{move:d,reverse:!0});f=d&&e,f||Ap(t,r,c,i)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function xp(t,e,n){const{top:r,bottom:i}=e.chart.chartArea,{property:o,start:a,end:s}=n||{};"x"===o&&(t.beginPath(),t.rect(a,r,s-a,i-r),t.clip())}function Ap(t,e,n,r){const i=e.interpolate(n,r);i&&t.lineTo(i.x,i.y)}var wp={id:"filler",afterDatasetsUpdate(t,e,n){const r=(t.data.datasets||[]).length,i=[];let o,a,s,l;for(a=0;a<r;++a)o=t.getDatasetMeta(a),s=o.dataset,l=null,s&&s.options&&s instanceof Wf&&(l={visible:t.isDatasetVisible(a),index:a,fill:fp(s,a,r),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:s}),o.$filler=l,i.push(l);for(a=0;a<r;++a)l=i[a],l&&!1!==l.fill&&(l.fill=dp(i,a,n.propagate))},beforeDraw(t,e,n){const r="beforeDraw"===n.drawTime,i=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=i.length-1;e>=0;--e){const n=i[e].$filler;n&&(n.line.updateControlPoints(o,n.axis),r&&n.fill&&yp(t.ctx,n,o))}},beforeDatasetsDraw(t,e,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=t.getSortedVisibleDatasetMetas();for(let e=r.length-1;e>=0;--e){const n=r[e].$filler;hp(n)&&yp(t.ctx,n,t.chartArea)}},beforeDatasetDraw(t,e,n){const r=e.meta.$filler;hp(r)&&"beforeDatasetDraw"===n.drawTime&&yp(t.ctx,r,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Cp=(t,e)=>{let{boxHeight:n=e,boxWidth:r=e}=t;return t.usePointStyle&&(n=Math.min(n,e),r=t.pointStyleWidth||Math.min(r,e)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(e,n)}};class _p extends Qd{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=Pl(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,r=Hu(n.font),i=r.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:s}=Cp(n,i);let l,c;e.font=r.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,i,a,s)+10):(c=this.maxHeight,l=this._fitCols(o,r,a,s)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,r){const{ctx:i,maxWidth:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.lineWidths=[0],c=r+a;let u=t;i.textAlign="left",i.textBaseline="middle";let h=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=n+e/2+i.measureText(t.text).width;(0===f||l[l.length-1]+p+2*a>o)&&(u+=c,l[l.length-(f>0?0:1)]=0,d+=c,h++),s[f]={left:0,top:d,row:h,width:p,height:r},l[l.length-1]+=p+a})),u}_fitCols(t,e,n,r){const{ctx:i,maxHeight:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let u=a,h=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:m,itemHeight:g}=function(t,e,n,r,i){const o=function(t,e,n,r){let i=t.text;return i&&"string"!=typeof i&&(i=i.reduce(((t,e)=>t.length>e.length?t:e))),e+n.size/2+r.measureText(i).width}(r,t,e,n),a=function(t,e,n){let r=t;return"string"!=typeof e.text&&(r=kp(e,n)),r}(i,r,e.lineHeight);return{itemWidth:o,itemHeight:a}}(n,e,i,t,r);o>0&&d+g+2*a>c&&(u+=h+a,l.push({width:h,height:d}),f+=h+a,p++,h=d=0),s[o]={left:f,top:d,col:p,width:m,height:g},h=Math.max(h,m),d+=g+a})),u+=h,l.push({width:h,height:d}),u}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:r},rtl:i}}=this,o=Mh(i,this.left,this.width);if(this.isHorizontal()){let i=0,a=Cc(n,this.left+r,this.right-this.lineWidths[i]);for(const s of e)i!==s.row&&(i=s.row,a=Cc(n,this.left+r,this.right-this.lineWidths[i])),s.top+=this.top+t+r,s.left=o.leftForLtr(o.x(a),s.width),a+=s.width+r}else{let i=0,a=Cc(n,this.top+t+r,this.bottom-this.columnSizes[i].height);for(const s of e)s.col!==i&&(i=s.col,a=Cc(n,this.top+t+r,this.bottom-this.columnSizes[i].height)),s.top=a,s.left+=this.left+r,s.left=o.leftForLtr(o.x(s.left),s.width),a+=s.height+r}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Tu(t,this),this._draw(),Lu(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:r}=this,{align:i,labels:o}=t,a=wu.color,s=Mh(t.rtl,this.left,this.width),l=Hu(o.font),{padding:c}=o,u=l.size,h=u/2;let d;this.drawTitle(),r.textAlign=s.textAlign("left"),r.textBaseline="middle",r.lineWidth=.5,r.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:m}=Cp(o,u),g=this.isHorizontal(),y=this._computeTitleHeight();d=g?{x:Cc(i,this.left+c,this.right-n[0]),y:this.top+c+y,line:0}:{x:this.left+c,y:Cc(i,this.top+y+c,this.bottom-e[0].height),line:0},Ph(this.ctx,t.textDirection);const v=m+c;this.legendItems.forEach(((b,x)=>{r.strokeStyle=b.fontColor,r.fillStyle=b.fontColor;const A=r.measureText(b.text).width,w=s.textAlign(b.textAlign||(b.textAlign=o.textAlign)),C=f+h+A;let _=d.x,k=d.y;if(s.setWidth(this.width),g?x>0&&_+C+c>this.right&&(k=d.y+=v,d.line++,_=d.x=Cc(i,this.left+c,this.right-n[d.line])):x>0&&k+v>this.bottom&&(_=d.x=_+e[d.line].width+c,d.line++,k=d.y=Cc(i,this.top+y+c,this.bottom-e[d.line].height)),function(t,e,n){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;r.save();const i=El(n.lineWidth,1);if(r.fillStyle=El(n.fillStyle,a),r.lineCap=El(n.lineCap,"butt"),r.lineDashOffset=El(n.lineDashOffset,0),r.lineJoin=El(n.lineJoin,"miter"),r.lineWidth=i,r.strokeStyle=El(n.strokeStyle,a),r.setLineDash(El(n.lineDash,[])),o.usePointStyle){const a={radius:p*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:i},l=s.xPlus(t,f/2);Mu(r,a,l,e+h,o.pointStyleWidth&&f)}else{const o=e+Math.max((u-p)/2,0),a=s.leftForLtr(t,f),l=Wu(n.borderRadius);r.beginPath(),Object.values(l).some((t=>0!==t))?Nu(r,{x:a,y:o,w:f,h:p,radius:l}):r.rect(a,o,f,p),r.fill(),0!==i&&r.stroke()}r.restore()}(s.x(_),k,b),_=((t,e,n,r)=>t===(r?"left":"right")?n:"center"===t?(e+n)/2:e)(w,_+f+h,g?_+C:this.right,t.rtl),function(t,e,n){Ru(r,n.text,t,e+m/2,l,{strikethrough:n.hidden,textAlign:s.textAlign(n.textAlign)})}(s.x(_),k,b),g)d.x+=C+c;else if("string"!=typeof b.text){const t=l.lineHeight;d.y+=kp(b,t)}else d.y+=v})),Th(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=Hu(e.font),r=$u(e.padding);if(!e.display)return;const i=Mh(t.rtl,this.left,this.width),o=this.ctx,a=e.position,s=n.size/2,l=r.top+s;let c,u=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),c=this.top+l,u=Cc(t.align,u,this.right-h);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+Cc(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=Cc(a,u,u+h);o.textAlign=i.textAlign(wc(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=n.string,Ru(o,e.text,d,c,n)}_computeTitleHeight(){const t=this.options.title,e=Hu(t.font),n=$u(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,r,i;if(fc(t,this.left,this.right)&&fc(e,this.top,this.bottom))for(i=this.legendHitBoxes,n=0;n<i.length;++n)if(r=i[n],fc(t,r.left,r.left+r.width)&&fc(e,r.top,r.top+r.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(i=n,null!==(r=o)&&null!==i&&r.datasetIndex===i.datasetIndex&&r.index===i.index);o&&!a&&Pl(e.onLeave,[t,o,this],this),this._hoveredItem=n,n&&!a&&Pl(e.onHover,[t,n,this],this)}else n&&Pl(e.onClick,[t,n,this],this);var r,i}}function kp(t,e){return e*(t.text?t.text.length+.5:0)}var Sp={id:"legend",_element:_p,start(t,e,n){const r=t.legend=new _p({ctx:t.ctx,options:n,chart:t});Id.configure(t,r,n),Id.addBox(t,r)},stop(t){Id.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const r=t.legend;Id.configure(t,r,n),r.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const r=e.datasetIndex,i=n.chart;i.isDatasetVisible(r)?(i.hide(r),e.hidden=!0):(i.show(r),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:r,textAlign:i,color:o,useBorderRadius:a,borderRadius:s}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(n?0:void 0),c=$u(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:l.borderColor,pointStyle:r||l.pointStyle,rotation:l.rotation,textAlign:i||l.textAlign,borderRadius:a&&(s||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Ep extends Qd{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const r=Cl(n.text)?n.text.length:1;this._padding=$u(n.padding);const i=r*Hu(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=i:this.width=i}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:r,right:i,options:o}=this,a=o.align;let s,l,c,u=0;return this.isHorizontal()?(l=Cc(a,n,i),c=e+t,s=i-n):("left"===o.position?(l=n+t,c=Cc(a,r,e),u=-.5*$l):(l=i-t,c=Cc(a,e,r),u=.5*$l),s=r-e),{titleX:l,titleY:c,maxWidth:s,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=Hu(e.font),r=n.lineHeight/2+this._padding.top,{titleX:i,titleY:o,maxWidth:a,rotation:s}=this._drawArgs(r);Ru(t,e.text,0,0,n,{color:e.color,maxWidth:a,rotation:s,textAlign:wc(e.align),textBaseline:"middle",translation:[i,o]})}}var Mp={id:"title",_element:Ep,start(t,e,n){!function(t,e){const n=new Ep({ctx:t.ctx,options:e,chart:t});Id.configure(t,n,e),Id.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;Id.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const r=t.titleBlock;Id.configure(t,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Pp=new WeakMap;var Tp={id:"subtitle",start(t,e,n){const r=new Ep({ctx:t.ctx,options:n,chart:t});Id.configure(t,r,n),Id.addBox(t,r),Pp.set(t,r)},stop(t){Id.removeBox(t,Pp.get(t)),Pp.delete(t)},beforeUpdate(t,e,n){const r=Pp.get(t);Id.configure(t,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Lp={average(t){if(!t.length)return!1;let e,n,r=0,i=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();r+=t.x,i+=t.y,++o}}return{x:r/o,y:i/o}},nearest(t,e){if(!t.length)return!1;let n,r,i,o=e.x,a=e.y,s=Number.POSITIVE_INFINITY;for(n=0,r=t.length;n<r;++n){const r=t[n].element;if(r&&r.hasValue()){const t=lc(e,r.getCenterPoint());t<s&&(s=t,i=r)}}if(i){const t=i.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Ip(t,e){return e&&(Cl(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Dp(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Rp(t,e){const{element:n,datasetIndex:r,index:i}=e,o=t.getDatasetMeta(r).controller,{label:a,value:s}=o.getLabelAndValue(i);return{chart:t,label:a,parsed:o.getParsed(i),raw:t.data.datasets[r].data[i],formattedValue:s,dataset:o.getDataset(),dataIndex:i,datasetIndex:r,element:n}}function Op(t,e){const n=t.chart.ctx,{body:r,footer:i,title:o}=t,{boxWidth:a,boxHeight:s}=e,l=Hu(e.bodyFont),c=Hu(e.titleFont),u=Hu(e.footerFont),h=o.length,d=i.length,f=r.length,p=$u(e.padding);let m=p.height,g=0,y=r.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);y+=t.beforeBody.length+t.afterBody.length,h&&(m+=h*c.lineHeight+(h-1)*e.titleSpacing+e.titleMarginBottom),y&&(m+=f*(e.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(y-f)*l.lineHeight+(y-1)*e.bodySpacing),d&&(m+=e.footerMarginTop+d*u.lineHeight+(d-1)*e.footerSpacing);let v=0;const b=function(t){g=Math.max(g,n.measureText(t).width+v)};return n.save(),n.font=c.string,Tl(t.title,b),n.font=l.string,Tl(t.beforeBody.concat(t.afterBody),b),v=e.displayColors?a+2+e.boxPadding:0,Tl(r,(t=>{Tl(t.before,b),Tl(t.lines,b),Tl(t.after,b)})),v=0,n.font=u.string,Tl(t.footer,b),n.restore(),g+=p.width,{width:g,height:m}}function Bp(t,e,n,r){const{x:i,width:o}=n,{width:a,chartArea:{left:s,right:l}}=t;let c="center";return"center"===r?c=i<=(s+l)/2?"left":"right":i<=o/2?c="left":i>=a-o/2&&(c="right"),function(t,e,n,r){const{x:i,width:o}=r,a=n.caretSize+n.caretPadding;return"left"===t&&i+o+a>e.width||"right"===t&&i-o-a<0||void 0}(c,t,e,n)&&(c="center"),c}function Np(t,e,n){const r=n.yAlign||e.yAlign||function(t,e){const{y:n,height:r}=e;return n<r/2?"top":n>t.height-r/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||Bp(t,e,n,r),yAlign:r}}function zp(t,e,n,r){const{caretSize:i,caretPadding:o,cornerRadius:a}=t,{xAlign:s,yAlign:l}=n,c=i+o,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=Wu(a);let p=function(t,e){let{x:n,width:r}=t;return"right"===e?n-=r:"center"===e&&(n-=r/2),n}(e,s);const m=function(t,e,n){let{y:r,height:i}=t;return"top"===e?r+=n:r-="bottom"===e?i+n:i/2,r}(e,l,c);return"center"===l?"left"===s?p+=c:"right"===s&&(p-=c):"left"===s?p-=Math.max(u,d)+i:"right"===s&&(p+=Math.max(h,f)+i),{x:dc(p,0,r.width-e.width),y:dc(m,0,r.height-e.height)}}function Fp(t,e,n){const r=$u(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-r.right:t.x+r.left}function jp(t){return Ip([],Dp(t))}function Vp(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}const Up={beforeTitle:xl,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(r>0&&e.dataIndex<r)return n[e.dataIndex]}return""},afterTitle:xl,beforeBody:xl,beforeLabel:xl,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return wl(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:xl,afterBody:xl,beforeFooter:xl,footer:xl,afterFooter:xl};function Wp(t,e,n,r){const i=t[e].call(n,r);return void 0===i?Up[e].call(n,r):i}class $p extends Qd{static positioners=Lp;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),r=n.enabled&&e.options.animation&&n.animations,i=new Uh(this.chart,r);return r._cacheable&&(this._cachedAnimations=Object.freeze(i)),i}getContext(){return this.$context||(this.$context=(this,qu(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:n}=e,r=Wp(n,"beforeTitle",this,t),i=Wp(n,"title",this,t),o=Wp(n,"afterTitle",this,t);let a=[];return a=Ip(a,Dp(r)),a=Ip(a,Dp(i)),a=Ip(a,Dp(o)),a}getBeforeBody(t,e){return jp(Wp(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:n}=e,r=[];return Tl(t,(t=>{const e={before:[],lines:[],after:[]},i=Vp(n,t);Ip(e.before,Dp(Wp(i,"beforeLabel",this,t))),Ip(e.lines,Wp(i,"label",this,t)),Ip(e.after,Dp(Wp(i,"afterLabel",this,t))),r.push(e)})),r}getAfterBody(t,e){return jp(Wp(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:n}=e,r=Wp(n,"beforeFooter",this,t),i=Wp(n,"footer",this,t),o=Wp(n,"afterFooter",this,t);let a=[];return a=Ip(a,Dp(r)),a=Ip(a,Dp(i)),a=Ip(a,Dp(o)),a}_createItems(t){const e=this._active,n=this.chart.data,r=[],i=[],o=[];let a,s,l=[];for(a=0,s=e.length;a<s;++a)l.push(Rp(this.chart,e[a]));return t.filter&&(l=l.filter(((e,r,i)=>t.filter(e,r,i,n)))),t.itemSort&&(l=l.sort(((e,r)=>t.itemSort(e,r,n)))),Tl(l,(e=>{const n=Vp(t.callbacks,e);r.push(Wp(n,"labelColor",this,e)),i.push(Wp(n,"labelPointStyle",this,e)),o.push(Wp(n,"labelTextColor",this,e))})),this.labelColors=r,this.labelPointStyles=i,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const n=this.options.setContext(this.getContext()),r=this._active;let i,o=[];if(r.length){const t=Lp[n.position].call(this,r,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);const e=this._size=Op(this,n),a=Object.assign({},t,e),s=Np(this.chart,n,a),l=zp(n,a,s,this.chart);this.xAlign=s.xAlign,this.yAlign=s.yAlign,i={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(i={opacity:0});this._tooltipItems=o,this.$context=void 0,i&&this._resolveAnimations().update(this,i),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,r){const i=this.getCaretPosition(t,n,r);e.lineTo(i.x1,i.y1),e.lineTo(i.x2,i.y2),e.lineTo(i.x3,i.y3)}getCaretPosition(t,e,n){const{xAlign:r,yAlign:i}=this,{caretSize:o,cornerRadius:a}=n,{topLeft:s,topRight:l,bottomLeft:c,bottomRight:u}=Wu(a),{x:h,y:d}=t,{width:f,height:p}=e;let m,g,y,v,b,x;return"center"===i?(b=d+p/2,"left"===r?(m=h,g=m-o,v=b+o,x=b-o):(m=h+f,g=m+o,v=b-o,x=b+o),y=m):(g="left"===r?h+Math.max(s,c)+o:"right"===r?h+f-Math.max(l,u)-o:this.caretX,"top"===i?(v=d,b=v-o,m=g-o,y=g+o):(v=d+p,b=v+o,m=g+o,y=g-o),x=v),{x1:m,x2:g,x3:y,y1:v,y2:b,y3:x}}drawTitle(t,e,n){const r=this.title,i=r.length;let o,a,s;if(i){const l=Mh(n.rtl,this.x,this.width);for(t.x=Fp(this,n.titleAlign,n),e.textAlign=l.textAlign(n.titleAlign),e.textBaseline="middle",o=Hu(n.titleFont),a=n.titleSpacing,e.fillStyle=n.titleColor,e.font=o.string,s=0;s<i;++s)e.fillText(r[s],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,s+1===i&&(t.y+=n.titleMarginBottom-a)}}_drawColorBox(t,e,n,r,i){const o=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:s,boxWidth:l,boxPadding:c}=i,u=Hu(i.bodyFont),h=Fp(this,"left",i),d=r.x(h),f=s<u.lineHeight?(u.lineHeight-s)/2:0,p=e.y+f;if(i.usePointStyle){const e={radius:Math.min(l,s)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=r.leftForLtr(d,l)+l/2,c=p+s/2;t.strokeStyle=i.multiKeyBackground,t.fillStyle=i.multiKeyBackground,Eu(t,e,n,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,Eu(t,e,n,c)}else{t.lineWidth=_l(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=r.leftForLtr(d,l-c),n=r.leftForLtr(r.xPlus(d,1),l-c-2),a=Wu(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=i.multiKeyBackground,Nu(t,{x:e,y:p,w:l,h:s,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Nu(t,{x:n,y:p+1,w:l-2,h:s-2,radius:a}),t.fill()):(t.fillStyle=i.multiKeyBackground,t.fillRect(e,p,l,s),t.strokeRect(e,p,l,s),t.fillStyle=o.backgroundColor,t.fillRect(n,p+1,l-2,s-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:r}=this,{bodySpacing:i,bodyAlign:o,displayColors:a,boxHeight:s,boxWidth:l,boxPadding:c}=n,u=Hu(n.bodyFont);let h=u.lineHeight,d=0;const f=Mh(n.rtl,this.x,this.width),p=function(n){e.fillText(n,f.x(t.x+d),t.y+h/2),t.y+=h+i},m=f.textAlign(o);let g,y,v,b,x,A,w;for(e.textAlign=o,e.textBaseline="middle",e.font=u.string,t.x=Fp(this,m,n),e.fillStyle=n.bodyColor,Tl(this.beforeBody,p),d=a&&"right"!==m?"center"===o?l/2+c:l+2+c:0,b=0,A=r.length;b<A;++b){for(g=r[b],y=this.labelTextColors[b],e.fillStyle=y,Tl(g.before,p),v=g.lines,a&&v.length&&(this._drawColorBox(e,t,b,f,n),h=Math.max(u.lineHeight,s)),x=0,w=v.length;x<w;++x)p(v[x]),h=u.lineHeight;Tl(g.after,p)}d=0,h=u.lineHeight,Tl(this.afterBody,p),t.y-=i}drawFooter(t,e,n){const r=this.footer,i=r.length;let o,a;if(i){const s=Mh(n.rtl,this.x,this.width);for(t.x=Fp(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=s.textAlign(n.footerAlign),e.textBaseline="middle",o=Hu(n.footerFont),e.fillStyle=n.footerColor,e.font=o.string,a=0;a<i;++a)e.fillText(r[a],s.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+n.footerSpacing}}drawBackground(t,e,n,r){const{xAlign:i,yAlign:o}=this,{x:a,y:s}=t,{width:l,height:c}=n,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=Wu(r.cornerRadius);e.fillStyle=r.backgroundColor,e.strokeStyle=r.borderColor,e.lineWidth=r.borderWidth,e.beginPath(),e.moveTo(a+u,s),"top"===o&&this.drawCaret(t,e,n,r),e.lineTo(a+l-h,s),e.quadraticCurveTo(a+l,s,a+l,s+h),"center"===o&&"right"===i&&this.drawCaret(t,e,n,r),e.lineTo(a+l,s+c-f),e.quadraticCurveTo(a+l,s+c,a+l-f,s+c),"bottom"===o&&this.drawCaret(t,e,n,r),e.lineTo(a+d,s+c),e.quadraticCurveTo(a,s+c,a,s+c-d),"center"===o&&"left"===i&&this.drawCaret(t,e,n,r),e.lineTo(a,s+u),e.quadraticCurveTo(a,s,a+u,s),e.closePath(),e.fill(),r.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,r=n&&n.x,i=n&&n.y;if(r||i){const n=Lp[t.position].call(this,this._active,this._eventPosition);if(!n)return;const o=this._size=Op(this,t),a=Object.assign({},n,this._size),s=Np(e,t,a),l=zp(t,a,s,e);r._to===l.x&&i._to===l.y||(this.xAlign=s.xAlign,this.yAlign=s.yAlign,this.width=o.width,this.height=o.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const r={width:this.width,height:this.height},i={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const o=$u(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=n,this.drawBackground(i,t,r,e),Ph(t,e.textDirection),i.y+=o.top,this.drawTitle(i,t,e),this.drawBody(i,t,e),this.drawFooter(i,t,e),Th(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,r=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),i=!Ll(n,r),o=this._positionChanged(r,e);(i||o)&&(this._active=r,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const r=this.options,i=this._active||[],o=this._getActiveElements(t,i,e,n),a=this._positionChanged(o,t),s=e||!Ll(o,i)||a;return s&&(this._active=o,(r.enabled||r.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),s}_getActiveElements(t,e,n,r){const i=this.options;if("mouseout"===t.type)return[];if(!r)return e;const o=this.chart.getElementsAtEventForMode(t,i.mode,i,n);return i.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:n,caretY:r,options:i}=this,o=Lp[i.position].call(this,t,e);return!1!==o&&(n!==o.x||r!==o.y)}}var Hp={id:"tooltip",_element:$p,positioners:Lp,afterInit(t,e,n){n&&(t.tooltip=new $p({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const n={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...n,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n)}},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Up},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Yp=Object.freeze({__proto__:null,Colors:rp,Decimation:ap,Filler:wp,Legend:Sp,SubTitle:Tp,Title:Mp,Tooltip:Hp});function qp(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function Gp(t,e,{horizontal:n,minRotation:r}){const i=ic(r),o=(n?Math.sin(i):Math.cos(i))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class Qp extends rf{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return wl(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:r,max:i}=this;const o=t=>r=e?r:t,a=t=>i=n?i:t;if(t){const t=Zl(r),e=Zl(i);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(r===i){let e=0===i?1:Math.abs(.05*i);a(i+e),t||o(r-e)}this.min=r,this.max=i}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:r}=t;return r?(e=Math.ceil(this.max/r)-Math.floor(this.min/r)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${r} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const r=function(t,e){const n=[],{bounds:r,step:i,min:o,max:a,precision:s,count:l,maxTicks:c,maxDigits:u,includeBounds:h}=t,d=i||1,f=c-1,{min:p,max:m}=e,g=!wl(o),y=!wl(a),v=!wl(l),b=(m-p)/(u+1);let x,A,w,C,_=ec((m-p)/f/d)*d;if(_<1e-14&&!g&&!y)return[{value:p},{value:m}];C=Math.ceil(m/_)-Math.floor(p/_),C>f&&(_=ec(C*_/f/d)*d),wl(s)||(x=Math.pow(10,s),_=Math.ceil(_*x)/x),"ticks"===r?(A=Math.floor(p/_)*_,w=Math.ceil(m/_)*_):(A=p,w=m),g&&y&&i&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((a-o)/i,_/1e3)?(C=Math.round(Math.min((a-o)/_,c)),_=(a-o)/C,A=o,w=a):v?(A=g?o:A,w=y?a:w,C=l-1,_=(w-A)/C):(C=(w-A)/_,C=tc(C,Math.round(C),_/1e3)?Math.round(C):Math.ceil(C));const k=Math.max(ac(_),ac(A));x=Math.pow(10,wl(s)?k:s),A=Math.round(A*x)/x,w=Math.round(w*x)/x;let S=0;for(g&&(h&&A!==o?(n.push({value:o}),A<o&&S++,tc(Math.round((A+S*_)*x)/x,o,Gp(o,b,t))&&S++):A<o&&S++);S<C;++S)n.push({value:Math.round((A+S*_)*x)/x});return y&&h&&w!==a?n.length&&tc(n[n.length-1].value,a,Gp(a,b,t))?n[n.length-1].value=a:n.push({value:a}):y&&w!==a||n.push({value:w}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&rc(r,this,"value"),t.reverse?(r.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),r}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const r=(n-e)/Math.max(t.length-1,1)/2;e-=r,n+=r}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return pu(t,this.chart.options.locale,this.options.ticks.format)}}class Jp extends Qp{static id="linear";static defaults={ticks:{callback:gu.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=kl(t)?t:0,this.max=kl(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=ic(this.options.ticks.minRotation),r=(t?Math.sin(n):Math.cos(n))||.001,i=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,i.lineHeight/r))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Xp=t=>Math.floor(Kl(t)),Kp=(t,e)=>Math.pow(10,Xp(t)+e);function Zp(t){return 1==t/Math.pow(10,Xp(t))}function tm(t,e,n){const r=Math.pow(10,n),i=Math.floor(t/r);return Math.ceil(e/r)-i}class em extends rf{static id="logarithmic";static defaults={ticks:{callback:gu.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=Qp.prototype.parse.apply(this,[t,e]);if(0!==n)return kl(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=kl(t)?Math.max(0,t):null,this.max=kl(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!kl(this._userMin)&&(this.min=t===Kp(this.min,0)?Kp(this.min,-1):Kp(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let n=this.min,r=this.max;const i=e=>n=t?n:e,o=t=>r=e?r:t;n===r&&(n<=0?(i(1),o(10)):(i(Kp(n,-1)),o(Kp(r,1)))),n<=0&&i(Kp(r,-1)),r<=0&&o(Kp(n,1)),this.min=n,this.max=r}buildTicks(){const t=this.options,e=function(t,{min:e,max:n}){e=Sl(t.min,e);const r=[],i=Xp(e);let o=function(t,e){let n=Xp(e-t);for(;tm(t,e,n)>10;)n++;for(;tm(t,e,n)<10;)n--;return Math.min(n,Xp(t))}(e,n),a=o<0?Math.pow(10,Math.abs(o)):1;const s=Math.pow(10,o),l=i>o?Math.pow(10,i):0,c=Math.round((e-l)*a)/a,u=Math.floor((e-l)/s/10)*s*10;let h=Math.floor((c-u)/Math.pow(10,o)),d=Sl(t.min,Math.round((l+u+h*Math.pow(10,o))*a)/a);for(;d<n;)r.push({value:d,major:Zp(d),significand:h}),h>=10?h=h<15?15:20:h++,h>=20&&(o++,h=2,a=o>=0?1:a),d=Math.round((l+u+h*Math.pow(10,o))*a)/a;const f=Sl(t.max,d);return r.push({value:f,major:Zp(f),significand:h}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&rc(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":pu(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Kl(t),this._valueRange=Kl(this.max)-Kl(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Kl(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function nm(t){const e=t.ticks;if(e.display&&t.display){const t=$u(e.backdropPadding);return El(e.font&&e.font.size,wu.font.size)+t.height}return 0}function rm(t,e,n,r,i){return t===r||t===i?{start:e-n/2,end:e+n/2}:t<r||t>i?{start:e-n,end:e}:{start:e,end:e+n}}function im(t,e,n,r,i){const o=Math.abs(Math.sin(n)),a=Math.abs(Math.cos(n));let s=0,l=0;r.start<e.l?(s=(e.l-r.start)/o,t.l=Math.min(t.l,e.l-s)):r.end>e.r&&(s=(r.end-e.r)/o,t.r=Math.max(t.r,e.r+s)),i.start<e.t?(l=(e.t-i.start)/a,t.t=Math.min(t.t,e.t-l)):i.end>e.b&&(l=(i.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function om(t){return 0===t||180===t?"center":t<180?"left":"right"}function am(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}function sm(t,e,n,r){const{ctx:i}=t;if(n)i.arc(t.xCenter,t.yCenter,e,0,Hl);else{let n=t.getPointPosition(0,e);i.moveTo(n.x,n.y);for(let o=1;o<r;o++)n=t.getPointPosition(o,e),i.lineTo(n.x,n.y)}}class lm extends Qp{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:gu.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=$u(nm(this.options)/2),e=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(e,n)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=kl(t)&&!isNaN(t)?t:0,this.max=kl(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/nm(this.options))}generateTickLabels(t){Qp.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const n=Pl(this.options.pointLabels.callback,[t,e],this);return n||0===n?n:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},n=Object.assign({},e),r=[],i=[],o=t._pointLabels.length,a=t.options.pointLabels,s=a.centerPointLabels?$l/o:0;for(let h=0;h<o;h++){const o=a.setContext(t.getPointLabelContext(h));i[h]=o.padding;const d=t.getPointPosition(h,t.drawingArea+i[h],s),f=Hu(o.font),p=(l=t.ctx,c=f,u=Cl(u=t._pointLabels[h])?u:[u],{w:_u(l,c.string,u),h:u.length*c.lineHeight});r[h]=p;const m=uc(t.getIndexAngle(h)+s),g=Math.round(oc(m));im(n,e,m,rm(g,d.x,p.w,0,180),rm(g,d.y,p.h,90,270))}var l,c,u;t.setCenterPoint(e.l-n.l,n.r-e.r,e.t-n.t,n.b-e.b),t._pointLabelItems=function(t,e,n){const r=[],i=t._pointLabels.length,o=t.options,a=nm(o)/2,s=t.drawingArea,l=o.pointLabels.centerPointLabels?$l/i:0;for(let o=0;o<i;o++){const i=t.getPointPosition(o,s+a+n[o],l),d=Math.round(oc(uc(i.angle+Ql))),f=e[o],p=am(i.y,f.h,d),m=om(d),g=(c=i.x,u=f.w,"right"===(h=m)?c-=u:"center"===h&&(c-=u/2),c);r.push({x:i.x,y:p,textAlign:m,left:g,top:p,right:g+f.w,bottom:p+f.h})}var c,u,h;return r}(t,r,i)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,n,r){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((n-r)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,n,r))}getIndexAngle(t){return uc(t*(Hl/(this._pointLabels.length||1))+ic(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(wl(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(wl(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const n=e[t];return function(t,e,n){return qu(t,{label:n,index:e,type:"pointLabel"})}(this.getContext(),t,n)}}getPointPosition(t,e,n=0){const r=this.getIndexAngle(t)-Ql+n;return{x:Math.cos(r)*e+this.xCenter,y:Math.sin(r)*e+this.yCenter,angle:r}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:r,bottom:i}=this._pointLabelItems[t];return{left:e,top:n,right:r,bottom:i}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const n=this.ctx;n.save(),n.beginPath(),sm(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:n,grid:r,border:i}=e,o=this._pointLabels.length;let a,s,l;if(e.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:r}}=t;for(let i=e-1;i>=0;i--){const e=r.setContext(t.getPointLabelContext(i)),o=Hu(e.font),{x:a,y:s,textAlign:l,left:c,top:u,right:h,bottom:d}=t._pointLabelItems[i],{backdropColor:f}=e;if(!wl(f)){const t=Wu(e.borderRadius),r=$u(e.backdropPadding);n.fillStyle=f;const i=c-r.left,o=u-r.top,a=h-c+r.width,s=d-u+r.height;Object.values(t).some((t=>0!==t))?(n.beginPath(),Nu(n,{x:i,y:o,w:a,h:s,radius:t}),n.fill()):n.fillRect(i,o,a,s)}Ru(n,t._pointLabels[i],a,s+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,o),r.display&&this.ticks.forEach(((t,e)=>{if(0!==e){s=this.getDistanceFromCenterForValue(t.value);const n=this.getContext(e),a=r.setContext(n),l=i.setContext(n);!function(t,e,n,r,i){const o=t.ctx,a=e.circular,{color:s,lineWidth:l}=e;!a&&!r||!s||!l||n<0||(o.save(),o.strokeStyle=s,o.lineWidth=l,o.setLineDash(i.dash),o.lineDashOffset=i.dashOffset,o.beginPath(),sm(t,n,a,r),o.closePath(),o.stroke(),o.restore())}(this,a,s,o,l)}})),n.display){for(t.save(),a=o-1;a>=0;a--){const r=n.setContext(this.getPointLabelContext(a)),{color:i,lineWidth:o}=r;o&&i&&(t.lineWidth=o,t.strokeStyle=i,t.setLineDash(r.borderDash),t.lineDashOffset=r.borderDashOffset,s=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,s),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,n=e.ticks;if(!n.display)return;const r=this.getIndexAngle(0);let i,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(r),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((r,a)=>{if(0===a&&!e.reverse)return;const s=n.setContext(this.getContext(a)),l=Hu(s.font);if(i=this.getDistanceFromCenterForValue(this.ticks[a].value),s.showLabelBackdrop){t.font=l.string,o=t.measureText(r.label).width,t.fillStyle=s.backdropColor;const e=$u(s.backdropPadding);t.fillRect(-o/2-e.left,-i-l.size/2-e.top,o+e.width,l.size+e.height)}Ru(t,r.label,0,-i,l,{color:s.color})})),t.restore()}drawTitle(){}}const cm={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},um=Object.keys(cm);function hm(t,e){return t-e}function dm(t,e){if(wl(e))return null;const n=t._adapter,{parser:r,round:i,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof r&&(a=r(a)),kl(a)||(a="string"==typeof r?n.parse(a,r):n.parse(a)),null===a?null:(i&&(a="week"!==i||!nc(o)&&!0!==o?n.startOf(a,i):n.startOf(a,"isoWeek",o)),+a)}function fm(t,e,n,r){const i=um.length;for(let o=um.indexOf(t);o<i-1;++o){const t=cm[um[o]],i=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(i*t.size))<=r)return um[o]}return um[i-1]}function pm(t,e,n){if(n){if(n.length){const{lo:r,hi:i}=pc(n,e);t[n[r]>=e?n[r]:n[i]]=!0}}else t[e]=!0}function mm(t,e,n){const r=[],i={},o=e.length;let a,s;for(a=0;a<o;++a)s=e[a],i[s]=a,r.push({value:s,major:!1});return 0!==o&&n?function(t,e,n,r){const i=t._adapter,o=+i.startOf(e[0].value,r),a=e[e.length-1].value;let s,l;for(s=o;s<=a;s=+i.add(s,1,r))l=n[s],l>=0&&(e[l].major=!0);return e}(t,r,i,n):r}class gm extends rf{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const n=t.time||(t.time={}),r=this._adapter=new pd(t.adapters.date);r.init(e),Bl(n.displayFormats,r.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:dm(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,n=t.time.unit||"day";let{min:r,max:i,minDefined:o,maxDefined:a}=this.getUserBounds();function s(t){o||isNaN(t.min)||(r=Math.min(r,t.min)),a||isNaN(t.max)||(i=Math.max(i,t.max))}o&&a||(s(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||s(this.getMinMax(!1))),r=kl(r)&&!isNaN(r)?r:+e.startOf(Date.now(),n),i=kl(i)&&!isNaN(i)?i:+e.endOf(Date.now(),n)+1,this.min=Math.min(r,i-1),this.max=Math.max(r+1,i)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this.options,e=t.time,n=t.ticks,r="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&r.length&&(this.min=this._userMin||r[0],this.max=this._userMax||r[r.length-1]);const i=this.min,o=function(t,e,n){let r=0,i=t.length;for(;r<i&&t[r]<e;)r++;for(;i>r&&t[i-1]>n;)i--;return r>0||i<t.length?t.slice(r,i):t}(r,i,this.max);return this._unit=e.unit||(n.autoSkip?fm(e.minUnit,this.min,this.max,this._getLabelCapacity(i)):function(t,e,n,r,i){for(let o=um.length-1;o>=um.indexOf(n);o--){const n=um[o];if(cm[n].common&&t._adapter.diff(i,r,n)>=e-1)return n}return um[n?um.indexOf(n):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(t){for(let e=um.indexOf(t)+1,n=um.length;e<n;++e)if(cm[um[e]].common)return um[e]}(this._unit):void 0,this.initOffsets(r),t.reverse&&o.reverse(),mm(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,n,r=0,i=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),r=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,n=this.getDecimalForValue(t[t.length-1]),i=1===t.length?n:(n-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;r=dc(r,0,o),i=dc(i,0,o),this._offsets={start:r,end:i,factor:1/(r+1+i)}}_generate(){const t=this._adapter,e=this.min,n=this.max,r=this.options,i=r.time,o=i.unit||fm(i.minUnit,e,n,this._getLabelCapacity(e)),a=El(r.ticks.stepSize,1),s="week"===o&&i.isoWeekday,l=nc(s)||!0===s,c={};let u,h,d=e;if(l&&(d=+t.startOf(d,"isoWeek",s)),d=+t.startOf(d,l?"day":o),t.diff(n,e,o)>1e5*a)throw new Error(e+" and "+n+" are too far apart with stepSize of "+a+" "+o);const f="data"===r.ticks.source&&this.getDataTimestamps();for(u=d,h=0;u<n;u=+t.add(u,a,o),h++)pm(c,u,f);return u!==n&&"ticks"!==r.bounds&&1!==h||pm(c,u,f),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}_tickFormatFunction(t,e,n,r){const i=this.options,o=i.ticks.callback;if(o)return Pl(o,[t,e,n],this);const a=i.time.displayFormats,s=this._unit,l=this._majorUnit,c=s&&a[s],u=l&&a[l],h=n[e],d=l&&u&&h&&h.major;return this._adapter.format(t,r||(d?u:c))}generateTickLabels(t){let e,n,r;for(e=0,n=t.length;e<n;++e)r=t[e],r.label=this._tickFormatFunction(r.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+n)*e.factor)}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,n=this.ctx.measureText(t).width,r=ic(this.isHorizontal()?e.maxRotation:e.minRotation),i=Math.cos(r),o=Math.sin(r),a=this._resolveTickFontOptions(0).size;return{w:n*i+a*o,h:n*o+a*i}}_getLabelCapacity(t){const e=this.options.time,n=e.displayFormats,r=n[e.unit]||n.millisecond,i=this._tickFormatFunction(t,0,mm(this,[t],this._majorUnit),r),o=this._getLabelSize(i),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,n=this._cache.data||[];if(n.length)return n;const r=this.getMatchingVisibleMetas();if(this._normalized&&r.length)return this._cache.data=r[0].controller.getAllParsedValues(this);for(t=0,e=r.length;t<e;++t)n=n.concat(r[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const t=this._cache.labels||[];let e,n;if(t.length)return t;const r=this.getLabels();for(e=0,n=r.length;e<n;++e)t.push(dm(this,r[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return bc(t.sort(hm))}}function ym(t,e,n){let r,i,o,a,s=0,l=t.length-1;n?(e>=t[s].pos&&e<=t[l].pos&&({lo:s,hi:l}=mc(t,"pos",e)),({pos:r,time:o}=t[s]),({pos:i,time:a}=t[l])):(e>=t[s].time&&e<=t[l].time&&({lo:s,hi:l}=mc(t,"time",e)),({time:r,pos:o}=t[s]),({time:i,pos:a}=t[l]));const c=i-r;return c?o+(a-o)*(e-r)/c:o}var vm=Object.freeze({__proto__:null,CategoryScale:class extends rf{static id="category";static defaults={ticks:{callback:qp}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:r}of e)t[n]===r&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(wl(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:dc(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,r){const i=t.indexOf(e);return-1===i?((t,e,n,r)=>("string"==typeof e?(n=t.push(e)-1,r.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,r):i!==t.lastIndexOf(e)?n:i}(n,t,El(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:r}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(r=this.getLabels().length-1)),this.min=n,this.max=r}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,r=[];let i=this.getLabels();i=0===t&&e===i.length-1?i:i.slice(t,e+1),this._valueRange=Math.max(i.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)r.push({value:n});return r}getLabelForValue(t){return qp.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:Jp,LogarithmicScale:em,RadialLinearScale:lm,TimeScale:gm,TimeSeriesScale:class extends gm{static id="timeseries";static defaults=gm.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=ym(e,this.min),this._tableRange=ym(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:n}=this,r=[],i=[];let o,a,s,l,c;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=n&&r.push(l);if(r.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(o=0,a=r.length;o<a;++o)c=r[o+1],s=r[o-1],l=r[o],Math.round((c+s)/2)!==l&&i.push({time:l,pos:o/(a-1)});return i}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),n=this.getLabelTimestamps();return t=e.length&&n.length?this.normalize(e.concat(n)):e.length?e:n,t=this._cache.all=t,t}getDecimalForValue(t){return(ym(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return ym(this._table,n*this._tableRange+this._minPos,!0)}}});const bm=[hd,Xf,Yp,vm];Df.register(...bm);const xm="label";function Am(t,e){"function"==typeof t?t(e):t&&(t.current=e)}function wm(t,e){t.labels=e}function Cm(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:xm;const r=[];t.datasets=e.map((e=>{const i=t.datasets.find((t=>t[n]===e[n]));return i&&e.data&&!r.includes(i)?(r.push(i),Object.assign(i,e),i):{...e}}))}function _m(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:xm;const n={labels:[],datasets:[]};return wm(n,t.labels),Cm(n,t.datasets,e),n}function km(t,n){let{height:r=150,width:i=300,redraw:o=!1,datasetIdKey:a,type:s,data:l,options:c,plugins:u=[],fallbackContent:h,updateMode:d,...f}=t;const p=(0,e.useRef)(null),m=(0,e.useRef)(),g=()=>{p.current&&(m.current=new Df(p.current,{type:s,data:_m(l,a),options:c&&{...c},plugins:u}),Am(n,m.current))},y=()=>{Am(n,null),m.current&&(m.current.destroy(),m.current=null)};return(0,e.useEffect)((()=>{!o&&m.current&&c&&function(t,e){const n=t.options;n&&e&&Object.assign(n,e)}(m.current,c)}),[o,c]),(0,e.useEffect)((()=>{!o&&m.current&&wm(m.current.config.data,l.labels)}),[o,l.labels]),(0,e.useEffect)((()=>{!o&&m.current&&l.datasets&&Cm(m.current.config.data,l.datasets,a)}),[o,l.datasets]),(0,e.useEffect)((()=>{m.current&&(o?(y(),setTimeout(g)):m.current.update(d))}),[o,c,l.labels,l.datasets,d]),(0,e.useEffect)((()=>{m.current&&(y(),setTimeout(g))}),[s]),(0,e.useEffect)((()=>(g(),()=>y())),[]),e.createElement("canvas",Object.assign({ref:p,role:"img",height:r,width:i},f),h)}const Sm=(0,e.forwardRef)(km);var Em=i(170),Mm={};function Pm(t){return Pm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Pm(t)}function Tm(){Tm=function(){return t};var t={},e=Object.prototype,n=e.hasOwnProperty,r=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function l(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,n){return t[e]=n}}function c(t,e,n,i){var o=e&&e.prototype instanceof d?e:d,a=Object.create(o.prototype),s=new k(i||[]);return r(a,"_invoke",{value:A(t,n,s)}),a}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var h={};function d(){}function f(){}function p(){}var m={};l(m,o,(function(){return this}));var g=Object.getPrototypeOf,y=g&&g(g(S([])));y&&y!==e&&n.call(y,o)&&(m=y);var v=p.prototype=d.prototype=Object.create(m);function b(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){function i(r,o,a,s){var l=u(t[r],t,o);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==Pm(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,a,s)}),(function(t){i("throw",t,a,s)})):e.resolve(h).then((function(t){c.value=t,a(c)}),(function(t){return i("throw",t,a,s)}))}s(l.arg)}var o;r(this,"_invoke",{value:function(t,n){function r(){return new e((function(e,r){i(t,n,e,r)}))}return o=o?o.then(r,r):r()}})}function A(t,e,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return{value:void 0,done:!0}}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=w(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=u(t,e,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}function w(t,e){var n=e.method,r=t.iterator[n];if(void 0===r)return e.delegate=null,"throw"===n&&t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method)||"return"!==n&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+n+"' method")),h;var i=u(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,h;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,h):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return f.prototype=p,r(v,"constructor",{value:p,configurable:!0}),r(p,"constructor",{value:f,configurable:!0}),f.displayName=l(p,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===f||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,l(t,s,"GeneratorFunction")),t.prototype=Object.create(v),t},t.awrap=function(t){return{__await:t}},b(x.prototype),l(x.prototype,a,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new x(c(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(v),l(v,s,"Generator"),l(v,o,(function(){return this})),l(v,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},t.values=S,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var s=n.call(o,"catchLoc"),l=n.call(o,"finallyLoc");if(s&&l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),_(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;_(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:S(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},t}function Lm(t){return function(t){if(Array.isArray(t))return Om(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Rm(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Im(t,e,n,r,i,o,a){try{var s=t[o](a),l=s.value}catch(t){return void n(t)}s.done?e(l):Promise.resolve(l).then(r,i)}function Dm(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,c=!1;try{if(o=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return s}}(t,e)||Rm(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rm(t,e){if(t){if("string"==typeof t)return Om(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Om(t,e):void 0}}function Om(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}Mm.styleTagTransform=Zs(),Mm.setAttributes=Qs(),Mm.insert=qs().bind(null,"head"),Mm.domAPI=Hs(),Mm.insertStyleElement=Xs(),Ws()(Em.Z,Mm),Em.Z&&Em.Z.locals&&Em.Z.locals,Df.register(ud,Wf,Hf,Jp,Mp);const Bm=function(){var t=Dm((0,e.useState)("Waiting for user to submit GraphQL query"),2),n=t[0],r=t[1],i=Dm((0,e.useState)(""),2),o=(i[0],i[1],Dm((0,e.useState)([]),2)),a=o[0],s=o[1],l=Dm((0,e.useState)({datasets:[]}),2),c=l[0],u=l[1],h=Dm((0,e.useState)(""),2),d=h[0],f=h[1],p=Dm((0,e.useState)(""),2),m=p[0],g=p[1],y="{\n\t\tuser {\n\t\tuser_name,\n\t\tsong_name,\n\t\tmovie_name\n\t\t}\n\t}";(0,e.useLayoutEffect)((function(){for(var t=[],e=0;e<a.length;e++)0===e?t.push("uncached data"):t.push("cached data");u({labels:t,datasets:[{label:"Query Run Time",data:a,fill:!1,borderColor:"#11b5e4",tension:.1}]})}),[a]);var v=new bl.LRUCache(3,"https://lightql-i8h6.onrender.com/graphql"),b=function(){var t,e=(t=Tm().mark((function t(){var e,i,o;return Tm().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("Waiting for user to submit GraphQL query"!==n){t.next=13;break}return e=performance.now(),t.next=4,v.get(y);case 4:o=t.sent,console.log("cacheGet:",o.user),i=performance.now(),r(JSON.stringify(o.user,null,2)),console.log("Execution time before: ".concat((i-e).toFixed(2)," ms")),s((function(t){return[].concat(Lm(t),[(i-e).toFixed(2)])})),f("".concat((i-e).toFixed(2))+" ms"),t.next=19;break;case 13:e=performance.now(),v.get(y),i=performance.now(),console.log("Execution time after: ".concat(i-e," ms")),s((function(t){return[].concat(Lm(t),[(i-e).toFixed(2)])})),g("".concat((i-e).toFixed(2))+" ms");case 19:return t.abrupt("return");case 20:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){Im(o,r,i,a,s,"next",t)}function s(t){Im(o,r,i,a,s,"throw",t)}a(void 0)}))});return function(){return e.apply(this,arguments)}}();return e.createElement("div",{id:"demo-body"},e.createElement("h1",{id:"page-title",className:"title-font"},"Watch it work!"),e.createElement(Vs.button,{id:"demo-btn",className:"button-text",onClick:function(){b()},whileHover:{scale:1.05},whileTap:{scale:.9},transition:{type:"spring",stiffness:400,damping:17}},"Run the demo"),e.createElement("section",{id:"result-boxes"},e.createElement("section",{id:"cache",className:"data-box"},e.createElement("h2",{className:"result-box-titles"},"Query:"),e.createElement("pre",{className:"query-string"},y)),e.createElement("section",{id:"query-result",className:"data-box"},e.createElement("h2",{className:"result-box-titles"},"Query Result:"),e.createElement("pre",null,e.createElement("code",{className:"query-string"},n)))),e.createElement("section",{id:"metrics-container"},e.createElement("section",{id:"chart-container",className:"metrics"},e.createElement(Sm,{style:{height:"90%"},name:"Chart tracking caching speed",id:"line-chart",options:{responsive:!0,maintainAspectRatio:!0},type:"line",data:c})),e.createElement("section",{id:"time-box",className:"metrics"},e.createElement("h1",{className:"title-font"},"Run Time Statistics"),e.createElement("h6",{className:"body-metric-font"},"Uncached Run Time: ",e.createElement("p",{className:"time-stamp"},d)),e.createElement("h6",{className:"body-metric-font"},"Cached Run Time: ",e.createElement("p",{className:"time-stamp"},m)))))},Nm=function(){return e.createElement("div",{id:"site-flex"},e.createElement(sl,null),e.createElement(hl,null),e.createElement(vl,null),e.createElement(Bm,null))};var zm=i(968),Fm={};Fm.styleTagTransform=Zs(),Fm.setAttributes=Qs(),Fm.insert=qs().bind(null,"head"),Fm.domAPI=Hs(),Fm.insertStyleElement=Xs(),Ws()(zm.Z,Fm),zm.Z&&zm.Z.locals&&zm.Z.locals;const jm=i.p+"83fe72be1352299b2d3df5d657664954.png";function Vm(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,c=!1;try{if(o=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==e);l=!0);}catch(t){c=!0,i=t}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return Um(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Um(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Um(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}const Wm=function(){var t=Vm((0,e.useState)("Copy"),2),n=t[0],r=t[1],i=Vm((0,e.useState)("Copy"),2),o=i[0],a=i[1],s=Vm((0,e.useState)("Copy"),2),l=s[0],c=s[1],u=Vm((0,e.useState)("Copy"),2),h=u[0],d=u[1];return e.createElement(e.Fragment,null,e.createElement("div",{id:"docsbody"},e.createElement("main",{id:"main"},e.createElement("div",{className:"text-box"},e.createElement("div",{className:"lightql-docs"},e.createElement("h1",{className:"section-titles"},"LightQL"),e.createElement("p",{className:"section-paragraphs"},"LightQL is an open-source developer tool that leverages the pinpoint accuracy of GraphQL's queries and implements caching to improve your website's query efficiency.")),e.createElement("div",{id:"using-lightql"},e.createElement("h4",{className:"section-paragraphs"},"Prerequisites:"),e.createElement("ul",{className:"section-paragraphs"},e.createElement("li",null,"GraphQL schemas setup with your database."),e.createElement("li",null,"Fullstack Application where frontend makes query request to backend.")),e.createElement("div",{id:"breakline",className:"divider"})),e.createElement("div",{id:"gettingstarted"},e.createElement("h1",{className:"section-titles"},"Getting Started"),e.createElement("p",{className:"section-paragraphs"},"If this is your first time using LightQL, run the following command in your terminal:"),e.createElement("div",{className:"code-box"},e.createElement("pre",{className:"blue-code-text"},"npm install lightql-cache"),e.createElement("button",{className:"copy-button",onClick:function(){return navigator.clipboard.writeText("npm install lightql-cache")&&r("Copied!")}},n)),e.createElement("p",{id:"below",className:"section-paragraphs"},"In your frontend app’s file (e.g. your ***filename.js*** file), you want to import our LightQL module to handle GraphQL requests using the ES6 module format. This can also be done in your React (.jsx), Typescript (.ts and .tsx), and similar file formats."),e.createElement("div",{className:"code-box"},e.createElement("pre",{className:"blue-code-text"},"import { LRUCache, DoublyLinkedList, DLLNode } from 'lightql-cache';"),e.createElement("button",{className:"copy-button",onClick:function(){return navigator.clipboard.writeText("import { LRUCache, DoublyLinkedList, DLLNode } from 'lightql-cache';")&&a("Copied!")}},o)),e.createElement("p",{id:"below",className:"section-paragraphs"},"Next, create an instance of a cache using the de-structured LRUCache object, passing in a capacity as the first argument. The capacity must be an integer and greater than zero. You must also pass in a valid GraphQL endpoint as a string as the second argument. We have set a capacity of 3 in our example below:"),e.createElement("div",{className:"code-box"},e.createElement("pre",{className:"blue-code-text"},"const cache = new LRUCache(3, 'http://localhost:3000/graphql');"),e.createElement("button",{className:"copy-button",onClick:function(){return navigator.clipboard.writeText("const cache = new LRUCache(3, 'http://localhost:3000/graphql');")&&c("Copied!")}},l)),e.createElement("p",{className:"section-paragraphs"},"Now, to make your first query to the cache, you create a GraphQL formatted query string based on your requirements, for example:"),e.createElement("div",{id:"big-code-box",className:"code-box"},e.createElement("pre",{id:"big-codestring",className:"blue-code-text"},"\n    \nconst graphqlQueryStr = \n\t  \n\t{\n    \n\t\tuser {\n    \n\t\t\tuser_name,\n\t  \n\t\t\tsong_name,\n\t  \n\t\t\tmovie_name\n\t  \n\t\t}\n\t\n\t};")),e.createElement("p",{id:"below",className:"section-paragraphs"},"Next, we invoke the get function associated with the named variable you have for the LRUCache, and pass in your query string and associate variables if necessary. The get function always returns a promise, therefore it is best to generate an async function that leverages the await syntax to resolve the data returned from the cache."),e.createElement("div",{className:"code-box"},e.createElement("pre",{className:"blue-code-text"},"const callLightQL = async () => {\n\t  \n\tconst cacheGet = await cache.get(graphqlQueryStr, variables);\t\t\n  \n}\n"),e.createElement("button",{className:"copy-button",onClick:function(){return navigator.clipboard.writeText("const callLightQL = async () => {\n                        const cacheGet = await cache.get(graphqlQueryStr, variables);\t\t\n                      }")&&d("Copied!")}},h)),e.createElement("p",{id:"below",className:"section-paragraphs"},"Now, you are properly set up and can use the data as you wish!"),e.createElement("p",{id:"below",className:"section-paragraphs"},"A quick example: imagine you had a React app that included Chart.js functionality that you wanted to display on a specific page. You could import LightQL cache to effectively retrieve your data from your database, and then store it in your client-side LightQL caching solution. Then, every time you wanted to display the correct chart.js data, you could grab the correct information from your LightQL cache with extremely low latency time. Example code below:"),e.createElement("img",{className:"image",src:jm}),e.createElement("div",{id:"breakline",className:"divider"}),e.createElement("div",{id:"builtwith"},e.createElement("h1",{className:"section-titles"},"Technology Stack"),e.createElement("ul",{className:"section-paragraphs"},e.createElement("li",null,"GraphQL"),e.createElement("li",null,"Typescript"),e.createElement("li",null,"Node/Express"),e.createElement("li",null,"AWS RDS"),e.createElement("li",null,"React"),e.createElement("li",null,"Chart.js"),e.createElement("li",null,"Jest/Supertest"),e.createElement("li",null,"Webpack"))))))))};var $m=i(764),Hm={};Hm.styleTagTransform=Zs(),Hm.setAttributes=Qs(),Hm.insert=qs().bind(null,"head"),Hm.domAPI=Hs(),Hm.insertStyleElement=Xs(),Ws()($m.Z,Hm),$m.Z&&$m.Z.locals&&$m.Z.locals;const Ym=function(t){var n=t.emailIdName,r=t.name,i=t.email,o=t.emailAria,a=t.GHAria,s=t.LIAria,l=t.headshot,c=t.githubLink,u=t.linkedInLink,h="mailto: ".concat(i);return e.createElement(Vs.div,{whileHover:{scale:1.1},transition:{type:"spring",stiffness:400,damping:14},id:"singleTile"},e.createElement("img",{id:"headshots",alt:"",src:l.default}),e.createElement("section",{id:"bottom-of-tile"},e.createElement("h2",{id:"name"},r),e.createElement(Vs.a,{id:n,"aria-label":o,className:"email-button",whileHover:{scale:1.05},whileTap:{scale:.9},transition:{type:"spring",stiffness:400,damping:17},href:h},"Email me!"),e.createElement("section",{id:"contact-icons"},e.createElement(Vs.a,{"aria-label":a,whileHover:{scale:1.1},transition:{type:"spring",stiffness:400,damping:14},href:c,target:"_blank"},e.createElement("i",{class:"bi bi-github",style:{fontSize:"2rem",color:"#323949"}})),e.createElement(Vs.a,{"aria-label":s,whileHover:{scale:1.1},transition:{type:"spring",stiffness:400,damping:14},href:u,target:"_blank"},e.createElement("i",{class:"bi bi-linkedin",style:{fontSize:"2rem",color:"#323949"}})))))};var qm=i(40),Gm=i(277),Qm=i(7),Jm=i(946),Xm=i(859);const Km=function(){return e.createElement("div",{id:"about-us-page-layout"},e.createElement("h1",{id:"about-us-title"},"Meet the Team"),e.createElement("main",{id:"about-us-layout"},e.createElement(Ym,{emailIdName:"cassEmail",name:"Cassidy Johnson",email:"cassidyrose56@gmail.com",emailAria:"Click here to email Cassidy Johnson",GHAria:"Click here to view Cassidy Johnson\\'s Github",LIAAria:"Click here to view Cassidy Johnson\\'s LinkedIn",githubLink:"https://github.com/cassidyrose56",linkedInLink:"https://www.linkedin.com/in/cassidy-r-johnson/",headshot:qm}),e.createElement(Ym,{emailIdName:"cyrusEmail",name:"Cyrus Yari",email:"cyrus.brk@gmail.com",emailAria:"Click here to email Cyrus Yari",GHAria:"Click here to view Cyrus Yari\\'s Github",LIAria:"Click here to view Cyrus Yari\\'s LinkedIn",githubLink:"https://github.com/cyrusyari",linkedInLink:"https://www.linkedin.com/in/cyrusyari/",headshot:Jm}),e.createElement(Ym,{emailIdName:"drewEmail",name:"Drew Tucker",email:"drewtucker19@gmail.com",emailAria:"Click here to email Drew Tucker",GHAria:"Click here to view Drew Tucker\\'s Github",LIAAria:"Click here to view Drew Tucker\\'s LinkedIn",githubLink:"https://github.com/Drew-tucker33",linkedInLink:"https://www.linkedin.com/in/drew-t-4369199b/",headshot:Gm}),e.createElement(Ym,{emailIdName:"pierceEmail",name:"Pierce Heska",email:"pierceheska@gmail.com",emailAria:"Click here to email Pierce Heska",GHAria:"Click here to view Pierce Heska\\'s Github",LIAAria:"Click here to view Pierce Heska\\'s LinkedIn",githubLink:"https://github.com/pheska",linkedInLink:"https://www.linkedin.com/in/pheska/",headshot:Qm}),e.createElement(Ym,{emailIdName:"rheaEmail",name:"Rhea Wu",email:"rheawu1212@gmail.com",emailAria:"Click here to email Rhea Wu",GHAria:"Click here to view Rhea Wu\\'s Github",LIAAria:"Click here to view Rhea Wu\\'s LinkedIn",githubLink:"https://github.com/rheawu1212",linkedInLink:"https://www.linkedin.com/in/rheawu-tech/",headshot:Xm})))};var Zm=i(507),tg=i(231),eg=i(660);const ng=function(){return e.createElement(e.Fragment,null,e.createElement("section",{id:"navbar"},e.createElement("section",{id:"left-nav"},e.createElement(Gt,{to:"/"},e.createElement(Vs.img,{whileHover:{rotate:-20,bounce:2},id:"navbar-logo",src:Zm.default,alt:"LightQL Homepage"})),e.createElement(Gt,{to:"/"},e.createElement(Vs.button,{whileHover:{scale:1.1},id:"home-btn",className:"nav-btns"},"Home")),e.createElement(Gt,{to:"/docs"},e.createElement(Vs.button,{whileHover:{scale:1.1},id:"docs-btn",className:"nav-btns"},"Docs")),e.createElement(Gt,{to:"/aboutus"},e.createElement(Vs.button,{whileHover:{scale:1.1},id:"aboutus-btn",className:"nav-btns"},"About Us"))),e.createElement("section",{id:"right-nav"},e.createElement(Vs.a,{name:"Github Link","aria-label":"Click to access our Github repository",whileHover:{type:"bounce",scale:1.2},href:"https://github.com/oslabs-beta/LightQL",target:"_blank"},e.createElement("i",{class:"bi bi-github",style:{fontSize:"1.45rem",color:"#323949"}})),e.createElement(Vs.a,{name:"NPM Link","aria-label":"Click to view our NPM package on npmjs.com",whileHover:{type:"bounce",scale:1.2},href:"https://www.npmjs.com/package/lightql-cache",target:"_blank"},e.createElement(Vs.img,{alt:"NPM Link",id:"npm-logo",className:"top-right-icons",src:eg.default})))),e.createElement(Ut,null,e.createElement(jt,{path:"/",element:e.createElement(Nm,null)}),e.createElement(jt,{path:"/docs",element:e.createElement(Wm,null)}),e.createElement(jt,{path:"/aboutus",element:e.createElement(Km,null)}),e.createElement(jt,{path:"/demo",element:e.createElement(Bm,null)})),e.createElement("section",{id:"footer"},e.createElement("img",{alt:"LightQL Logo",id:"black-logo",src:tg.default}),e.createElement("p",{id:"footer-text"},"Made with love by LightQL.")))};var rg,ig=r.createRoot(document.getElementById("root")),og=(rg=[{path:"/",element:e.createElement(ng,null),children:[{path:"/homepage",element:e.createElement(Nm,null)},{path:"/docs",element:e.createElement(Wm,null)},{path:"/aboutus",element:e.createElement(Km,null)},{path:"/demo",element:e.createElement(Bm,null)}]}],function(e){k(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let n=m(e.routes),r=null,i=new Set,o=null,a=null,l=null,c=!1,h=g(n,e.history.location,e.basename),d=null;if(null==h){let t=ot(404,{pathname:e.history.location.pathname}),{matches:r,route:i}=it(n);h=r,d={[i.id]:t}}let f,y,v=!h.some((t=>t.route.loader))||null!=e.hydrationData,b={historyAction:e.history.action,location:e.history.location,matches:h,initialized:v,navigation:H,restoreScrollPosition:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||d,fetchers:new Map},x=t.Pop,A=!1,w=!1,C=!1,_=[],S=[],E=new Map,M=0,P=-1,T=new Map,L=new Set,I=new Map,D=new Map;function R(t){b=s({},b,t),i.forEach((t=>t(b)))}function O(n,r){var i;R(s({},null!=b.actionData&&null!=b.navigation.formMethod&&"loading"===b.navigation.state&&(null==(i=b.navigation.formAction)?void 0:i.split("?")[0])===n.pathname?{}:{actionData:null},r,r.loaderData?{loaderData:nt(b.loaderData,r.loaderData,r.matches||[])}:{},{historyAction:x,location:n,initialized:!0,navigation:H,revalidation:"idle",restoreScrollPosition:!b.navigation.formData&&st(n,r.matches||b.matches),preventScrollReset:A})),w||x===t.Pop||(x===t.Push?e.history.push(n,n.state):x===t.Replace&&e.history.replace(n,n.state)),x=t.Pop,A=!1,w=!1,C=!1,_=[],S=[]}async function B(r,i,c){y&&y.abort(),y=null,x=r,w=!0===(c&&c.startUninterruptedRevalidation),function(t,e){if(o&&a&&l){let n=e.map((t=>mt(t,b.loaderData))),r=a(t,n)||t.key;o[r]=l()}}(b.location,b.matches),A=!0===(c&&c.preventScrollReset);let u=c&&c.overrideNavigation,h=g(n,i,e.basename);if(!h){let t=ot(404,{pathname:i.pathname}),{matches:e,route:r}=it(n);return tt(),void O(i,{matches:e,loaderData:{},errors:{[r.id]:t}})}if(m=i,(d=b.location).pathname===m.pathname&&d.search===m.search&&d.hash!==m.hash)return void O(i,{matches:h});var d,m;y=new AbortController;let v,T,B=Z(i,y.signal,c&&c.submission);if(c&&c.pendingError)T={[rt(h).route.id]:c.pendingError};else if(c&&c.submission){let e=await async function(e,n,r,i,o){let a;j(),R({navigation:s({state:"submitting",location:n},r)});let l=gt(i,n);if(l.route.action){if(a=await K("action",e,l,i,f.basename),e.signal.aborted)return{shortCircuited:!0}}else a={type:p.error,error:ot(405,{method:e.method,pathname:n.pathname,routeId:l.route.id})};if(ut(a))return await z(b,a,o&&!0===o.replace),{shortCircuited:!0};if(ct(a)){let e=rt(i,l.route.id);return!0!==(o&&o.replace)&&(x=t.Push),{pendingActionError:{[e.route.id]:a.error}}}if(lt(a))throw new Error("defer() is not supported in actions");return{pendingActionData:{[l.route.id]:a.data}}}(B,i,c.submission,h,{replace:c.replace});if(e.shortCircuited)return;v=e.pendingActionData,T=e.pendingActionError,u=s({state:"loading",location:i},c.submission)}let{shortCircuited:N,loaderData:V,errors:U}=await async function(t,e,n,r,i,o,a,l){let c=r;c||(c={state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0});let[u,h]=Q(b,n,i,e,C,_,S,a,l,I);if(tt((t=>!(n&&n.some((e=>e.route.id===t)))||u&&u.some((e=>e.route.id===t)))),0===u.length&&0===h.length)return O(e,{matches:n,loaderData:nt(b.loaderData,{},n),errors:l||null,actionData:a||null}),{shortCircuited:!0};w||(h.forEach((t=>{let[e]=t,n=b.fetchers.get(e),r={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};b.fetchers.set(e,r)})),R(s({navigation:c,actionData:a||b.actionData||null},h.length>0?{fetchers:new Map(b.fetchers)}:{}))),P=++M,h.forEach((t=>{let[e]=t;return E.set(e,y)}));let{results:d,loaderResults:f,fetcherResults:p}=await F(b.matches,n,u,h,t);if(t.signal.aborted)return{shortCircuited:!0};h.forEach((t=>{let[e]=t;return E.delete(e)}));let m=at(d);if(m)return await z(b,m,o),{shortCircuited:!0};let{loaderData:g,errors:v}=et(b,n,u,f,l,h,p,D);return D.forEach(((t,e)=>{t.subscribe((n=>{(n||t.done)&&D.delete(e)}))})),function(){let t=[];for(let e of L){let n=b.fetchers.get(e);k(n,"Expected fetcher: "+e),"loading"===n.state&&(L.delete(e),t.push(e))}J(t)}(),s({loaderData:g,errors:v},X(P)||h.length>0?{fetchers:new Map(b.fetchers)}:{})}(B,i,h,u,c&&c.submission,c&&c.replace,v,T);N||(y=null,O(i,{matches:h,loaderData:V,errors:U}))}function N(t){return b.fetchers.get(t)||Y}async function z(e,n,r){n.revalidate&&(C=!0);let i=u(e.location,n.location);if(k(i,"Expected a location on the redirect navigation"),n.external&&"undefined"!=typeof window&&void 0!==window.location)return void(r?window.location.replace(n.location):window.location.assign(n.location));y=null;let o=!0===r?t.Replace:t.Push,{formMethod:a,formAction:s,formEncType:l,formData:c}=e.navigation;$.has(n.status)&&a&&ht(a)&&l&&c?await B(o,i,{submission:{formMethod:a,formAction:n.location,formEncType:l,formData:c}}):await B(o,i,{overrideNavigation:{state:"loading",location:i,formMethod:a||void 0,formAction:s||void 0,formEncType:l||void 0,formData:c||void 0}})}async function F(t,e,n,r,i){let o=await Promise.all([...n.map((t=>K("loader",i,t,e,f.basename))),...r.map((t=>{let[,e,n,r]=t;return K("loader",Z(e,i.signal),n,r,f.basename)}))]),a=o.slice(0,n.length),s=o.slice(n.length);return await Promise.all([dt(t,n,a,i.signal,!1,b.loaderData),dt(t,r.map((t=>{let[,,e]=t;return e})),s,i.signal,!0)]),{results:o,loaderResults:a,fetcherResults:s}}function j(){C=!0,_.push(...tt()),I.forEach(((t,e)=>{E.has(e)&&(S.push(e),W(e))}))}function V(t,e,n){let r=rt(b.matches,e);U(t),R({errors:{[r.route.id]:n},fetchers:new Map(b.fetchers)})}function U(t){E.has(t)&&W(t),I.delete(t),T.delete(t),L.delete(t),b.fetchers.delete(t)}function W(t){let e=E.get(t);k(e,"Expected fetch controller: "+t),e.abort(),E.delete(t)}function J(t){for(let e of t){let t={state:"idle",data:N(e).data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};b.fetchers.set(e,t)}}function X(t){let e=[];for(let[n,r]of T)if(r<t){let t=b.fetchers.get(n);k(t,"Expected fetcher: "+n),"loading"===t.state&&(W(n),T.delete(n),e.push(n))}return J(e),e.length>0}function tt(t){let e=[];return D.forEach(((n,r)=>{t&&!t(r)||(n.cancel(),e.push(r),D.delete(r))})),e}function st(t,e){if(o&&a&&l){let n=e.map((t=>mt(t,b.loaderData))),r=a(t,n)||t.key,i=o[r];if("number"==typeof i)return i}return null}return f={get basename(){return e.basename},get state(){return b},get routes(){return n},initialize:function(){return r=e.history.listen((t=>{let{action:e,location:n}=t;return B(e,n)})),b.initialized||B(t.Pop,b.location),f},subscribe:function(t){return i.add(t),()=>i.delete(t)},enableScrollRestoration:function(t,e,n){if(o=t,l=e,a=n||(t=>t.key),!c&&b.navigation===H){c=!0;let t=st(b.location,b.matches);null!=t&&R({restoreScrollPosition:t})}return()=>{o=null,l=null,a=null}},navigate:async function(n,r){if("number"==typeof n)return void e.history.go(n);let{path:i,submission:o,error:a}=G(n,r),l=u(b.location,i,r&&r.state);l=s({},l,e.history.encodeLocation(l));let c=!0===(r&&r.replace)||null!=o?t.Replace:t.Push,h=r&&"preventScrollReset"in r?!0===r.preventScrollReset:void 0;return await B(c,l,{submission:o,pendingError:a,preventScrollReset:h,replace:r&&r.replace})},fetch:function(t,r,i,o){if(q)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");E.has(t)&&W(t);let a=g(n,i,e.basename);if(!a)return void V(t,r,ot(404,{pathname:i}));let{path:l,submission:c}=G(i,o,!0),u=gt(a,l);c?async function(t,r,i,o,a,l){if(j(),I.delete(t),!o.route.action){let e=ot(405,{method:l.formMethod,pathname:i,routeId:r});return void V(t,r,e)}let c=b.fetchers.get(t),u=s({state:"submitting"},l,{data:c&&c.data});b.fetchers.set(t,u),R({fetchers:new Map(b.fetchers)});let h=new AbortController,d=Z(i,h.signal,l);E.set(t,h);let p=await K("action",d,o,a,f.basename);if(d.signal.aborted)return void(E.get(t)===h&&E.delete(t));if(ut(p)){E.delete(t),L.add(t);let e=s({state:"loading"},l,{data:void 0});return b.fetchers.set(t,e),R({fetchers:new Map(b.fetchers)}),z(b,p)}if(ct(p))return void V(t,r,p.error);lt(p)&&k(!1,"defer() is not supported in actions");let m=b.navigation.location||b.location,v=Z(m,h.signal),A="idle"!==b.navigation.state?g(n,b.navigation.location,e.basename):b.matches;k(A,"Didn't find any matches after fetcher action");let w=++M;T.set(t,w);let B=s({state:"loading",data:p.data},l);b.fetchers.set(t,B);let[N,U]=Q(b,A,l,m,C,_,S,{[o.route.id]:p.data},void 0,I);U.filter((e=>{let[n]=e;return n!==t})).forEach((t=>{let[e]=t,n=b.fetchers.get(e),r={state:"loading",data:n&&n.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};b.fetchers.set(e,r),E.set(e,h)})),R({fetchers:new Map(b.fetchers)});let{results:W,loaderResults:$,fetcherResults:H}=await F(b.matches,A,N,U,v);if(h.signal.aborted)return;T.delete(t),E.delete(t),U.forEach((t=>{let[e]=t;return E.delete(e)}));let Y=at(W);if(Y)return z(b,Y);let{loaderData:q,errors:G}=et(b,b.matches,N,$,void 0,U,H,D),J={state:"idle",data:p.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};b.fetchers.set(t,J);let tt=X(w);"loading"===b.navigation.state&&w>P?(k(x,"Expected pending action"),y&&y.abort(),O(b.navigation.location,{matches:A,loaderData:q,errors:G,fetchers:new Map(b.fetchers)})):(R(s({errors:G,loaderData:nt(b.loaderData,q,A)},tt?{fetchers:new Map(b.fetchers)}:{})),C=!1)}(t,r,l,u,a,c):(I.set(t,[l,u,a]),async function(t,e,n,r,i){let o=b.fetchers.get(t),a={state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,data:o&&o.data};b.fetchers.set(t,a),R({fetchers:new Map(b.fetchers)});let s=new AbortController,l=Z(n,s.signal);E.set(t,s);let c=await K("loader",l,r,i,f.basename);if(lt(c)&&(c=await ft(c,l.signal,!0)||c),E.get(t)===s&&E.delete(t),l.signal.aborted)return;if(ut(c))return void await z(b,c);if(ct(c)){let n=rt(b.matches,e);return b.fetchers.delete(t),void R({fetchers:new Map(b.fetchers),errors:{[n.route.id]:c.error}})}k(!lt(c),"Unhandled fetcher deferred data");let u={state:"idle",data:c.data,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0};b.fetchers.set(t,u),R({fetchers:new Map(b.fetchers)})}(t,r,l,u,a))},revalidate:function(){j(),R({revalidation:"loading"}),"submitting"!==b.navigation.state&&("idle"!==b.navigation.state?B(x||b.historyAction,b.navigation.location,{overrideNavigation:b.navigation}):B(b.historyAction,b.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:N,deleteFetcher:U,dispose:function(){r&&r(),i.clear(),y&&y.abort(),b.fetchers.forEach(((t,e)=>U(e)))},_internalFetchControllers:E,_internalActiveDeferreds:D},f}({basename:void 0,history:function(e){return void 0===e&&(e={}),function(e,n,r,i){void 0===i&&(i={});let{window:o=document.defaultView,v5Compat:a=!1}=i,s=o.history,d=t.Pop,p=null;function m(){d=t.Pop,p&&p({action:d,location:g.location})}let g={get action(){return d},get location(){return e(o,s)},listen(t){if(p)throw new Error("A history only accepts one active listener");return o.addEventListener(l,m),p=t,()=>{o.removeEventListener(l,m),p=null}},createHref:t=>n(o,t),encodeLocation(t){let e=f("string"==typeof t?t:h(t));return{pathname:e.pathname,search:e.search,hash:e.hash}},push:function(e,n){d=t.Push;let i=u(g.location,e,n);r&&r(i,e);let l=c(i),h=g.createHref(i);try{s.pushState(l,"",h)}catch(t){o.location.assign(h)}a&&p&&p({action:d,location:g.location})},replace:function(e,n){d=t.Replace;let i=u(g.location,e,n);r&&r(i,e);let o=c(i),l=g.createHref(i);s.replaceState(o,"",l),a&&p&&p({action:d,location:g.location})},go:t=>s.go(t)};return g}((function(t,e){let{pathname:n,search:r,hash:i}=t.location;return u("",{pathname:n,search:r,hash:i},e.state&&e.state.usr||null,e.state&&e.state.key||"default")}),(function(t,e){return"string"==typeof e?e:h(e)}),null,e)}({window:void 0}),hydrationData:function(){var t;let e=null==(t=window)?void 0:t.__staticRouterHydrationData;return e&&e.errors&&(e=Ht({},e,{errors:qt(e.errors)})),e}(),routes:function t(e){return e.map((e=>{let n=yt({},e);return null==n.hasErrorBoundary&&(n.hasErrorBoundary=null!=n.errorElement),n.children&&(n.children=t(n.children)),n}))}(rg)}).initialize());ig.render(e.createElement("div",null,e.createElement(a(),{url:"https://www.lightql.com/6feb0ea439b5cb6ee74291fa3e2e45d2.png"}),e.createElement(Ft,{router:og})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,